
pulsar-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008418  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e7c  080084d4  080084d4  000184d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009350  08009350  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08009350  08009350  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009350  08009350  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009350  08009350  00019350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009354  08009354  00019354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08009358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000728  20000068  080093c0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000790  080093c0  00020790  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015d99  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a56  00000000  00000000  00035e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a8  00000000  00000000  000398c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd0  00000000  00000000  0003ad70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c573  00000000  00000000  0003bd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019a28  00000000  00000000  000582b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aecab  00000000  00000000  00071cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fec  00000000  00000000  00120988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00125974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080084bc 	.word	0x080084bc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	080084bc 	.word	0x080084bc

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdrcmple>:
 8000230:	4684      	mov	ip, r0
 8000232:	0010      	movs	r0, r2
 8000234:	4662      	mov	r2, ip
 8000236:	468c      	mov	ip, r1
 8000238:	0019      	movs	r1, r3
 800023a:	4663      	mov	r3, ip
 800023c:	e000      	b.n	8000240 <__aeabi_cdcmpeq>
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_cdcmpeq>:
 8000240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000242:	f000 fbe7 	bl	8000a14 <__ledf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	d401      	bmi.n	800024e <__aeabi_cdcmpeq+0xe>
 800024a:	2100      	movs	r1, #0
 800024c:	42c8      	cmn	r0, r1
 800024e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000250 <__aeabi_dcmpeq>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 fb37 	bl	80008c4 <__eqdf2>
 8000256:	4240      	negs	r0, r0
 8000258:	3001      	adds	r0, #1
 800025a:	bd10      	pop	{r4, pc}

0800025c <__aeabi_dcmplt>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f000 fbd9 	bl	8000a14 <__ledf2>
 8000262:	2800      	cmp	r0, #0
 8000264:	db01      	blt.n	800026a <__aeabi_dcmplt+0xe>
 8000266:	2000      	movs	r0, #0
 8000268:	bd10      	pop	{r4, pc}
 800026a:	2001      	movs	r0, #1
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_dcmple>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f000 fbcf 	bl	8000a14 <__ledf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	dd01      	ble.n	800027e <__aeabi_dcmple+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_dcmpgt>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f000 fb5f 	bl	8000948 <__gedf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	dc01      	bgt.n	8000292 <__aeabi_dcmpgt+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_dcmpge>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f000 fb55 	bl	8000948 <__gedf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	da01      	bge.n	80002a6 <__aeabi_dcmpge+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)

080002ac <__aeabi_d2uiz>:
 80002ac:	b570      	push	{r4, r5, r6, lr}
 80002ae:	2200      	movs	r2, #0
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <__aeabi_d2uiz+0x38>)
 80002b2:	0004      	movs	r4, r0
 80002b4:	000d      	movs	r5, r1
 80002b6:	f7ff ffef 	bl	8000298 <__aeabi_dcmpge>
 80002ba:	2800      	cmp	r0, #0
 80002bc:	d104      	bne.n	80002c8 <__aeabi_d2uiz+0x1c>
 80002be:	0020      	movs	r0, r4
 80002c0:	0029      	movs	r1, r5
 80002c2:	f001 fa4f 	bl	8001764 <__aeabi_d2iz>
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <__aeabi_d2uiz+0x38>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	0020      	movs	r0, r4
 80002ce:	0029      	movs	r1, r5
 80002d0:	f000 fec6 	bl	8001060 <__aeabi_dsub>
 80002d4:	f001 fa46 	bl	8001764 <__aeabi_d2iz>
 80002d8:	2380      	movs	r3, #128	; 0x80
 80002da:	061b      	lsls	r3, r3, #24
 80002dc:	469c      	mov	ip, r3
 80002de:	4460      	add	r0, ip
 80002e0:	e7f1      	b.n	80002c6 <__aeabi_d2uiz+0x1a>
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	41e00000 	.word	0x41e00000

080002e8 <__aeabi_ddiv>:
 80002e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ea:	4657      	mov	r7, sl
 80002ec:	464e      	mov	r6, r9
 80002ee:	4645      	mov	r5, r8
 80002f0:	46de      	mov	lr, fp
 80002f2:	b5e0      	push	{r5, r6, r7, lr}
 80002f4:	030c      	lsls	r4, r1, #12
 80002f6:	001f      	movs	r7, r3
 80002f8:	004b      	lsls	r3, r1, #1
 80002fa:	4681      	mov	r9, r0
 80002fc:	4692      	mov	sl, r2
 80002fe:	0005      	movs	r5, r0
 8000300:	b085      	sub	sp, #20
 8000302:	0b24      	lsrs	r4, r4, #12
 8000304:	0d5b      	lsrs	r3, r3, #21
 8000306:	0fce      	lsrs	r6, r1, #31
 8000308:	2b00      	cmp	r3, #0
 800030a:	d100      	bne.n	800030e <__aeabi_ddiv+0x26>
 800030c:	e152      	b.n	80005b4 <__aeabi_ddiv+0x2cc>
 800030e:	4ad2      	ldr	r2, [pc, #840]	; (8000658 <__aeabi_ddiv+0x370>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d100      	bne.n	8000316 <__aeabi_ddiv+0x2e>
 8000314:	e16e      	b.n	80005f4 <__aeabi_ddiv+0x30c>
 8000316:	0f42      	lsrs	r2, r0, #29
 8000318:	00e4      	lsls	r4, r4, #3
 800031a:	4314      	orrs	r4, r2
 800031c:	2280      	movs	r2, #128	; 0x80
 800031e:	0412      	lsls	r2, r2, #16
 8000320:	4322      	orrs	r2, r4
 8000322:	4690      	mov	r8, r2
 8000324:	4acd      	ldr	r2, [pc, #820]	; (800065c <__aeabi_ddiv+0x374>)
 8000326:	00c5      	lsls	r5, r0, #3
 8000328:	4693      	mov	fp, r2
 800032a:	449b      	add	fp, r3
 800032c:	2300      	movs	r3, #0
 800032e:	4699      	mov	r9, r3
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	033c      	lsls	r4, r7, #12
 8000334:	007b      	lsls	r3, r7, #1
 8000336:	4650      	mov	r0, sl
 8000338:	0b24      	lsrs	r4, r4, #12
 800033a:	0d5b      	lsrs	r3, r3, #21
 800033c:	0fff      	lsrs	r7, r7, #31
 800033e:	2b00      	cmp	r3, #0
 8000340:	d100      	bne.n	8000344 <__aeabi_ddiv+0x5c>
 8000342:	e11a      	b.n	800057a <__aeabi_ddiv+0x292>
 8000344:	4ac4      	ldr	r2, [pc, #784]	; (8000658 <__aeabi_ddiv+0x370>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d100      	bne.n	800034c <__aeabi_ddiv+0x64>
 800034a:	e15e      	b.n	800060a <__aeabi_ddiv+0x322>
 800034c:	0f42      	lsrs	r2, r0, #29
 800034e:	00e4      	lsls	r4, r4, #3
 8000350:	4322      	orrs	r2, r4
 8000352:	2480      	movs	r4, #128	; 0x80
 8000354:	0424      	lsls	r4, r4, #16
 8000356:	4314      	orrs	r4, r2
 8000358:	4ac0      	ldr	r2, [pc, #768]	; (800065c <__aeabi_ddiv+0x374>)
 800035a:	00c1      	lsls	r1, r0, #3
 800035c:	4694      	mov	ip, r2
 800035e:	465a      	mov	r2, fp
 8000360:	4463      	add	r3, ip
 8000362:	1ad3      	subs	r3, r2, r3
 8000364:	469b      	mov	fp, r3
 8000366:	2000      	movs	r0, #0
 8000368:	0033      	movs	r3, r6
 800036a:	407b      	eors	r3, r7
 800036c:	469a      	mov	sl, r3
 800036e:	464b      	mov	r3, r9
 8000370:	2b0f      	cmp	r3, #15
 8000372:	d827      	bhi.n	80003c4 <__aeabi_ddiv+0xdc>
 8000374:	4aba      	ldr	r2, [pc, #744]	; (8000660 <__aeabi_ddiv+0x378>)
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	58d3      	ldr	r3, [r2, r3]
 800037a:	469f      	mov	pc, r3
 800037c:	46b2      	mov	sl, r6
 800037e:	9b00      	ldr	r3, [sp, #0]
 8000380:	2b02      	cmp	r3, #2
 8000382:	d016      	beq.n	80003b2 <__aeabi_ddiv+0xca>
 8000384:	2b03      	cmp	r3, #3
 8000386:	d100      	bne.n	800038a <__aeabi_ddiv+0xa2>
 8000388:	e287      	b.n	800089a <__aeabi_ddiv+0x5b2>
 800038a:	2b01      	cmp	r3, #1
 800038c:	d000      	beq.n	8000390 <__aeabi_ddiv+0xa8>
 800038e:	e0d5      	b.n	800053c <__aeabi_ddiv+0x254>
 8000390:	2300      	movs	r3, #0
 8000392:	2200      	movs	r2, #0
 8000394:	2500      	movs	r5, #0
 8000396:	051b      	lsls	r3, r3, #20
 8000398:	4313      	orrs	r3, r2
 800039a:	4652      	mov	r2, sl
 800039c:	07d2      	lsls	r2, r2, #31
 800039e:	4313      	orrs	r3, r2
 80003a0:	0028      	movs	r0, r5
 80003a2:	0019      	movs	r1, r3
 80003a4:	b005      	add	sp, #20
 80003a6:	bcf0      	pop	{r4, r5, r6, r7}
 80003a8:	46bb      	mov	fp, r7
 80003aa:	46b2      	mov	sl, r6
 80003ac:	46a9      	mov	r9, r5
 80003ae:	46a0      	mov	r8, r4
 80003b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b2:	2200      	movs	r2, #0
 80003b4:	2500      	movs	r5, #0
 80003b6:	4ba8      	ldr	r3, [pc, #672]	; (8000658 <__aeabi_ddiv+0x370>)
 80003b8:	e7ed      	b.n	8000396 <__aeabi_ddiv+0xae>
 80003ba:	46ba      	mov	sl, r7
 80003bc:	46a0      	mov	r8, r4
 80003be:	000d      	movs	r5, r1
 80003c0:	9000      	str	r0, [sp, #0]
 80003c2:	e7dc      	b.n	800037e <__aeabi_ddiv+0x96>
 80003c4:	4544      	cmp	r4, r8
 80003c6:	d200      	bcs.n	80003ca <__aeabi_ddiv+0xe2>
 80003c8:	e1c4      	b.n	8000754 <__aeabi_ddiv+0x46c>
 80003ca:	d100      	bne.n	80003ce <__aeabi_ddiv+0xe6>
 80003cc:	e1bf      	b.n	800074e <__aeabi_ddiv+0x466>
 80003ce:	2301      	movs	r3, #1
 80003d0:	425b      	negs	r3, r3
 80003d2:	469c      	mov	ip, r3
 80003d4:	002e      	movs	r6, r5
 80003d6:	4640      	mov	r0, r8
 80003d8:	2500      	movs	r5, #0
 80003da:	44e3      	add	fp, ip
 80003dc:	0223      	lsls	r3, r4, #8
 80003de:	0e0c      	lsrs	r4, r1, #24
 80003e0:	431c      	orrs	r4, r3
 80003e2:	0c1b      	lsrs	r3, r3, #16
 80003e4:	4699      	mov	r9, r3
 80003e6:	0423      	lsls	r3, r4, #16
 80003e8:	020a      	lsls	r2, r1, #8
 80003ea:	0c1f      	lsrs	r7, r3, #16
 80003ec:	4649      	mov	r1, r9
 80003ee:	9200      	str	r2, [sp, #0]
 80003f0:	9701      	str	r7, [sp, #4]
 80003f2:	f7ff ff17 	bl	8000224 <__aeabi_uidivmod>
 80003f6:	0002      	movs	r2, r0
 80003f8:	437a      	muls	r2, r7
 80003fa:	040b      	lsls	r3, r1, #16
 80003fc:	0c31      	lsrs	r1, r6, #16
 80003fe:	4680      	mov	r8, r0
 8000400:	4319      	orrs	r1, r3
 8000402:	428a      	cmp	r2, r1
 8000404:	d907      	bls.n	8000416 <__aeabi_ddiv+0x12e>
 8000406:	2301      	movs	r3, #1
 8000408:	425b      	negs	r3, r3
 800040a:	469c      	mov	ip, r3
 800040c:	1909      	adds	r1, r1, r4
 800040e:	44e0      	add	r8, ip
 8000410:	428c      	cmp	r4, r1
 8000412:	d800      	bhi.n	8000416 <__aeabi_ddiv+0x12e>
 8000414:	e201      	b.n	800081a <__aeabi_ddiv+0x532>
 8000416:	1a88      	subs	r0, r1, r2
 8000418:	4649      	mov	r1, r9
 800041a:	f7ff ff03 	bl	8000224 <__aeabi_uidivmod>
 800041e:	9a01      	ldr	r2, [sp, #4]
 8000420:	0436      	lsls	r6, r6, #16
 8000422:	4342      	muls	r2, r0
 8000424:	0409      	lsls	r1, r1, #16
 8000426:	0c36      	lsrs	r6, r6, #16
 8000428:	0003      	movs	r3, r0
 800042a:	430e      	orrs	r6, r1
 800042c:	42b2      	cmp	r2, r6
 800042e:	d904      	bls.n	800043a <__aeabi_ddiv+0x152>
 8000430:	1936      	adds	r6, r6, r4
 8000432:	3b01      	subs	r3, #1
 8000434:	42b4      	cmp	r4, r6
 8000436:	d800      	bhi.n	800043a <__aeabi_ddiv+0x152>
 8000438:	e1e9      	b.n	800080e <__aeabi_ddiv+0x526>
 800043a:	1ab0      	subs	r0, r6, r2
 800043c:	4642      	mov	r2, r8
 800043e:	9e00      	ldr	r6, [sp, #0]
 8000440:	0412      	lsls	r2, r2, #16
 8000442:	431a      	orrs	r2, r3
 8000444:	0c33      	lsrs	r3, r6, #16
 8000446:	001f      	movs	r7, r3
 8000448:	0c11      	lsrs	r1, r2, #16
 800044a:	4690      	mov	r8, r2
 800044c:	9302      	str	r3, [sp, #8]
 800044e:	0413      	lsls	r3, r2, #16
 8000450:	0432      	lsls	r2, r6, #16
 8000452:	0c16      	lsrs	r6, r2, #16
 8000454:	0032      	movs	r2, r6
 8000456:	0c1b      	lsrs	r3, r3, #16
 8000458:	435a      	muls	r2, r3
 800045a:	9603      	str	r6, [sp, #12]
 800045c:	437b      	muls	r3, r7
 800045e:	434e      	muls	r6, r1
 8000460:	4379      	muls	r1, r7
 8000462:	0c17      	lsrs	r7, r2, #16
 8000464:	46bc      	mov	ip, r7
 8000466:	199b      	adds	r3, r3, r6
 8000468:	4463      	add	r3, ip
 800046a:	429e      	cmp	r6, r3
 800046c:	d903      	bls.n	8000476 <__aeabi_ddiv+0x18e>
 800046e:	2680      	movs	r6, #128	; 0x80
 8000470:	0276      	lsls	r6, r6, #9
 8000472:	46b4      	mov	ip, r6
 8000474:	4461      	add	r1, ip
 8000476:	0c1e      	lsrs	r6, r3, #16
 8000478:	1871      	adds	r1, r6, r1
 800047a:	0416      	lsls	r6, r2, #16
 800047c:	041b      	lsls	r3, r3, #16
 800047e:	0c36      	lsrs	r6, r6, #16
 8000480:	199e      	adds	r6, r3, r6
 8000482:	4288      	cmp	r0, r1
 8000484:	d302      	bcc.n	800048c <__aeabi_ddiv+0x1a4>
 8000486:	d112      	bne.n	80004ae <__aeabi_ddiv+0x1c6>
 8000488:	42b5      	cmp	r5, r6
 800048a:	d210      	bcs.n	80004ae <__aeabi_ddiv+0x1c6>
 800048c:	4643      	mov	r3, r8
 800048e:	1e5a      	subs	r2, r3, #1
 8000490:	9b00      	ldr	r3, [sp, #0]
 8000492:	469c      	mov	ip, r3
 8000494:	4465      	add	r5, ip
 8000496:	001f      	movs	r7, r3
 8000498:	429d      	cmp	r5, r3
 800049a:	419b      	sbcs	r3, r3
 800049c:	425b      	negs	r3, r3
 800049e:	191b      	adds	r3, r3, r4
 80004a0:	18c0      	adds	r0, r0, r3
 80004a2:	4284      	cmp	r4, r0
 80004a4:	d200      	bcs.n	80004a8 <__aeabi_ddiv+0x1c0>
 80004a6:	e19e      	b.n	80007e6 <__aeabi_ddiv+0x4fe>
 80004a8:	d100      	bne.n	80004ac <__aeabi_ddiv+0x1c4>
 80004aa:	e199      	b.n	80007e0 <__aeabi_ddiv+0x4f8>
 80004ac:	4690      	mov	r8, r2
 80004ae:	1bae      	subs	r6, r5, r6
 80004b0:	42b5      	cmp	r5, r6
 80004b2:	41ad      	sbcs	r5, r5
 80004b4:	1a40      	subs	r0, r0, r1
 80004b6:	426d      	negs	r5, r5
 80004b8:	1b40      	subs	r0, r0, r5
 80004ba:	4284      	cmp	r4, r0
 80004bc:	d100      	bne.n	80004c0 <__aeabi_ddiv+0x1d8>
 80004be:	e1d2      	b.n	8000866 <__aeabi_ddiv+0x57e>
 80004c0:	4649      	mov	r1, r9
 80004c2:	f7ff feaf 	bl	8000224 <__aeabi_uidivmod>
 80004c6:	9a01      	ldr	r2, [sp, #4]
 80004c8:	040b      	lsls	r3, r1, #16
 80004ca:	4342      	muls	r2, r0
 80004cc:	0c31      	lsrs	r1, r6, #16
 80004ce:	0005      	movs	r5, r0
 80004d0:	4319      	orrs	r1, r3
 80004d2:	428a      	cmp	r2, r1
 80004d4:	d900      	bls.n	80004d8 <__aeabi_ddiv+0x1f0>
 80004d6:	e16c      	b.n	80007b2 <__aeabi_ddiv+0x4ca>
 80004d8:	1a88      	subs	r0, r1, r2
 80004da:	4649      	mov	r1, r9
 80004dc:	f7ff fea2 	bl	8000224 <__aeabi_uidivmod>
 80004e0:	9a01      	ldr	r2, [sp, #4]
 80004e2:	0436      	lsls	r6, r6, #16
 80004e4:	4342      	muls	r2, r0
 80004e6:	0409      	lsls	r1, r1, #16
 80004e8:	0c36      	lsrs	r6, r6, #16
 80004ea:	0003      	movs	r3, r0
 80004ec:	430e      	orrs	r6, r1
 80004ee:	42b2      	cmp	r2, r6
 80004f0:	d900      	bls.n	80004f4 <__aeabi_ddiv+0x20c>
 80004f2:	e153      	b.n	800079c <__aeabi_ddiv+0x4b4>
 80004f4:	9803      	ldr	r0, [sp, #12]
 80004f6:	1ab6      	subs	r6, r6, r2
 80004f8:	0002      	movs	r2, r0
 80004fa:	042d      	lsls	r5, r5, #16
 80004fc:	431d      	orrs	r5, r3
 80004fe:	9f02      	ldr	r7, [sp, #8]
 8000500:	042b      	lsls	r3, r5, #16
 8000502:	0c1b      	lsrs	r3, r3, #16
 8000504:	435a      	muls	r2, r3
 8000506:	437b      	muls	r3, r7
 8000508:	469c      	mov	ip, r3
 800050a:	0c29      	lsrs	r1, r5, #16
 800050c:	4348      	muls	r0, r1
 800050e:	0c13      	lsrs	r3, r2, #16
 8000510:	4484      	add	ip, r0
 8000512:	4463      	add	r3, ip
 8000514:	4379      	muls	r1, r7
 8000516:	4298      	cmp	r0, r3
 8000518:	d903      	bls.n	8000522 <__aeabi_ddiv+0x23a>
 800051a:	2080      	movs	r0, #128	; 0x80
 800051c:	0240      	lsls	r0, r0, #9
 800051e:	4684      	mov	ip, r0
 8000520:	4461      	add	r1, ip
 8000522:	0c18      	lsrs	r0, r3, #16
 8000524:	0412      	lsls	r2, r2, #16
 8000526:	041b      	lsls	r3, r3, #16
 8000528:	0c12      	lsrs	r2, r2, #16
 800052a:	1840      	adds	r0, r0, r1
 800052c:	189b      	adds	r3, r3, r2
 800052e:	4286      	cmp	r6, r0
 8000530:	d200      	bcs.n	8000534 <__aeabi_ddiv+0x24c>
 8000532:	e100      	b.n	8000736 <__aeabi_ddiv+0x44e>
 8000534:	d100      	bne.n	8000538 <__aeabi_ddiv+0x250>
 8000536:	e0fb      	b.n	8000730 <__aeabi_ddiv+0x448>
 8000538:	2301      	movs	r3, #1
 800053a:	431d      	orrs	r5, r3
 800053c:	4b49      	ldr	r3, [pc, #292]	; (8000664 <__aeabi_ddiv+0x37c>)
 800053e:	445b      	add	r3, fp
 8000540:	2b00      	cmp	r3, #0
 8000542:	dc00      	bgt.n	8000546 <__aeabi_ddiv+0x25e>
 8000544:	e0aa      	b.n	800069c <__aeabi_ddiv+0x3b4>
 8000546:	076a      	lsls	r2, r5, #29
 8000548:	d000      	beq.n	800054c <__aeabi_ddiv+0x264>
 800054a:	e13d      	b.n	80007c8 <__aeabi_ddiv+0x4e0>
 800054c:	08e9      	lsrs	r1, r5, #3
 800054e:	4642      	mov	r2, r8
 8000550:	01d2      	lsls	r2, r2, #7
 8000552:	d506      	bpl.n	8000562 <__aeabi_ddiv+0x27a>
 8000554:	4642      	mov	r2, r8
 8000556:	4b44      	ldr	r3, [pc, #272]	; (8000668 <__aeabi_ddiv+0x380>)
 8000558:	401a      	ands	r2, r3
 800055a:	2380      	movs	r3, #128	; 0x80
 800055c:	4690      	mov	r8, r2
 800055e:	00db      	lsls	r3, r3, #3
 8000560:	445b      	add	r3, fp
 8000562:	4a42      	ldr	r2, [pc, #264]	; (800066c <__aeabi_ddiv+0x384>)
 8000564:	4293      	cmp	r3, r2
 8000566:	dd00      	ble.n	800056a <__aeabi_ddiv+0x282>
 8000568:	e723      	b.n	80003b2 <__aeabi_ddiv+0xca>
 800056a:	4642      	mov	r2, r8
 800056c:	055b      	lsls	r3, r3, #21
 800056e:	0755      	lsls	r5, r2, #29
 8000570:	0252      	lsls	r2, r2, #9
 8000572:	430d      	orrs	r5, r1
 8000574:	0b12      	lsrs	r2, r2, #12
 8000576:	0d5b      	lsrs	r3, r3, #21
 8000578:	e70d      	b.n	8000396 <__aeabi_ddiv+0xae>
 800057a:	4651      	mov	r1, sl
 800057c:	4321      	orrs	r1, r4
 800057e:	d100      	bne.n	8000582 <__aeabi_ddiv+0x29a>
 8000580:	e07c      	b.n	800067c <__aeabi_ddiv+0x394>
 8000582:	2c00      	cmp	r4, #0
 8000584:	d100      	bne.n	8000588 <__aeabi_ddiv+0x2a0>
 8000586:	e0fb      	b.n	8000780 <__aeabi_ddiv+0x498>
 8000588:	0020      	movs	r0, r4
 800058a:	f001 f947 	bl	800181c <__clzsi2>
 800058e:	0002      	movs	r2, r0
 8000590:	3a0b      	subs	r2, #11
 8000592:	231d      	movs	r3, #29
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	4652      	mov	r2, sl
 8000598:	0001      	movs	r1, r0
 800059a:	40da      	lsrs	r2, r3
 800059c:	4653      	mov	r3, sl
 800059e:	3908      	subs	r1, #8
 80005a0:	408b      	lsls	r3, r1
 80005a2:	408c      	lsls	r4, r1
 80005a4:	0019      	movs	r1, r3
 80005a6:	4314      	orrs	r4, r2
 80005a8:	4b31      	ldr	r3, [pc, #196]	; (8000670 <__aeabi_ddiv+0x388>)
 80005aa:	4458      	add	r0, fp
 80005ac:	469b      	mov	fp, r3
 80005ae:	4483      	add	fp, r0
 80005b0:	2000      	movs	r0, #0
 80005b2:	e6d9      	b.n	8000368 <__aeabi_ddiv+0x80>
 80005b4:	0003      	movs	r3, r0
 80005b6:	4323      	orrs	r3, r4
 80005b8:	4698      	mov	r8, r3
 80005ba:	d044      	beq.n	8000646 <__aeabi_ddiv+0x35e>
 80005bc:	2c00      	cmp	r4, #0
 80005be:	d100      	bne.n	80005c2 <__aeabi_ddiv+0x2da>
 80005c0:	e0cf      	b.n	8000762 <__aeabi_ddiv+0x47a>
 80005c2:	0020      	movs	r0, r4
 80005c4:	f001 f92a 	bl	800181c <__clzsi2>
 80005c8:	0001      	movs	r1, r0
 80005ca:	0002      	movs	r2, r0
 80005cc:	390b      	subs	r1, #11
 80005ce:	231d      	movs	r3, #29
 80005d0:	1a5b      	subs	r3, r3, r1
 80005d2:	4649      	mov	r1, r9
 80005d4:	0010      	movs	r0, r2
 80005d6:	40d9      	lsrs	r1, r3
 80005d8:	3808      	subs	r0, #8
 80005da:	4084      	lsls	r4, r0
 80005dc:	000b      	movs	r3, r1
 80005de:	464d      	mov	r5, r9
 80005e0:	4323      	orrs	r3, r4
 80005e2:	4698      	mov	r8, r3
 80005e4:	4085      	lsls	r5, r0
 80005e6:	4b23      	ldr	r3, [pc, #140]	; (8000674 <__aeabi_ddiv+0x38c>)
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	469b      	mov	fp, r3
 80005ec:	2300      	movs	r3, #0
 80005ee:	4699      	mov	r9, r3
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	e69e      	b.n	8000332 <__aeabi_ddiv+0x4a>
 80005f4:	0002      	movs	r2, r0
 80005f6:	4322      	orrs	r2, r4
 80005f8:	4690      	mov	r8, r2
 80005fa:	d11d      	bne.n	8000638 <__aeabi_ddiv+0x350>
 80005fc:	2208      	movs	r2, #8
 80005fe:	469b      	mov	fp, r3
 8000600:	2302      	movs	r3, #2
 8000602:	2500      	movs	r5, #0
 8000604:	4691      	mov	r9, r2
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	e693      	b.n	8000332 <__aeabi_ddiv+0x4a>
 800060a:	4651      	mov	r1, sl
 800060c:	4321      	orrs	r1, r4
 800060e:	d109      	bne.n	8000624 <__aeabi_ddiv+0x33c>
 8000610:	2302      	movs	r3, #2
 8000612:	464a      	mov	r2, r9
 8000614:	431a      	orrs	r2, r3
 8000616:	4b18      	ldr	r3, [pc, #96]	; (8000678 <__aeabi_ddiv+0x390>)
 8000618:	4691      	mov	r9, r2
 800061a:	469c      	mov	ip, r3
 800061c:	2400      	movs	r4, #0
 800061e:	2002      	movs	r0, #2
 8000620:	44e3      	add	fp, ip
 8000622:	e6a1      	b.n	8000368 <__aeabi_ddiv+0x80>
 8000624:	2303      	movs	r3, #3
 8000626:	464a      	mov	r2, r9
 8000628:	431a      	orrs	r2, r3
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <__aeabi_ddiv+0x390>)
 800062c:	4691      	mov	r9, r2
 800062e:	469c      	mov	ip, r3
 8000630:	4651      	mov	r1, sl
 8000632:	2003      	movs	r0, #3
 8000634:	44e3      	add	fp, ip
 8000636:	e697      	b.n	8000368 <__aeabi_ddiv+0x80>
 8000638:	220c      	movs	r2, #12
 800063a:	469b      	mov	fp, r3
 800063c:	2303      	movs	r3, #3
 800063e:	46a0      	mov	r8, r4
 8000640:	4691      	mov	r9, r2
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	e675      	b.n	8000332 <__aeabi_ddiv+0x4a>
 8000646:	2304      	movs	r3, #4
 8000648:	4699      	mov	r9, r3
 800064a:	2300      	movs	r3, #0
 800064c:	469b      	mov	fp, r3
 800064e:	3301      	adds	r3, #1
 8000650:	2500      	movs	r5, #0
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	e66d      	b.n	8000332 <__aeabi_ddiv+0x4a>
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	000007ff 	.word	0x000007ff
 800065c:	fffffc01 	.word	0xfffffc01
 8000660:	080084ec 	.word	0x080084ec
 8000664:	000003ff 	.word	0x000003ff
 8000668:	feffffff 	.word	0xfeffffff
 800066c:	000007fe 	.word	0x000007fe
 8000670:	000003f3 	.word	0x000003f3
 8000674:	fffffc0d 	.word	0xfffffc0d
 8000678:	fffff801 	.word	0xfffff801
 800067c:	464a      	mov	r2, r9
 800067e:	2301      	movs	r3, #1
 8000680:	431a      	orrs	r2, r3
 8000682:	4691      	mov	r9, r2
 8000684:	2400      	movs	r4, #0
 8000686:	2001      	movs	r0, #1
 8000688:	e66e      	b.n	8000368 <__aeabi_ddiv+0x80>
 800068a:	2300      	movs	r3, #0
 800068c:	2280      	movs	r2, #128	; 0x80
 800068e:	469a      	mov	sl, r3
 8000690:	2500      	movs	r5, #0
 8000692:	4b88      	ldr	r3, [pc, #544]	; (80008b4 <__aeabi_ddiv+0x5cc>)
 8000694:	0312      	lsls	r2, r2, #12
 8000696:	e67e      	b.n	8000396 <__aeabi_ddiv+0xae>
 8000698:	2501      	movs	r5, #1
 800069a:	426d      	negs	r5, r5
 800069c:	2201      	movs	r2, #1
 800069e:	1ad2      	subs	r2, r2, r3
 80006a0:	2a38      	cmp	r2, #56	; 0x38
 80006a2:	dd00      	ble.n	80006a6 <__aeabi_ddiv+0x3be>
 80006a4:	e674      	b.n	8000390 <__aeabi_ddiv+0xa8>
 80006a6:	2a1f      	cmp	r2, #31
 80006a8:	dc00      	bgt.n	80006ac <__aeabi_ddiv+0x3c4>
 80006aa:	e0bd      	b.n	8000828 <__aeabi_ddiv+0x540>
 80006ac:	211f      	movs	r1, #31
 80006ae:	4249      	negs	r1, r1
 80006b0:	1acb      	subs	r3, r1, r3
 80006b2:	4641      	mov	r1, r8
 80006b4:	40d9      	lsrs	r1, r3
 80006b6:	000b      	movs	r3, r1
 80006b8:	2a20      	cmp	r2, #32
 80006ba:	d004      	beq.n	80006c6 <__aeabi_ddiv+0x3de>
 80006bc:	4641      	mov	r1, r8
 80006be:	4a7e      	ldr	r2, [pc, #504]	; (80008b8 <__aeabi_ddiv+0x5d0>)
 80006c0:	445a      	add	r2, fp
 80006c2:	4091      	lsls	r1, r2
 80006c4:	430d      	orrs	r5, r1
 80006c6:	0029      	movs	r1, r5
 80006c8:	1e4a      	subs	r2, r1, #1
 80006ca:	4191      	sbcs	r1, r2
 80006cc:	4319      	orrs	r1, r3
 80006ce:	2307      	movs	r3, #7
 80006d0:	001d      	movs	r5, r3
 80006d2:	2200      	movs	r2, #0
 80006d4:	400d      	ands	r5, r1
 80006d6:	420b      	tst	r3, r1
 80006d8:	d100      	bne.n	80006dc <__aeabi_ddiv+0x3f4>
 80006da:	e0d0      	b.n	800087e <__aeabi_ddiv+0x596>
 80006dc:	220f      	movs	r2, #15
 80006de:	2300      	movs	r3, #0
 80006e0:	400a      	ands	r2, r1
 80006e2:	2a04      	cmp	r2, #4
 80006e4:	d100      	bne.n	80006e8 <__aeabi_ddiv+0x400>
 80006e6:	e0c7      	b.n	8000878 <__aeabi_ddiv+0x590>
 80006e8:	1d0a      	adds	r2, r1, #4
 80006ea:	428a      	cmp	r2, r1
 80006ec:	4189      	sbcs	r1, r1
 80006ee:	4249      	negs	r1, r1
 80006f0:	185b      	adds	r3, r3, r1
 80006f2:	0011      	movs	r1, r2
 80006f4:	021a      	lsls	r2, r3, #8
 80006f6:	d400      	bmi.n	80006fa <__aeabi_ddiv+0x412>
 80006f8:	e0be      	b.n	8000878 <__aeabi_ddiv+0x590>
 80006fa:	2301      	movs	r3, #1
 80006fc:	2200      	movs	r2, #0
 80006fe:	2500      	movs	r5, #0
 8000700:	e649      	b.n	8000396 <__aeabi_ddiv+0xae>
 8000702:	2280      	movs	r2, #128	; 0x80
 8000704:	4643      	mov	r3, r8
 8000706:	0312      	lsls	r2, r2, #12
 8000708:	4213      	tst	r3, r2
 800070a:	d008      	beq.n	800071e <__aeabi_ddiv+0x436>
 800070c:	4214      	tst	r4, r2
 800070e:	d106      	bne.n	800071e <__aeabi_ddiv+0x436>
 8000710:	4322      	orrs	r2, r4
 8000712:	0312      	lsls	r2, r2, #12
 8000714:	46ba      	mov	sl, r7
 8000716:	000d      	movs	r5, r1
 8000718:	4b66      	ldr	r3, [pc, #408]	; (80008b4 <__aeabi_ddiv+0x5cc>)
 800071a:	0b12      	lsrs	r2, r2, #12
 800071c:	e63b      	b.n	8000396 <__aeabi_ddiv+0xae>
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	4643      	mov	r3, r8
 8000722:	0312      	lsls	r2, r2, #12
 8000724:	431a      	orrs	r2, r3
 8000726:	0312      	lsls	r2, r2, #12
 8000728:	46b2      	mov	sl, r6
 800072a:	4b62      	ldr	r3, [pc, #392]	; (80008b4 <__aeabi_ddiv+0x5cc>)
 800072c:	0b12      	lsrs	r2, r2, #12
 800072e:	e632      	b.n	8000396 <__aeabi_ddiv+0xae>
 8000730:	2b00      	cmp	r3, #0
 8000732:	d100      	bne.n	8000736 <__aeabi_ddiv+0x44e>
 8000734:	e702      	b.n	800053c <__aeabi_ddiv+0x254>
 8000736:	19a6      	adds	r6, r4, r6
 8000738:	1e6a      	subs	r2, r5, #1
 800073a:	42a6      	cmp	r6, r4
 800073c:	d200      	bcs.n	8000740 <__aeabi_ddiv+0x458>
 800073e:	e089      	b.n	8000854 <__aeabi_ddiv+0x56c>
 8000740:	4286      	cmp	r6, r0
 8000742:	d200      	bcs.n	8000746 <__aeabi_ddiv+0x45e>
 8000744:	e09f      	b.n	8000886 <__aeabi_ddiv+0x59e>
 8000746:	d100      	bne.n	800074a <__aeabi_ddiv+0x462>
 8000748:	e0af      	b.n	80008aa <__aeabi_ddiv+0x5c2>
 800074a:	0015      	movs	r5, r2
 800074c:	e6f4      	b.n	8000538 <__aeabi_ddiv+0x250>
 800074e:	42a9      	cmp	r1, r5
 8000750:	d900      	bls.n	8000754 <__aeabi_ddiv+0x46c>
 8000752:	e63c      	b.n	80003ce <__aeabi_ddiv+0xe6>
 8000754:	4643      	mov	r3, r8
 8000756:	07de      	lsls	r6, r3, #31
 8000758:	0858      	lsrs	r0, r3, #1
 800075a:	086b      	lsrs	r3, r5, #1
 800075c:	431e      	orrs	r6, r3
 800075e:	07ed      	lsls	r5, r5, #31
 8000760:	e63c      	b.n	80003dc <__aeabi_ddiv+0xf4>
 8000762:	f001 f85b 	bl	800181c <__clzsi2>
 8000766:	0001      	movs	r1, r0
 8000768:	0002      	movs	r2, r0
 800076a:	3115      	adds	r1, #21
 800076c:	3220      	adds	r2, #32
 800076e:	291c      	cmp	r1, #28
 8000770:	dc00      	bgt.n	8000774 <__aeabi_ddiv+0x48c>
 8000772:	e72c      	b.n	80005ce <__aeabi_ddiv+0x2e6>
 8000774:	464b      	mov	r3, r9
 8000776:	3808      	subs	r0, #8
 8000778:	4083      	lsls	r3, r0
 800077a:	2500      	movs	r5, #0
 800077c:	4698      	mov	r8, r3
 800077e:	e732      	b.n	80005e6 <__aeabi_ddiv+0x2fe>
 8000780:	f001 f84c 	bl	800181c <__clzsi2>
 8000784:	0003      	movs	r3, r0
 8000786:	001a      	movs	r2, r3
 8000788:	3215      	adds	r2, #21
 800078a:	3020      	adds	r0, #32
 800078c:	2a1c      	cmp	r2, #28
 800078e:	dc00      	bgt.n	8000792 <__aeabi_ddiv+0x4aa>
 8000790:	e6ff      	b.n	8000592 <__aeabi_ddiv+0x2aa>
 8000792:	4654      	mov	r4, sl
 8000794:	3b08      	subs	r3, #8
 8000796:	2100      	movs	r1, #0
 8000798:	409c      	lsls	r4, r3
 800079a:	e705      	b.n	80005a8 <__aeabi_ddiv+0x2c0>
 800079c:	1936      	adds	r6, r6, r4
 800079e:	3b01      	subs	r3, #1
 80007a0:	42b4      	cmp	r4, r6
 80007a2:	d900      	bls.n	80007a6 <__aeabi_ddiv+0x4be>
 80007a4:	e6a6      	b.n	80004f4 <__aeabi_ddiv+0x20c>
 80007a6:	42b2      	cmp	r2, r6
 80007a8:	d800      	bhi.n	80007ac <__aeabi_ddiv+0x4c4>
 80007aa:	e6a3      	b.n	80004f4 <__aeabi_ddiv+0x20c>
 80007ac:	1e83      	subs	r3, r0, #2
 80007ae:	1936      	adds	r6, r6, r4
 80007b0:	e6a0      	b.n	80004f4 <__aeabi_ddiv+0x20c>
 80007b2:	1909      	adds	r1, r1, r4
 80007b4:	3d01      	subs	r5, #1
 80007b6:	428c      	cmp	r4, r1
 80007b8:	d900      	bls.n	80007bc <__aeabi_ddiv+0x4d4>
 80007ba:	e68d      	b.n	80004d8 <__aeabi_ddiv+0x1f0>
 80007bc:	428a      	cmp	r2, r1
 80007be:	d800      	bhi.n	80007c2 <__aeabi_ddiv+0x4da>
 80007c0:	e68a      	b.n	80004d8 <__aeabi_ddiv+0x1f0>
 80007c2:	1e85      	subs	r5, r0, #2
 80007c4:	1909      	adds	r1, r1, r4
 80007c6:	e687      	b.n	80004d8 <__aeabi_ddiv+0x1f0>
 80007c8:	220f      	movs	r2, #15
 80007ca:	402a      	ands	r2, r5
 80007cc:	2a04      	cmp	r2, #4
 80007ce:	d100      	bne.n	80007d2 <__aeabi_ddiv+0x4ea>
 80007d0:	e6bc      	b.n	800054c <__aeabi_ddiv+0x264>
 80007d2:	1d29      	adds	r1, r5, #4
 80007d4:	42a9      	cmp	r1, r5
 80007d6:	41ad      	sbcs	r5, r5
 80007d8:	426d      	negs	r5, r5
 80007da:	08c9      	lsrs	r1, r1, #3
 80007dc:	44a8      	add	r8, r5
 80007de:	e6b6      	b.n	800054e <__aeabi_ddiv+0x266>
 80007e0:	42af      	cmp	r7, r5
 80007e2:	d900      	bls.n	80007e6 <__aeabi_ddiv+0x4fe>
 80007e4:	e662      	b.n	80004ac <__aeabi_ddiv+0x1c4>
 80007e6:	4281      	cmp	r1, r0
 80007e8:	d804      	bhi.n	80007f4 <__aeabi_ddiv+0x50c>
 80007ea:	d000      	beq.n	80007ee <__aeabi_ddiv+0x506>
 80007ec:	e65e      	b.n	80004ac <__aeabi_ddiv+0x1c4>
 80007ee:	42ae      	cmp	r6, r5
 80007f0:	d800      	bhi.n	80007f4 <__aeabi_ddiv+0x50c>
 80007f2:	e65b      	b.n	80004ac <__aeabi_ddiv+0x1c4>
 80007f4:	2302      	movs	r3, #2
 80007f6:	425b      	negs	r3, r3
 80007f8:	469c      	mov	ip, r3
 80007fa:	9b00      	ldr	r3, [sp, #0]
 80007fc:	44e0      	add	r8, ip
 80007fe:	469c      	mov	ip, r3
 8000800:	4465      	add	r5, ip
 8000802:	429d      	cmp	r5, r3
 8000804:	419b      	sbcs	r3, r3
 8000806:	425b      	negs	r3, r3
 8000808:	191b      	adds	r3, r3, r4
 800080a:	18c0      	adds	r0, r0, r3
 800080c:	e64f      	b.n	80004ae <__aeabi_ddiv+0x1c6>
 800080e:	42b2      	cmp	r2, r6
 8000810:	d800      	bhi.n	8000814 <__aeabi_ddiv+0x52c>
 8000812:	e612      	b.n	800043a <__aeabi_ddiv+0x152>
 8000814:	1e83      	subs	r3, r0, #2
 8000816:	1936      	adds	r6, r6, r4
 8000818:	e60f      	b.n	800043a <__aeabi_ddiv+0x152>
 800081a:	428a      	cmp	r2, r1
 800081c:	d800      	bhi.n	8000820 <__aeabi_ddiv+0x538>
 800081e:	e5fa      	b.n	8000416 <__aeabi_ddiv+0x12e>
 8000820:	1e83      	subs	r3, r0, #2
 8000822:	4698      	mov	r8, r3
 8000824:	1909      	adds	r1, r1, r4
 8000826:	e5f6      	b.n	8000416 <__aeabi_ddiv+0x12e>
 8000828:	4b24      	ldr	r3, [pc, #144]	; (80008bc <__aeabi_ddiv+0x5d4>)
 800082a:	0028      	movs	r0, r5
 800082c:	445b      	add	r3, fp
 800082e:	4641      	mov	r1, r8
 8000830:	409d      	lsls	r5, r3
 8000832:	4099      	lsls	r1, r3
 8000834:	40d0      	lsrs	r0, r2
 8000836:	1e6b      	subs	r3, r5, #1
 8000838:	419d      	sbcs	r5, r3
 800083a:	4643      	mov	r3, r8
 800083c:	4301      	orrs	r1, r0
 800083e:	4329      	orrs	r1, r5
 8000840:	40d3      	lsrs	r3, r2
 8000842:	074a      	lsls	r2, r1, #29
 8000844:	d100      	bne.n	8000848 <__aeabi_ddiv+0x560>
 8000846:	e755      	b.n	80006f4 <__aeabi_ddiv+0x40c>
 8000848:	220f      	movs	r2, #15
 800084a:	400a      	ands	r2, r1
 800084c:	2a04      	cmp	r2, #4
 800084e:	d000      	beq.n	8000852 <__aeabi_ddiv+0x56a>
 8000850:	e74a      	b.n	80006e8 <__aeabi_ddiv+0x400>
 8000852:	e74f      	b.n	80006f4 <__aeabi_ddiv+0x40c>
 8000854:	0015      	movs	r5, r2
 8000856:	4286      	cmp	r6, r0
 8000858:	d000      	beq.n	800085c <__aeabi_ddiv+0x574>
 800085a:	e66d      	b.n	8000538 <__aeabi_ddiv+0x250>
 800085c:	9a00      	ldr	r2, [sp, #0]
 800085e:	429a      	cmp	r2, r3
 8000860:	d000      	beq.n	8000864 <__aeabi_ddiv+0x57c>
 8000862:	e669      	b.n	8000538 <__aeabi_ddiv+0x250>
 8000864:	e66a      	b.n	800053c <__aeabi_ddiv+0x254>
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <__aeabi_ddiv+0x5d8>)
 8000868:	445b      	add	r3, fp
 800086a:	2b00      	cmp	r3, #0
 800086c:	dc00      	bgt.n	8000870 <__aeabi_ddiv+0x588>
 800086e:	e713      	b.n	8000698 <__aeabi_ddiv+0x3b0>
 8000870:	2501      	movs	r5, #1
 8000872:	2100      	movs	r1, #0
 8000874:	44a8      	add	r8, r5
 8000876:	e66a      	b.n	800054e <__aeabi_ddiv+0x266>
 8000878:	075d      	lsls	r5, r3, #29
 800087a:	025b      	lsls	r3, r3, #9
 800087c:	0b1a      	lsrs	r2, r3, #12
 800087e:	08c9      	lsrs	r1, r1, #3
 8000880:	2300      	movs	r3, #0
 8000882:	430d      	orrs	r5, r1
 8000884:	e587      	b.n	8000396 <__aeabi_ddiv+0xae>
 8000886:	9900      	ldr	r1, [sp, #0]
 8000888:	3d02      	subs	r5, #2
 800088a:	004a      	lsls	r2, r1, #1
 800088c:	428a      	cmp	r2, r1
 800088e:	41bf      	sbcs	r7, r7
 8000890:	427f      	negs	r7, r7
 8000892:	193f      	adds	r7, r7, r4
 8000894:	19f6      	adds	r6, r6, r7
 8000896:	9200      	str	r2, [sp, #0]
 8000898:	e7dd      	b.n	8000856 <__aeabi_ddiv+0x56e>
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	4643      	mov	r3, r8
 800089e:	0312      	lsls	r2, r2, #12
 80008a0:	431a      	orrs	r2, r3
 80008a2:	0312      	lsls	r2, r2, #12
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <__aeabi_ddiv+0x5cc>)
 80008a6:	0b12      	lsrs	r2, r2, #12
 80008a8:	e575      	b.n	8000396 <__aeabi_ddiv+0xae>
 80008aa:	9900      	ldr	r1, [sp, #0]
 80008ac:	4299      	cmp	r1, r3
 80008ae:	d3ea      	bcc.n	8000886 <__aeabi_ddiv+0x59e>
 80008b0:	0015      	movs	r5, r2
 80008b2:	e7d3      	b.n	800085c <__aeabi_ddiv+0x574>
 80008b4:	000007ff 	.word	0x000007ff
 80008b8:	0000043e 	.word	0x0000043e
 80008bc:	0000041e 	.word	0x0000041e
 80008c0:	000003ff 	.word	0x000003ff

080008c4 <__eqdf2>:
 80008c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c6:	464e      	mov	r6, r9
 80008c8:	4645      	mov	r5, r8
 80008ca:	46de      	mov	lr, fp
 80008cc:	4657      	mov	r7, sl
 80008ce:	4690      	mov	r8, r2
 80008d0:	b5e0      	push	{r5, r6, r7, lr}
 80008d2:	0017      	movs	r7, r2
 80008d4:	031a      	lsls	r2, r3, #12
 80008d6:	0b12      	lsrs	r2, r2, #12
 80008d8:	0005      	movs	r5, r0
 80008da:	4684      	mov	ip, r0
 80008dc:	4819      	ldr	r0, [pc, #100]	; (8000944 <__eqdf2+0x80>)
 80008de:	030e      	lsls	r6, r1, #12
 80008e0:	004c      	lsls	r4, r1, #1
 80008e2:	4691      	mov	r9, r2
 80008e4:	005a      	lsls	r2, r3, #1
 80008e6:	0fdb      	lsrs	r3, r3, #31
 80008e8:	469b      	mov	fp, r3
 80008ea:	0b36      	lsrs	r6, r6, #12
 80008ec:	0d64      	lsrs	r4, r4, #21
 80008ee:	0fc9      	lsrs	r1, r1, #31
 80008f0:	0d52      	lsrs	r2, r2, #21
 80008f2:	4284      	cmp	r4, r0
 80008f4:	d019      	beq.n	800092a <__eqdf2+0x66>
 80008f6:	4282      	cmp	r2, r0
 80008f8:	d010      	beq.n	800091c <__eqdf2+0x58>
 80008fa:	2001      	movs	r0, #1
 80008fc:	4294      	cmp	r4, r2
 80008fe:	d10e      	bne.n	800091e <__eqdf2+0x5a>
 8000900:	454e      	cmp	r6, r9
 8000902:	d10c      	bne.n	800091e <__eqdf2+0x5a>
 8000904:	2001      	movs	r0, #1
 8000906:	45c4      	cmp	ip, r8
 8000908:	d109      	bne.n	800091e <__eqdf2+0x5a>
 800090a:	4559      	cmp	r1, fp
 800090c:	d017      	beq.n	800093e <__eqdf2+0x7a>
 800090e:	2c00      	cmp	r4, #0
 8000910:	d105      	bne.n	800091e <__eqdf2+0x5a>
 8000912:	0030      	movs	r0, r6
 8000914:	4328      	orrs	r0, r5
 8000916:	1e43      	subs	r3, r0, #1
 8000918:	4198      	sbcs	r0, r3
 800091a:	e000      	b.n	800091e <__eqdf2+0x5a>
 800091c:	2001      	movs	r0, #1
 800091e:	bcf0      	pop	{r4, r5, r6, r7}
 8000920:	46bb      	mov	fp, r7
 8000922:	46b2      	mov	sl, r6
 8000924:	46a9      	mov	r9, r5
 8000926:	46a0      	mov	r8, r4
 8000928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800092a:	0033      	movs	r3, r6
 800092c:	2001      	movs	r0, #1
 800092e:	432b      	orrs	r3, r5
 8000930:	d1f5      	bne.n	800091e <__eqdf2+0x5a>
 8000932:	42a2      	cmp	r2, r4
 8000934:	d1f3      	bne.n	800091e <__eqdf2+0x5a>
 8000936:	464b      	mov	r3, r9
 8000938:	433b      	orrs	r3, r7
 800093a:	d1f0      	bne.n	800091e <__eqdf2+0x5a>
 800093c:	e7e2      	b.n	8000904 <__eqdf2+0x40>
 800093e:	2000      	movs	r0, #0
 8000940:	e7ed      	b.n	800091e <__eqdf2+0x5a>
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	000007ff 	.word	0x000007ff

08000948 <__gedf2>:
 8000948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094a:	4647      	mov	r7, r8
 800094c:	46ce      	mov	lr, r9
 800094e:	0004      	movs	r4, r0
 8000950:	0018      	movs	r0, r3
 8000952:	0016      	movs	r6, r2
 8000954:	031b      	lsls	r3, r3, #12
 8000956:	0b1b      	lsrs	r3, r3, #12
 8000958:	4d2d      	ldr	r5, [pc, #180]	; (8000a10 <__gedf2+0xc8>)
 800095a:	004a      	lsls	r2, r1, #1
 800095c:	4699      	mov	r9, r3
 800095e:	b580      	push	{r7, lr}
 8000960:	0043      	lsls	r3, r0, #1
 8000962:	030f      	lsls	r7, r1, #12
 8000964:	46a4      	mov	ip, r4
 8000966:	46b0      	mov	r8, r6
 8000968:	0b3f      	lsrs	r7, r7, #12
 800096a:	0d52      	lsrs	r2, r2, #21
 800096c:	0fc9      	lsrs	r1, r1, #31
 800096e:	0d5b      	lsrs	r3, r3, #21
 8000970:	0fc0      	lsrs	r0, r0, #31
 8000972:	42aa      	cmp	r2, r5
 8000974:	d021      	beq.n	80009ba <__gedf2+0x72>
 8000976:	42ab      	cmp	r3, r5
 8000978:	d013      	beq.n	80009a2 <__gedf2+0x5a>
 800097a:	2a00      	cmp	r2, #0
 800097c:	d122      	bne.n	80009c4 <__gedf2+0x7c>
 800097e:	433c      	orrs	r4, r7
 8000980:	2b00      	cmp	r3, #0
 8000982:	d102      	bne.n	800098a <__gedf2+0x42>
 8000984:	464d      	mov	r5, r9
 8000986:	432e      	orrs	r6, r5
 8000988:	d022      	beq.n	80009d0 <__gedf2+0x88>
 800098a:	2c00      	cmp	r4, #0
 800098c:	d010      	beq.n	80009b0 <__gedf2+0x68>
 800098e:	4281      	cmp	r1, r0
 8000990:	d022      	beq.n	80009d8 <__gedf2+0x90>
 8000992:	2002      	movs	r0, #2
 8000994:	3901      	subs	r1, #1
 8000996:	4008      	ands	r0, r1
 8000998:	3801      	subs	r0, #1
 800099a:	bcc0      	pop	{r6, r7}
 800099c:	46b9      	mov	r9, r7
 800099e:	46b0      	mov	r8, r6
 80009a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a2:	464d      	mov	r5, r9
 80009a4:	432e      	orrs	r6, r5
 80009a6:	d129      	bne.n	80009fc <__gedf2+0xb4>
 80009a8:	2a00      	cmp	r2, #0
 80009aa:	d1f0      	bne.n	800098e <__gedf2+0x46>
 80009ac:	433c      	orrs	r4, r7
 80009ae:	d1ee      	bne.n	800098e <__gedf2+0x46>
 80009b0:	2800      	cmp	r0, #0
 80009b2:	d1f2      	bne.n	800099a <__gedf2+0x52>
 80009b4:	2001      	movs	r0, #1
 80009b6:	4240      	negs	r0, r0
 80009b8:	e7ef      	b.n	800099a <__gedf2+0x52>
 80009ba:	003d      	movs	r5, r7
 80009bc:	4325      	orrs	r5, r4
 80009be:	d11d      	bne.n	80009fc <__gedf2+0xb4>
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d0ee      	beq.n	80009a2 <__gedf2+0x5a>
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1e2      	bne.n	800098e <__gedf2+0x46>
 80009c8:	464c      	mov	r4, r9
 80009ca:	4326      	orrs	r6, r4
 80009cc:	d1df      	bne.n	800098e <__gedf2+0x46>
 80009ce:	e7e0      	b.n	8000992 <__gedf2+0x4a>
 80009d0:	2000      	movs	r0, #0
 80009d2:	2c00      	cmp	r4, #0
 80009d4:	d0e1      	beq.n	800099a <__gedf2+0x52>
 80009d6:	e7dc      	b.n	8000992 <__gedf2+0x4a>
 80009d8:	429a      	cmp	r2, r3
 80009da:	dc0a      	bgt.n	80009f2 <__gedf2+0xaa>
 80009dc:	dbe8      	blt.n	80009b0 <__gedf2+0x68>
 80009de:	454f      	cmp	r7, r9
 80009e0:	d8d7      	bhi.n	8000992 <__gedf2+0x4a>
 80009e2:	d00e      	beq.n	8000a02 <__gedf2+0xba>
 80009e4:	2000      	movs	r0, #0
 80009e6:	454f      	cmp	r7, r9
 80009e8:	d2d7      	bcs.n	800099a <__gedf2+0x52>
 80009ea:	2900      	cmp	r1, #0
 80009ec:	d0e2      	beq.n	80009b4 <__gedf2+0x6c>
 80009ee:	0008      	movs	r0, r1
 80009f0:	e7d3      	b.n	800099a <__gedf2+0x52>
 80009f2:	4243      	negs	r3, r0
 80009f4:	4158      	adcs	r0, r3
 80009f6:	0040      	lsls	r0, r0, #1
 80009f8:	3801      	subs	r0, #1
 80009fa:	e7ce      	b.n	800099a <__gedf2+0x52>
 80009fc:	2002      	movs	r0, #2
 80009fe:	4240      	negs	r0, r0
 8000a00:	e7cb      	b.n	800099a <__gedf2+0x52>
 8000a02:	45c4      	cmp	ip, r8
 8000a04:	d8c5      	bhi.n	8000992 <__gedf2+0x4a>
 8000a06:	2000      	movs	r0, #0
 8000a08:	45c4      	cmp	ip, r8
 8000a0a:	d2c6      	bcs.n	800099a <__gedf2+0x52>
 8000a0c:	e7ed      	b.n	80009ea <__gedf2+0xa2>
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	000007ff 	.word	0x000007ff

08000a14 <__ledf2>:
 8000a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a16:	4647      	mov	r7, r8
 8000a18:	46ce      	mov	lr, r9
 8000a1a:	0004      	movs	r4, r0
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	0016      	movs	r6, r2
 8000a20:	031b      	lsls	r3, r3, #12
 8000a22:	0b1b      	lsrs	r3, r3, #12
 8000a24:	4d2c      	ldr	r5, [pc, #176]	; (8000ad8 <__ledf2+0xc4>)
 8000a26:	004a      	lsls	r2, r1, #1
 8000a28:	4699      	mov	r9, r3
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	0043      	lsls	r3, r0, #1
 8000a2e:	030f      	lsls	r7, r1, #12
 8000a30:	46a4      	mov	ip, r4
 8000a32:	46b0      	mov	r8, r6
 8000a34:	0b3f      	lsrs	r7, r7, #12
 8000a36:	0d52      	lsrs	r2, r2, #21
 8000a38:	0fc9      	lsrs	r1, r1, #31
 8000a3a:	0d5b      	lsrs	r3, r3, #21
 8000a3c:	0fc0      	lsrs	r0, r0, #31
 8000a3e:	42aa      	cmp	r2, r5
 8000a40:	d00d      	beq.n	8000a5e <__ledf2+0x4a>
 8000a42:	42ab      	cmp	r3, r5
 8000a44:	d010      	beq.n	8000a68 <__ledf2+0x54>
 8000a46:	2a00      	cmp	r2, #0
 8000a48:	d127      	bne.n	8000a9a <__ledf2+0x86>
 8000a4a:	433c      	orrs	r4, r7
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d111      	bne.n	8000a74 <__ledf2+0x60>
 8000a50:	464d      	mov	r5, r9
 8000a52:	432e      	orrs	r6, r5
 8000a54:	d10e      	bne.n	8000a74 <__ledf2+0x60>
 8000a56:	2000      	movs	r0, #0
 8000a58:	2c00      	cmp	r4, #0
 8000a5a:	d015      	beq.n	8000a88 <__ledf2+0x74>
 8000a5c:	e00e      	b.n	8000a7c <__ledf2+0x68>
 8000a5e:	003d      	movs	r5, r7
 8000a60:	4325      	orrs	r5, r4
 8000a62:	d110      	bne.n	8000a86 <__ledf2+0x72>
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d118      	bne.n	8000a9a <__ledf2+0x86>
 8000a68:	464d      	mov	r5, r9
 8000a6a:	432e      	orrs	r6, r5
 8000a6c:	d10b      	bne.n	8000a86 <__ledf2+0x72>
 8000a6e:	2a00      	cmp	r2, #0
 8000a70:	d102      	bne.n	8000a78 <__ledf2+0x64>
 8000a72:	433c      	orrs	r4, r7
 8000a74:	2c00      	cmp	r4, #0
 8000a76:	d00b      	beq.n	8000a90 <__ledf2+0x7c>
 8000a78:	4281      	cmp	r1, r0
 8000a7a:	d014      	beq.n	8000aa6 <__ledf2+0x92>
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	3901      	subs	r1, #1
 8000a80:	4008      	ands	r0, r1
 8000a82:	3801      	subs	r0, #1
 8000a84:	e000      	b.n	8000a88 <__ledf2+0x74>
 8000a86:	2002      	movs	r0, #2
 8000a88:	bcc0      	pop	{r6, r7}
 8000a8a:	46b9      	mov	r9, r7
 8000a8c:	46b0      	mov	r8, r6
 8000a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a90:	2800      	cmp	r0, #0
 8000a92:	d1f9      	bne.n	8000a88 <__ledf2+0x74>
 8000a94:	2001      	movs	r0, #1
 8000a96:	4240      	negs	r0, r0
 8000a98:	e7f6      	b.n	8000a88 <__ledf2+0x74>
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d1ec      	bne.n	8000a78 <__ledf2+0x64>
 8000a9e:	464c      	mov	r4, r9
 8000aa0:	4326      	orrs	r6, r4
 8000aa2:	d1e9      	bne.n	8000a78 <__ledf2+0x64>
 8000aa4:	e7ea      	b.n	8000a7c <__ledf2+0x68>
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	dd04      	ble.n	8000ab4 <__ledf2+0xa0>
 8000aaa:	4243      	negs	r3, r0
 8000aac:	4158      	adcs	r0, r3
 8000aae:	0040      	lsls	r0, r0, #1
 8000ab0:	3801      	subs	r0, #1
 8000ab2:	e7e9      	b.n	8000a88 <__ledf2+0x74>
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	dbeb      	blt.n	8000a90 <__ledf2+0x7c>
 8000ab8:	454f      	cmp	r7, r9
 8000aba:	d8df      	bhi.n	8000a7c <__ledf2+0x68>
 8000abc:	d006      	beq.n	8000acc <__ledf2+0xb8>
 8000abe:	2000      	movs	r0, #0
 8000ac0:	454f      	cmp	r7, r9
 8000ac2:	d2e1      	bcs.n	8000a88 <__ledf2+0x74>
 8000ac4:	2900      	cmp	r1, #0
 8000ac6:	d0e5      	beq.n	8000a94 <__ledf2+0x80>
 8000ac8:	0008      	movs	r0, r1
 8000aca:	e7dd      	b.n	8000a88 <__ledf2+0x74>
 8000acc:	45c4      	cmp	ip, r8
 8000ace:	d8d5      	bhi.n	8000a7c <__ledf2+0x68>
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	45c4      	cmp	ip, r8
 8000ad4:	d2d8      	bcs.n	8000a88 <__ledf2+0x74>
 8000ad6:	e7f5      	b.n	8000ac4 <__ledf2+0xb0>
 8000ad8:	000007ff 	.word	0x000007ff

08000adc <__aeabi_dmul>:
 8000adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ade:	4645      	mov	r5, r8
 8000ae0:	46de      	mov	lr, fp
 8000ae2:	4657      	mov	r7, sl
 8000ae4:	464e      	mov	r6, r9
 8000ae6:	b5e0      	push	{r5, r6, r7, lr}
 8000ae8:	001f      	movs	r7, r3
 8000aea:	030b      	lsls	r3, r1, #12
 8000aec:	0b1b      	lsrs	r3, r3, #12
 8000aee:	469b      	mov	fp, r3
 8000af0:	004d      	lsls	r5, r1, #1
 8000af2:	0fcb      	lsrs	r3, r1, #31
 8000af4:	0004      	movs	r4, r0
 8000af6:	4691      	mov	r9, r2
 8000af8:	4698      	mov	r8, r3
 8000afa:	b087      	sub	sp, #28
 8000afc:	0d6d      	lsrs	r5, r5, #21
 8000afe:	d100      	bne.n	8000b02 <__aeabi_dmul+0x26>
 8000b00:	e1cd      	b.n	8000e9e <__aeabi_dmul+0x3c2>
 8000b02:	4bce      	ldr	r3, [pc, #824]	; (8000e3c <__aeabi_dmul+0x360>)
 8000b04:	429d      	cmp	r5, r3
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dmul+0x2e>
 8000b08:	e1e9      	b.n	8000ede <__aeabi_dmul+0x402>
 8000b0a:	465a      	mov	r2, fp
 8000b0c:	0f43      	lsrs	r3, r0, #29
 8000b0e:	00d2      	lsls	r2, r2, #3
 8000b10:	4313      	orrs	r3, r2
 8000b12:	2280      	movs	r2, #128	; 0x80
 8000b14:	0412      	lsls	r2, r2, #16
 8000b16:	431a      	orrs	r2, r3
 8000b18:	00c3      	lsls	r3, r0, #3
 8000b1a:	469a      	mov	sl, r3
 8000b1c:	4bc8      	ldr	r3, [pc, #800]	; (8000e40 <__aeabi_dmul+0x364>)
 8000b1e:	4693      	mov	fp, r2
 8000b20:	469c      	mov	ip, r3
 8000b22:	2300      	movs	r3, #0
 8000b24:	2600      	movs	r6, #0
 8000b26:	4465      	add	r5, ip
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	033c      	lsls	r4, r7, #12
 8000b2c:	007b      	lsls	r3, r7, #1
 8000b2e:	4648      	mov	r0, r9
 8000b30:	0b24      	lsrs	r4, r4, #12
 8000b32:	0d5b      	lsrs	r3, r3, #21
 8000b34:	0fff      	lsrs	r7, r7, #31
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d100      	bne.n	8000b3c <__aeabi_dmul+0x60>
 8000b3a:	e189      	b.n	8000e50 <__aeabi_dmul+0x374>
 8000b3c:	4abf      	ldr	r2, [pc, #764]	; (8000e3c <__aeabi_dmul+0x360>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d019      	beq.n	8000b76 <__aeabi_dmul+0x9a>
 8000b42:	0f42      	lsrs	r2, r0, #29
 8000b44:	00e4      	lsls	r4, r4, #3
 8000b46:	4322      	orrs	r2, r4
 8000b48:	2480      	movs	r4, #128	; 0x80
 8000b4a:	0424      	lsls	r4, r4, #16
 8000b4c:	4314      	orrs	r4, r2
 8000b4e:	4abc      	ldr	r2, [pc, #752]	; (8000e40 <__aeabi_dmul+0x364>)
 8000b50:	2100      	movs	r1, #0
 8000b52:	4694      	mov	ip, r2
 8000b54:	4642      	mov	r2, r8
 8000b56:	4463      	add	r3, ip
 8000b58:	195b      	adds	r3, r3, r5
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	9b01      	ldr	r3, [sp, #4]
 8000b5e:	407a      	eors	r2, r7
 8000b60:	3301      	adds	r3, #1
 8000b62:	00c0      	lsls	r0, r0, #3
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	9302      	str	r3, [sp, #8]
 8000b68:	2e0a      	cmp	r6, #10
 8000b6a:	dd1c      	ble.n	8000ba6 <__aeabi_dmul+0xca>
 8000b6c:	003a      	movs	r2, r7
 8000b6e:	2e0b      	cmp	r6, #11
 8000b70:	d05e      	beq.n	8000c30 <__aeabi_dmul+0x154>
 8000b72:	4647      	mov	r7, r8
 8000b74:	e056      	b.n	8000c24 <__aeabi_dmul+0x148>
 8000b76:	4649      	mov	r1, r9
 8000b78:	4bb0      	ldr	r3, [pc, #704]	; (8000e3c <__aeabi_dmul+0x360>)
 8000b7a:	4321      	orrs	r1, r4
 8000b7c:	18eb      	adds	r3, r5, r3
 8000b7e:	9301      	str	r3, [sp, #4]
 8000b80:	2900      	cmp	r1, #0
 8000b82:	d12a      	bne.n	8000bda <__aeabi_dmul+0xfe>
 8000b84:	2080      	movs	r0, #128	; 0x80
 8000b86:	2202      	movs	r2, #2
 8000b88:	0100      	lsls	r0, r0, #4
 8000b8a:	002b      	movs	r3, r5
 8000b8c:	4684      	mov	ip, r0
 8000b8e:	4316      	orrs	r6, r2
 8000b90:	4642      	mov	r2, r8
 8000b92:	4463      	add	r3, ip
 8000b94:	407a      	eors	r2, r7
 8000b96:	b2d2      	uxtb	r2, r2
 8000b98:	9302      	str	r3, [sp, #8]
 8000b9a:	2e0a      	cmp	r6, #10
 8000b9c:	dd00      	ble.n	8000ba0 <__aeabi_dmul+0xc4>
 8000b9e:	e231      	b.n	8001004 <__aeabi_dmul+0x528>
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	2400      	movs	r4, #0
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	2e02      	cmp	r6, #2
 8000ba8:	dc26      	bgt.n	8000bf8 <__aeabi_dmul+0x11c>
 8000baa:	3e01      	subs	r6, #1
 8000bac:	2e01      	cmp	r6, #1
 8000bae:	d852      	bhi.n	8000c56 <__aeabi_dmul+0x17a>
 8000bb0:	2902      	cmp	r1, #2
 8000bb2:	d04c      	beq.n	8000c4e <__aeabi_dmul+0x172>
 8000bb4:	2901      	cmp	r1, #1
 8000bb6:	d000      	beq.n	8000bba <__aeabi_dmul+0xde>
 8000bb8:	e118      	b.n	8000dec <__aeabi_dmul+0x310>
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2400      	movs	r4, #0
 8000bbe:	2500      	movs	r5, #0
 8000bc0:	051b      	lsls	r3, r3, #20
 8000bc2:	4323      	orrs	r3, r4
 8000bc4:	07d2      	lsls	r2, r2, #31
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	0028      	movs	r0, r5
 8000bca:	0019      	movs	r1, r3
 8000bcc:	b007      	add	sp, #28
 8000bce:	bcf0      	pop	{r4, r5, r6, r7}
 8000bd0:	46bb      	mov	fp, r7
 8000bd2:	46b2      	mov	sl, r6
 8000bd4:	46a9      	mov	r9, r5
 8000bd6:	46a0      	mov	r8, r4
 8000bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bda:	2180      	movs	r1, #128	; 0x80
 8000bdc:	2203      	movs	r2, #3
 8000bde:	0109      	lsls	r1, r1, #4
 8000be0:	002b      	movs	r3, r5
 8000be2:	468c      	mov	ip, r1
 8000be4:	4316      	orrs	r6, r2
 8000be6:	4642      	mov	r2, r8
 8000be8:	4463      	add	r3, ip
 8000bea:	407a      	eors	r2, r7
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	9302      	str	r3, [sp, #8]
 8000bf0:	2e0a      	cmp	r6, #10
 8000bf2:	dd00      	ble.n	8000bf6 <__aeabi_dmul+0x11a>
 8000bf4:	e228      	b.n	8001048 <__aeabi_dmul+0x56c>
 8000bf6:	2103      	movs	r1, #3
 8000bf8:	2501      	movs	r5, #1
 8000bfa:	40b5      	lsls	r5, r6
 8000bfc:	46ac      	mov	ip, r5
 8000bfe:	26a6      	movs	r6, #166	; 0xa6
 8000c00:	4663      	mov	r3, ip
 8000c02:	00f6      	lsls	r6, r6, #3
 8000c04:	4035      	ands	r5, r6
 8000c06:	4233      	tst	r3, r6
 8000c08:	d10b      	bne.n	8000c22 <__aeabi_dmul+0x146>
 8000c0a:	2690      	movs	r6, #144	; 0x90
 8000c0c:	00b6      	lsls	r6, r6, #2
 8000c0e:	4233      	tst	r3, r6
 8000c10:	d118      	bne.n	8000c44 <__aeabi_dmul+0x168>
 8000c12:	3eb9      	subs	r6, #185	; 0xb9
 8000c14:	3eff      	subs	r6, #255	; 0xff
 8000c16:	421e      	tst	r6, r3
 8000c18:	d01d      	beq.n	8000c56 <__aeabi_dmul+0x17a>
 8000c1a:	46a3      	mov	fp, r4
 8000c1c:	4682      	mov	sl, r0
 8000c1e:	9100      	str	r1, [sp, #0]
 8000c20:	e000      	b.n	8000c24 <__aeabi_dmul+0x148>
 8000c22:	0017      	movs	r7, r2
 8000c24:	9900      	ldr	r1, [sp, #0]
 8000c26:	003a      	movs	r2, r7
 8000c28:	2902      	cmp	r1, #2
 8000c2a:	d010      	beq.n	8000c4e <__aeabi_dmul+0x172>
 8000c2c:	465c      	mov	r4, fp
 8000c2e:	4650      	mov	r0, sl
 8000c30:	2903      	cmp	r1, #3
 8000c32:	d1bf      	bne.n	8000bb4 <__aeabi_dmul+0xd8>
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	031b      	lsls	r3, r3, #12
 8000c38:	431c      	orrs	r4, r3
 8000c3a:	0324      	lsls	r4, r4, #12
 8000c3c:	0005      	movs	r5, r0
 8000c3e:	4b7f      	ldr	r3, [pc, #508]	; (8000e3c <__aeabi_dmul+0x360>)
 8000c40:	0b24      	lsrs	r4, r4, #12
 8000c42:	e7bd      	b.n	8000bc0 <__aeabi_dmul+0xe4>
 8000c44:	2480      	movs	r4, #128	; 0x80
 8000c46:	2200      	movs	r2, #0
 8000c48:	4b7c      	ldr	r3, [pc, #496]	; (8000e3c <__aeabi_dmul+0x360>)
 8000c4a:	0324      	lsls	r4, r4, #12
 8000c4c:	e7b8      	b.n	8000bc0 <__aeabi_dmul+0xe4>
 8000c4e:	2400      	movs	r4, #0
 8000c50:	2500      	movs	r5, #0
 8000c52:	4b7a      	ldr	r3, [pc, #488]	; (8000e3c <__aeabi_dmul+0x360>)
 8000c54:	e7b4      	b.n	8000bc0 <__aeabi_dmul+0xe4>
 8000c56:	4653      	mov	r3, sl
 8000c58:	041e      	lsls	r6, r3, #16
 8000c5a:	0c36      	lsrs	r6, r6, #16
 8000c5c:	0c1f      	lsrs	r7, r3, #16
 8000c5e:	0033      	movs	r3, r6
 8000c60:	0c01      	lsrs	r1, r0, #16
 8000c62:	0400      	lsls	r0, r0, #16
 8000c64:	0c00      	lsrs	r0, r0, #16
 8000c66:	4343      	muls	r3, r0
 8000c68:	4698      	mov	r8, r3
 8000c6a:	0003      	movs	r3, r0
 8000c6c:	437b      	muls	r3, r7
 8000c6e:	4699      	mov	r9, r3
 8000c70:	0033      	movs	r3, r6
 8000c72:	434b      	muls	r3, r1
 8000c74:	469c      	mov	ip, r3
 8000c76:	4643      	mov	r3, r8
 8000c78:	000d      	movs	r5, r1
 8000c7a:	0c1b      	lsrs	r3, r3, #16
 8000c7c:	469a      	mov	sl, r3
 8000c7e:	437d      	muls	r5, r7
 8000c80:	44cc      	add	ip, r9
 8000c82:	44d4      	add	ip, sl
 8000c84:	9500      	str	r5, [sp, #0]
 8000c86:	45e1      	cmp	r9, ip
 8000c88:	d904      	bls.n	8000c94 <__aeabi_dmul+0x1b8>
 8000c8a:	2380      	movs	r3, #128	; 0x80
 8000c8c:	025b      	lsls	r3, r3, #9
 8000c8e:	4699      	mov	r9, r3
 8000c90:	444d      	add	r5, r9
 8000c92:	9500      	str	r5, [sp, #0]
 8000c94:	4663      	mov	r3, ip
 8000c96:	0c1b      	lsrs	r3, r3, #16
 8000c98:	001d      	movs	r5, r3
 8000c9a:	4663      	mov	r3, ip
 8000c9c:	041b      	lsls	r3, r3, #16
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	4643      	mov	r3, r8
 8000ca2:	041b      	lsls	r3, r3, #16
 8000ca4:	0c1b      	lsrs	r3, r3, #16
 8000ca6:	4698      	mov	r8, r3
 8000ca8:	4663      	mov	r3, ip
 8000caa:	4443      	add	r3, r8
 8000cac:	9303      	str	r3, [sp, #12]
 8000cae:	0c23      	lsrs	r3, r4, #16
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	0033      	movs	r3, r6
 8000cb4:	0424      	lsls	r4, r4, #16
 8000cb6:	0c24      	lsrs	r4, r4, #16
 8000cb8:	4363      	muls	r3, r4
 8000cba:	469c      	mov	ip, r3
 8000cbc:	0023      	movs	r3, r4
 8000cbe:	437b      	muls	r3, r7
 8000cc0:	4699      	mov	r9, r3
 8000cc2:	4643      	mov	r3, r8
 8000cc4:	435e      	muls	r6, r3
 8000cc6:	435f      	muls	r7, r3
 8000cc8:	444e      	add	r6, r9
 8000cca:	4663      	mov	r3, ip
 8000ccc:	46b2      	mov	sl, r6
 8000cce:	0c1e      	lsrs	r6, r3, #16
 8000cd0:	4456      	add	r6, sl
 8000cd2:	45b1      	cmp	r9, r6
 8000cd4:	d903      	bls.n	8000cde <__aeabi_dmul+0x202>
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	025b      	lsls	r3, r3, #9
 8000cda:	4699      	mov	r9, r3
 8000cdc:	444f      	add	r7, r9
 8000cde:	0c33      	lsrs	r3, r6, #16
 8000ce0:	4699      	mov	r9, r3
 8000ce2:	003b      	movs	r3, r7
 8000ce4:	444b      	add	r3, r9
 8000ce6:	9305      	str	r3, [sp, #20]
 8000ce8:	4663      	mov	r3, ip
 8000cea:	46ac      	mov	ip, r5
 8000cec:	041f      	lsls	r7, r3, #16
 8000cee:	0c3f      	lsrs	r7, r7, #16
 8000cf0:	0436      	lsls	r6, r6, #16
 8000cf2:	19f6      	adds	r6, r6, r7
 8000cf4:	44b4      	add	ip, r6
 8000cf6:	4663      	mov	r3, ip
 8000cf8:	9304      	str	r3, [sp, #16]
 8000cfa:	465b      	mov	r3, fp
 8000cfc:	0c1b      	lsrs	r3, r3, #16
 8000cfe:	469c      	mov	ip, r3
 8000d00:	465b      	mov	r3, fp
 8000d02:	041f      	lsls	r7, r3, #16
 8000d04:	0c3f      	lsrs	r7, r7, #16
 8000d06:	003b      	movs	r3, r7
 8000d08:	4343      	muls	r3, r0
 8000d0a:	4699      	mov	r9, r3
 8000d0c:	4663      	mov	r3, ip
 8000d0e:	4343      	muls	r3, r0
 8000d10:	469a      	mov	sl, r3
 8000d12:	464b      	mov	r3, r9
 8000d14:	4660      	mov	r0, ip
 8000d16:	0c1b      	lsrs	r3, r3, #16
 8000d18:	469b      	mov	fp, r3
 8000d1a:	4348      	muls	r0, r1
 8000d1c:	4379      	muls	r1, r7
 8000d1e:	4451      	add	r1, sl
 8000d20:	4459      	add	r1, fp
 8000d22:	458a      	cmp	sl, r1
 8000d24:	d903      	bls.n	8000d2e <__aeabi_dmul+0x252>
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	025b      	lsls	r3, r3, #9
 8000d2a:	469a      	mov	sl, r3
 8000d2c:	4450      	add	r0, sl
 8000d2e:	0c0b      	lsrs	r3, r1, #16
 8000d30:	469a      	mov	sl, r3
 8000d32:	464b      	mov	r3, r9
 8000d34:	041b      	lsls	r3, r3, #16
 8000d36:	0c1b      	lsrs	r3, r3, #16
 8000d38:	4699      	mov	r9, r3
 8000d3a:	003b      	movs	r3, r7
 8000d3c:	4363      	muls	r3, r4
 8000d3e:	0409      	lsls	r1, r1, #16
 8000d40:	4645      	mov	r5, r8
 8000d42:	4449      	add	r1, r9
 8000d44:	4699      	mov	r9, r3
 8000d46:	4663      	mov	r3, ip
 8000d48:	435c      	muls	r4, r3
 8000d4a:	436b      	muls	r3, r5
 8000d4c:	469c      	mov	ip, r3
 8000d4e:	464b      	mov	r3, r9
 8000d50:	0c1b      	lsrs	r3, r3, #16
 8000d52:	4698      	mov	r8, r3
 8000d54:	436f      	muls	r7, r5
 8000d56:	193f      	adds	r7, r7, r4
 8000d58:	4447      	add	r7, r8
 8000d5a:	4450      	add	r0, sl
 8000d5c:	42bc      	cmp	r4, r7
 8000d5e:	d903      	bls.n	8000d68 <__aeabi_dmul+0x28c>
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	025b      	lsls	r3, r3, #9
 8000d64:	4698      	mov	r8, r3
 8000d66:	44c4      	add	ip, r8
 8000d68:	9b04      	ldr	r3, [sp, #16]
 8000d6a:	9d00      	ldr	r5, [sp, #0]
 8000d6c:	4698      	mov	r8, r3
 8000d6e:	4445      	add	r5, r8
 8000d70:	42b5      	cmp	r5, r6
 8000d72:	41b6      	sbcs	r6, r6
 8000d74:	4273      	negs	r3, r6
 8000d76:	4698      	mov	r8, r3
 8000d78:	464b      	mov	r3, r9
 8000d7a:	041e      	lsls	r6, r3, #16
 8000d7c:	9b05      	ldr	r3, [sp, #20]
 8000d7e:	043c      	lsls	r4, r7, #16
 8000d80:	4699      	mov	r9, r3
 8000d82:	0c36      	lsrs	r6, r6, #16
 8000d84:	19a4      	adds	r4, r4, r6
 8000d86:	444c      	add	r4, r9
 8000d88:	46a1      	mov	r9, r4
 8000d8a:	4683      	mov	fp, r0
 8000d8c:	186e      	adds	r6, r5, r1
 8000d8e:	44c1      	add	r9, r8
 8000d90:	428e      	cmp	r6, r1
 8000d92:	4189      	sbcs	r1, r1
 8000d94:	44cb      	add	fp, r9
 8000d96:	465d      	mov	r5, fp
 8000d98:	4249      	negs	r1, r1
 8000d9a:	186d      	adds	r5, r5, r1
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	41a4      	sbcs	r4, r4
 8000da0:	45c1      	cmp	r9, r8
 8000da2:	419b      	sbcs	r3, r3
 8000da4:	4583      	cmp	fp, r0
 8000da6:	4180      	sbcs	r0, r0
 8000da8:	428d      	cmp	r5, r1
 8000daa:	4189      	sbcs	r1, r1
 8000dac:	425b      	negs	r3, r3
 8000dae:	4264      	negs	r4, r4
 8000db0:	431c      	orrs	r4, r3
 8000db2:	4240      	negs	r0, r0
 8000db4:	9b03      	ldr	r3, [sp, #12]
 8000db6:	4249      	negs	r1, r1
 8000db8:	4301      	orrs	r1, r0
 8000dba:	0270      	lsls	r0, r6, #9
 8000dbc:	0c3f      	lsrs	r7, r7, #16
 8000dbe:	4318      	orrs	r0, r3
 8000dc0:	19e4      	adds	r4, r4, r7
 8000dc2:	1e47      	subs	r7, r0, #1
 8000dc4:	41b8      	sbcs	r0, r7
 8000dc6:	1864      	adds	r4, r4, r1
 8000dc8:	4464      	add	r4, ip
 8000dca:	0df6      	lsrs	r6, r6, #23
 8000dcc:	0261      	lsls	r1, r4, #9
 8000dce:	4330      	orrs	r0, r6
 8000dd0:	0dec      	lsrs	r4, r5, #23
 8000dd2:	026e      	lsls	r6, r5, #9
 8000dd4:	430c      	orrs	r4, r1
 8000dd6:	4330      	orrs	r0, r6
 8000dd8:	01c9      	lsls	r1, r1, #7
 8000dda:	d400      	bmi.n	8000dde <__aeabi_dmul+0x302>
 8000ddc:	e0f1      	b.n	8000fc2 <__aeabi_dmul+0x4e6>
 8000dde:	2101      	movs	r1, #1
 8000de0:	0843      	lsrs	r3, r0, #1
 8000de2:	4001      	ands	r1, r0
 8000de4:	430b      	orrs	r3, r1
 8000de6:	07e0      	lsls	r0, r4, #31
 8000de8:	4318      	orrs	r0, r3
 8000dea:	0864      	lsrs	r4, r4, #1
 8000dec:	4915      	ldr	r1, [pc, #84]	; (8000e44 <__aeabi_dmul+0x368>)
 8000dee:	9b02      	ldr	r3, [sp, #8]
 8000df0:	468c      	mov	ip, r1
 8000df2:	4463      	add	r3, ip
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	dc00      	bgt.n	8000dfa <__aeabi_dmul+0x31e>
 8000df8:	e097      	b.n	8000f2a <__aeabi_dmul+0x44e>
 8000dfa:	0741      	lsls	r1, r0, #29
 8000dfc:	d009      	beq.n	8000e12 <__aeabi_dmul+0x336>
 8000dfe:	210f      	movs	r1, #15
 8000e00:	4001      	ands	r1, r0
 8000e02:	2904      	cmp	r1, #4
 8000e04:	d005      	beq.n	8000e12 <__aeabi_dmul+0x336>
 8000e06:	1d01      	adds	r1, r0, #4
 8000e08:	4281      	cmp	r1, r0
 8000e0a:	4180      	sbcs	r0, r0
 8000e0c:	4240      	negs	r0, r0
 8000e0e:	1824      	adds	r4, r4, r0
 8000e10:	0008      	movs	r0, r1
 8000e12:	01e1      	lsls	r1, r4, #7
 8000e14:	d506      	bpl.n	8000e24 <__aeabi_dmul+0x348>
 8000e16:	2180      	movs	r1, #128	; 0x80
 8000e18:	00c9      	lsls	r1, r1, #3
 8000e1a:	468c      	mov	ip, r1
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <__aeabi_dmul+0x36c>)
 8000e1e:	401c      	ands	r4, r3
 8000e20:	9b02      	ldr	r3, [sp, #8]
 8000e22:	4463      	add	r3, ip
 8000e24:	4909      	ldr	r1, [pc, #36]	; (8000e4c <__aeabi_dmul+0x370>)
 8000e26:	428b      	cmp	r3, r1
 8000e28:	dd00      	ble.n	8000e2c <__aeabi_dmul+0x350>
 8000e2a:	e710      	b.n	8000c4e <__aeabi_dmul+0x172>
 8000e2c:	0761      	lsls	r1, r4, #29
 8000e2e:	08c5      	lsrs	r5, r0, #3
 8000e30:	0264      	lsls	r4, r4, #9
 8000e32:	055b      	lsls	r3, r3, #21
 8000e34:	430d      	orrs	r5, r1
 8000e36:	0b24      	lsrs	r4, r4, #12
 8000e38:	0d5b      	lsrs	r3, r3, #21
 8000e3a:	e6c1      	b.n	8000bc0 <__aeabi_dmul+0xe4>
 8000e3c:	000007ff 	.word	0x000007ff
 8000e40:	fffffc01 	.word	0xfffffc01
 8000e44:	000003ff 	.word	0x000003ff
 8000e48:	feffffff 	.word	0xfeffffff
 8000e4c:	000007fe 	.word	0x000007fe
 8000e50:	464b      	mov	r3, r9
 8000e52:	4323      	orrs	r3, r4
 8000e54:	d059      	beq.n	8000f0a <__aeabi_dmul+0x42e>
 8000e56:	2c00      	cmp	r4, #0
 8000e58:	d100      	bne.n	8000e5c <__aeabi_dmul+0x380>
 8000e5a:	e0a3      	b.n	8000fa4 <__aeabi_dmul+0x4c8>
 8000e5c:	0020      	movs	r0, r4
 8000e5e:	f000 fcdd 	bl	800181c <__clzsi2>
 8000e62:	0001      	movs	r1, r0
 8000e64:	0003      	movs	r3, r0
 8000e66:	390b      	subs	r1, #11
 8000e68:	221d      	movs	r2, #29
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	0018      	movs	r0, r3
 8000e70:	40d1      	lsrs	r1, r2
 8000e72:	464a      	mov	r2, r9
 8000e74:	3808      	subs	r0, #8
 8000e76:	4082      	lsls	r2, r0
 8000e78:	4084      	lsls	r4, r0
 8000e7a:	0010      	movs	r0, r2
 8000e7c:	430c      	orrs	r4, r1
 8000e7e:	4a74      	ldr	r2, [pc, #464]	; (8001050 <__aeabi_dmul+0x574>)
 8000e80:	1aeb      	subs	r3, r5, r3
 8000e82:	4694      	mov	ip, r2
 8000e84:	4642      	mov	r2, r8
 8000e86:	4463      	add	r3, ip
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	9b01      	ldr	r3, [sp, #4]
 8000e8c:	407a      	eors	r2, r7
 8000e8e:	3301      	adds	r3, #1
 8000e90:	2100      	movs	r1, #0
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	9302      	str	r3, [sp, #8]
 8000e96:	2e0a      	cmp	r6, #10
 8000e98:	dd00      	ble.n	8000e9c <__aeabi_dmul+0x3c0>
 8000e9a:	e667      	b.n	8000b6c <__aeabi_dmul+0x90>
 8000e9c:	e683      	b.n	8000ba6 <__aeabi_dmul+0xca>
 8000e9e:	465b      	mov	r3, fp
 8000ea0:	4303      	orrs	r3, r0
 8000ea2:	469a      	mov	sl, r3
 8000ea4:	d02a      	beq.n	8000efc <__aeabi_dmul+0x420>
 8000ea6:	465b      	mov	r3, fp
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d06d      	beq.n	8000f88 <__aeabi_dmul+0x4ac>
 8000eac:	4658      	mov	r0, fp
 8000eae:	f000 fcb5 	bl	800181c <__clzsi2>
 8000eb2:	0001      	movs	r1, r0
 8000eb4:	0003      	movs	r3, r0
 8000eb6:	390b      	subs	r1, #11
 8000eb8:	221d      	movs	r2, #29
 8000eba:	1a52      	subs	r2, r2, r1
 8000ebc:	0021      	movs	r1, r4
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	465d      	mov	r5, fp
 8000ec2:	40d1      	lsrs	r1, r2
 8000ec4:	3808      	subs	r0, #8
 8000ec6:	4085      	lsls	r5, r0
 8000ec8:	000a      	movs	r2, r1
 8000eca:	4084      	lsls	r4, r0
 8000ecc:	432a      	orrs	r2, r5
 8000ece:	4693      	mov	fp, r2
 8000ed0:	46a2      	mov	sl, r4
 8000ed2:	4d5f      	ldr	r5, [pc, #380]	; (8001050 <__aeabi_dmul+0x574>)
 8000ed4:	2600      	movs	r6, #0
 8000ed6:	1aed      	subs	r5, r5, r3
 8000ed8:	2300      	movs	r3, #0
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	e625      	b.n	8000b2a <__aeabi_dmul+0x4e>
 8000ede:	465b      	mov	r3, fp
 8000ee0:	4303      	orrs	r3, r0
 8000ee2:	469a      	mov	sl, r3
 8000ee4:	d105      	bne.n	8000ef2 <__aeabi_dmul+0x416>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	469b      	mov	fp, r3
 8000eea:	3302      	adds	r3, #2
 8000eec:	2608      	movs	r6, #8
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	e61b      	b.n	8000b2a <__aeabi_dmul+0x4e>
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	4682      	mov	sl, r0
 8000ef6:	260c      	movs	r6, #12
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	e616      	b.n	8000b2a <__aeabi_dmul+0x4e>
 8000efc:	2300      	movs	r3, #0
 8000efe:	469b      	mov	fp, r3
 8000f00:	3301      	adds	r3, #1
 8000f02:	2604      	movs	r6, #4
 8000f04:	2500      	movs	r5, #0
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	e60f      	b.n	8000b2a <__aeabi_dmul+0x4e>
 8000f0a:	4642      	mov	r2, r8
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	9501      	str	r5, [sp, #4]
 8000f10:	431e      	orrs	r6, r3
 8000f12:	9b01      	ldr	r3, [sp, #4]
 8000f14:	407a      	eors	r2, r7
 8000f16:	3301      	adds	r3, #1
 8000f18:	2400      	movs	r4, #0
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	9302      	str	r3, [sp, #8]
 8000f22:	2e0a      	cmp	r6, #10
 8000f24:	dd00      	ble.n	8000f28 <__aeabi_dmul+0x44c>
 8000f26:	e621      	b.n	8000b6c <__aeabi_dmul+0x90>
 8000f28:	e63d      	b.n	8000ba6 <__aeabi_dmul+0xca>
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	1ac9      	subs	r1, r1, r3
 8000f2e:	2938      	cmp	r1, #56	; 0x38
 8000f30:	dd00      	ble.n	8000f34 <__aeabi_dmul+0x458>
 8000f32:	e642      	b.n	8000bba <__aeabi_dmul+0xde>
 8000f34:	291f      	cmp	r1, #31
 8000f36:	dd47      	ble.n	8000fc8 <__aeabi_dmul+0x4ec>
 8000f38:	261f      	movs	r6, #31
 8000f3a:	0025      	movs	r5, r4
 8000f3c:	4276      	negs	r6, r6
 8000f3e:	1af3      	subs	r3, r6, r3
 8000f40:	40dd      	lsrs	r5, r3
 8000f42:	002b      	movs	r3, r5
 8000f44:	2920      	cmp	r1, #32
 8000f46:	d005      	beq.n	8000f54 <__aeabi_dmul+0x478>
 8000f48:	4942      	ldr	r1, [pc, #264]	; (8001054 <__aeabi_dmul+0x578>)
 8000f4a:	9d02      	ldr	r5, [sp, #8]
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	4465      	add	r5, ip
 8000f50:	40ac      	lsls	r4, r5
 8000f52:	4320      	orrs	r0, r4
 8000f54:	1e41      	subs	r1, r0, #1
 8000f56:	4188      	sbcs	r0, r1
 8000f58:	4318      	orrs	r0, r3
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	001d      	movs	r5, r3
 8000f5e:	2400      	movs	r4, #0
 8000f60:	4005      	ands	r5, r0
 8000f62:	4203      	tst	r3, r0
 8000f64:	d04a      	beq.n	8000ffc <__aeabi_dmul+0x520>
 8000f66:	230f      	movs	r3, #15
 8000f68:	2400      	movs	r4, #0
 8000f6a:	4003      	ands	r3, r0
 8000f6c:	2b04      	cmp	r3, #4
 8000f6e:	d042      	beq.n	8000ff6 <__aeabi_dmul+0x51a>
 8000f70:	1d03      	adds	r3, r0, #4
 8000f72:	4283      	cmp	r3, r0
 8000f74:	4180      	sbcs	r0, r0
 8000f76:	4240      	negs	r0, r0
 8000f78:	1824      	adds	r4, r4, r0
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	0223      	lsls	r3, r4, #8
 8000f7e:	d53a      	bpl.n	8000ff6 <__aeabi_dmul+0x51a>
 8000f80:	2301      	movs	r3, #1
 8000f82:	2400      	movs	r4, #0
 8000f84:	2500      	movs	r5, #0
 8000f86:	e61b      	b.n	8000bc0 <__aeabi_dmul+0xe4>
 8000f88:	f000 fc48 	bl	800181c <__clzsi2>
 8000f8c:	0001      	movs	r1, r0
 8000f8e:	0003      	movs	r3, r0
 8000f90:	3115      	adds	r1, #21
 8000f92:	3320      	adds	r3, #32
 8000f94:	291c      	cmp	r1, #28
 8000f96:	dd8f      	ble.n	8000eb8 <__aeabi_dmul+0x3dc>
 8000f98:	3808      	subs	r0, #8
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4084      	lsls	r4, r0
 8000f9e:	4692      	mov	sl, r2
 8000fa0:	46a3      	mov	fp, r4
 8000fa2:	e796      	b.n	8000ed2 <__aeabi_dmul+0x3f6>
 8000fa4:	f000 fc3a 	bl	800181c <__clzsi2>
 8000fa8:	0001      	movs	r1, r0
 8000faa:	0003      	movs	r3, r0
 8000fac:	3115      	adds	r1, #21
 8000fae:	3320      	adds	r3, #32
 8000fb0:	291c      	cmp	r1, #28
 8000fb2:	dc00      	bgt.n	8000fb6 <__aeabi_dmul+0x4da>
 8000fb4:	e758      	b.n	8000e68 <__aeabi_dmul+0x38c>
 8000fb6:	0002      	movs	r2, r0
 8000fb8:	464c      	mov	r4, r9
 8000fba:	3a08      	subs	r2, #8
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	4094      	lsls	r4, r2
 8000fc0:	e75d      	b.n	8000e7e <__aeabi_dmul+0x3a2>
 8000fc2:	9b01      	ldr	r3, [sp, #4]
 8000fc4:	9302      	str	r3, [sp, #8]
 8000fc6:	e711      	b.n	8000dec <__aeabi_dmul+0x310>
 8000fc8:	4b23      	ldr	r3, [pc, #140]	; (8001058 <__aeabi_dmul+0x57c>)
 8000fca:	0026      	movs	r6, r4
 8000fcc:	469c      	mov	ip, r3
 8000fce:	0003      	movs	r3, r0
 8000fd0:	9d02      	ldr	r5, [sp, #8]
 8000fd2:	40cb      	lsrs	r3, r1
 8000fd4:	4465      	add	r5, ip
 8000fd6:	40ae      	lsls	r6, r5
 8000fd8:	431e      	orrs	r6, r3
 8000fda:	0003      	movs	r3, r0
 8000fdc:	40ab      	lsls	r3, r5
 8000fde:	1e58      	subs	r0, r3, #1
 8000fe0:	4183      	sbcs	r3, r0
 8000fe2:	0030      	movs	r0, r6
 8000fe4:	4318      	orrs	r0, r3
 8000fe6:	40cc      	lsrs	r4, r1
 8000fe8:	0743      	lsls	r3, r0, #29
 8000fea:	d0c7      	beq.n	8000f7c <__aeabi_dmul+0x4a0>
 8000fec:	230f      	movs	r3, #15
 8000fee:	4003      	ands	r3, r0
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d1bd      	bne.n	8000f70 <__aeabi_dmul+0x494>
 8000ff4:	e7c2      	b.n	8000f7c <__aeabi_dmul+0x4a0>
 8000ff6:	0765      	lsls	r5, r4, #29
 8000ff8:	0264      	lsls	r4, r4, #9
 8000ffa:	0b24      	lsrs	r4, r4, #12
 8000ffc:	08c0      	lsrs	r0, r0, #3
 8000ffe:	2300      	movs	r3, #0
 8001000:	4305      	orrs	r5, r0
 8001002:	e5dd      	b.n	8000bc0 <__aeabi_dmul+0xe4>
 8001004:	2500      	movs	r5, #0
 8001006:	2302      	movs	r3, #2
 8001008:	2e0f      	cmp	r6, #15
 800100a:	d10c      	bne.n	8001026 <__aeabi_dmul+0x54a>
 800100c:	2480      	movs	r4, #128	; 0x80
 800100e:	465b      	mov	r3, fp
 8001010:	0324      	lsls	r4, r4, #12
 8001012:	4223      	tst	r3, r4
 8001014:	d00e      	beq.n	8001034 <__aeabi_dmul+0x558>
 8001016:	4221      	tst	r1, r4
 8001018:	d10c      	bne.n	8001034 <__aeabi_dmul+0x558>
 800101a:	430c      	orrs	r4, r1
 800101c:	0324      	lsls	r4, r4, #12
 800101e:	003a      	movs	r2, r7
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <__aeabi_dmul+0x580>)
 8001022:	0b24      	lsrs	r4, r4, #12
 8001024:	e5cc      	b.n	8000bc0 <__aeabi_dmul+0xe4>
 8001026:	2e0b      	cmp	r6, #11
 8001028:	d000      	beq.n	800102c <__aeabi_dmul+0x550>
 800102a:	e5a2      	b.n	8000b72 <__aeabi_dmul+0x96>
 800102c:	468b      	mov	fp, r1
 800102e:	46aa      	mov	sl, r5
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	e5f7      	b.n	8000c24 <__aeabi_dmul+0x148>
 8001034:	2480      	movs	r4, #128	; 0x80
 8001036:	465b      	mov	r3, fp
 8001038:	0324      	lsls	r4, r4, #12
 800103a:	431c      	orrs	r4, r3
 800103c:	0324      	lsls	r4, r4, #12
 800103e:	4642      	mov	r2, r8
 8001040:	4655      	mov	r5, sl
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <__aeabi_dmul+0x580>)
 8001044:	0b24      	lsrs	r4, r4, #12
 8001046:	e5bb      	b.n	8000bc0 <__aeabi_dmul+0xe4>
 8001048:	464d      	mov	r5, r9
 800104a:	0021      	movs	r1, r4
 800104c:	2303      	movs	r3, #3
 800104e:	e7db      	b.n	8001008 <__aeabi_dmul+0x52c>
 8001050:	fffffc0d 	.word	0xfffffc0d
 8001054:	0000043e 	.word	0x0000043e
 8001058:	0000041e 	.word	0x0000041e
 800105c:	000007ff 	.word	0x000007ff

08001060 <__aeabi_dsub>:
 8001060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001062:	4657      	mov	r7, sl
 8001064:	464e      	mov	r6, r9
 8001066:	4645      	mov	r5, r8
 8001068:	46de      	mov	lr, fp
 800106a:	b5e0      	push	{r5, r6, r7, lr}
 800106c:	000d      	movs	r5, r1
 800106e:	0004      	movs	r4, r0
 8001070:	0019      	movs	r1, r3
 8001072:	0010      	movs	r0, r2
 8001074:	032b      	lsls	r3, r5, #12
 8001076:	0a5b      	lsrs	r3, r3, #9
 8001078:	0f62      	lsrs	r2, r4, #29
 800107a:	431a      	orrs	r2, r3
 800107c:	00e3      	lsls	r3, r4, #3
 800107e:	030c      	lsls	r4, r1, #12
 8001080:	0a64      	lsrs	r4, r4, #9
 8001082:	0f47      	lsrs	r7, r0, #29
 8001084:	4327      	orrs	r7, r4
 8001086:	4cd0      	ldr	r4, [pc, #832]	; (80013c8 <__aeabi_dsub+0x368>)
 8001088:	006e      	lsls	r6, r5, #1
 800108a:	4691      	mov	r9, r2
 800108c:	b083      	sub	sp, #12
 800108e:	004a      	lsls	r2, r1, #1
 8001090:	00c0      	lsls	r0, r0, #3
 8001092:	4698      	mov	r8, r3
 8001094:	46a2      	mov	sl, r4
 8001096:	0d76      	lsrs	r6, r6, #21
 8001098:	0fed      	lsrs	r5, r5, #31
 800109a:	0d52      	lsrs	r2, r2, #21
 800109c:	0fc9      	lsrs	r1, r1, #31
 800109e:	9001      	str	r0, [sp, #4]
 80010a0:	42a2      	cmp	r2, r4
 80010a2:	d100      	bne.n	80010a6 <__aeabi_dsub+0x46>
 80010a4:	e0b9      	b.n	800121a <__aeabi_dsub+0x1ba>
 80010a6:	2401      	movs	r4, #1
 80010a8:	4061      	eors	r1, r4
 80010aa:	468b      	mov	fp, r1
 80010ac:	428d      	cmp	r5, r1
 80010ae:	d100      	bne.n	80010b2 <__aeabi_dsub+0x52>
 80010b0:	e08d      	b.n	80011ce <__aeabi_dsub+0x16e>
 80010b2:	1ab4      	subs	r4, r6, r2
 80010b4:	46a4      	mov	ip, r4
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	dc00      	bgt.n	80010bc <__aeabi_dsub+0x5c>
 80010ba:	e0b7      	b.n	800122c <__aeabi_dsub+0x1cc>
 80010bc:	2a00      	cmp	r2, #0
 80010be:	d100      	bne.n	80010c2 <__aeabi_dsub+0x62>
 80010c0:	e0cb      	b.n	800125a <__aeabi_dsub+0x1fa>
 80010c2:	4ac1      	ldr	r2, [pc, #772]	; (80013c8 <__aeabi_dsub+0x368>)
 80010c4:	4296      	cmp	r6, r2
 80010c6:	d100      	bne.n	80010ca <__aeabi_dsub+0x6a>
 80010c8:	e186      	b.n	80013d8 <__aeabi_dsub+0x378>
 80010ca:	2280      	movs	r2, #128	; 0x80
 80010cc:	0412      	lsls	r2, r2, #16
 80010ce:	4317      	orrs	r7, r2
 80010d0:	4662      	mov	r2, ip
 80010d2:	2a38      	cmp	r2, #56	; 0x38
 80010d4:	dd00      	ble.n	80010d8 <__aeabi_dsub+0x78>
 80010d6:	e1a4      	b.n	8001422 <__aeabi_dsub+0x3c2>
 80010d8:	2a1f      	cmp	r2, #31
 80010da:	dd00      	ble.n	80010de <__aeabi_dsub+0x7e>
 80010dc:	e21d      	b.n	800151a <__aeabi_dsub+0x4ba>
 80010de:	4661      	mov	r1, ip
 80010e0:	2220      	movs	r2, #32
 80010e2:	003c      	movs	r4, r7
 80010e4:	1a52      	subs	r2, r2, r1
 80010e6:	0001      	movs	r1, r0
 80010e8:	4090      	lsls	r0, r2
 80010ea:	4094      	lsls	r4, r2
 80010ec:	1e42      	subs	r2, r0, #1
 80010ee:	4190      	sbcs	r0, r2
 80010f0:	4662      	mov	r2, ip
 80010f2:	46a0      	mov	r8, r4
 80010f4:	4664      	mov	r4, ip
 80010f6:	40d7      	lsrs	r7, r2
 80010f8:	464a      	mov	r2, r9
 80010fa:	40e1      	lsrs	r1, r4
 80010fc:	4644      	mov	r4, r8
 80010fe:	1bd2      	subs	r2, r2, r7
 8001100:	4691      	mov	r9, r2
 8001102:	430c      	orrs	r4, r1
 8001104:	4304      	orrs	r4, r0
 8001106:	1b1c      	subs	r4, r3, r4
 8001108:	42a3      	cmp	r3, r4
 800110a:	4192      	sbcs	r2, r2
 800110c:	464b      	mov	r3, r9
 800110e:	4252      	negs	r2, r2
 8001110:	1a9b      	subs	r3, r3, r2
 8001112:	469a      	mov	sl, r3
 8001114:	4653      	mov	r3, sl
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	d400      	bmi.n	800111c <__aeabi_dsub+0xbc>
 800111a:	e12b      	b.n	8001374 <__aeabi_dsub+0x314>
 800111c:	4653      	mov	r3, sl
 800111e:	025a      	lsls	r2, r3, #9
 8001120:	0a53      	lsrs	r3, r2, #9
 8001122:	469a      	mov	sl, r3
 8001124:	4653      	mov	r3, sl
 8001126:	2b00      	cmp	r3, #0
 8001128:	d100      	bne.n	800112c <__aeabi_dsub+0xcc>
 800112a:	e166      	b.n	80013fa <__aeabi_dsub+0x39a>
 800112c:	4650      	mov	r0, sl
 800112e:	f000 fb75 	bl	800181c <__clzsi2>
 8001132:	0003      	movs	r3, r0
 8001134:	3b08      	subs	r3, #8
 8001136:	2220      	movs	r2, #32
 8001138:	0020      	movs	r0, r4
 800113a:	1ad2      	subs	r2, r2, r3
 800113c:	4651      	mov	r1, sl
 800113e:	40d0      	lsrs	r0, r2
 8001140:	4099      	lsls	r1, r3
 8001142:	0002      	movs	r2, r0
 8001144:	409c      	lsls	r4, r3
 8001146:	430a      	orrs	r2, r1
 8001148:	429e      	cmp	r6, r3
 800114a:	dd00      	ble.n	800114e <__aeabi_dsub+0xee>
 800114c:	e164      	b.n	8001418 <__aeabi_dsub+0x3b8>
 800114e:	1b9b      	subs	r3, r3, r6
 8001150:	1c59      	adds	r1, r3, #1
 8001152:	291f      	cmp	r1, #31
 8001154:	dd00      	ble.n	8001158 <__aeabi_dsub+0xf8>
 8001156:	e0fe      	b.n	8001356 <__aeabi_dsub+0x2f6>
 8001158:	2320      	movs	r3, #32
 800115a:	0010      	movs	r0, r2
 800115c:	0026      	movs	r6, r4
 800115e:	1a5b      	subs	r3, r3, r1
 8001160:	409c      	lsls	r4, r3
 8001162:	4098      	lsls	r0, r3
 8001164:	40ce      	lsrs	r6, r1
 8001166:	40ca      	lsrs	r2, r1
 8001168:	1e63      	subs	r3, r4, #1
 800116a:	419c      	sbcs	r4, r3
 800116c:	4330      	orrs	r0, r6
 800116e:	4692      	mov	sl, r2
 8001170:	2600      	movs	r6, #0
 8001172:	4304      	orrs	r4, r0
 8001174:	0763      	lsls	r3, r4, #29
 8001176:	d009      	beq.n	800118c <__aeabi_dsub+0x12c>
 8001178:	230f      	movs	r3, #15
 800117a:	4023      	ands	r3, r4
 800117c:	2b04      	cmp	r3, #4
 800117e:	d005      	beq.n	800118c <__aeabi_dsub+0x12c>
 8001180:	1d23      	adds	r3, r4, #4
 8001182:	42a3      	cmp	r3, r4
 8001184:	41a4      	sbcs	r4, r4
 8001186:	4264      	negs	r4, r4
 8001188:	44a2      	add	sl, r4
 800118a:	001c      	movs	r4, r3
 800118c:	4653      	mov	r3, sl
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	d400      	bmi.n	8001194 <__aeabi_dsub+0x134>
 8001192:	e0f2      	b.n	800137a <__aeabi_dsub+0x31a>
 8001194:	4b8c      	ldr	r3, [pc, #560]	; (80013c8 <__aeabi_dsub+0x368>)
 8001196:	3601      	adds	r6, #1
 8001198:	429e      	cmp	r6, r3
 800119a:	d100      	bne.n	800119e <__aeabi_dsub+0x13e>
 800119c:	e10f      	b.n	80013be <__aeabi_dsub+0x35e>
 800119e:	4653      	mov	r3, sl
 80011a0:	498a      	ldr	r1, [pc, #552]	; (80013cc <__aeabi_dsub+0x36c>)
 80011a2:	08e4      	lsrs	r4, r4, #3
 80011a4:	400b      	ands	r3, r1
 80011a6:	0019      	movs	r1, r3
 80011a8:	075b      	lsls	r3, r3, #29
 80011aa:	4323      	orrs	r3, r4
 80011ac:	0572      	lsls	r2, r6, #21
 80011ae:	024c      	lsls	r4, r1, #9
 80011b0:	0b24      	lsrs	r4, r4, #12
 80011b2:	0d52      	lsrs	r2, r2, #21
 80011b4:	0512      	lsls	r2, r2, #20
 80011b6:	4322      	orrs	r2, r4
 80011b8:	07ed      	lsls	r5, r5, #31
 80011ba:	432a      	orrs	r2, r5
 80011bc:	0018      	movs	r0, r3
 80011be:	0011      	movs	r1, r2
 80011c0:	b003      	add	sp, #12
 80011c2:	bcf0      	pop	{r4, r5, r6, r7}
 80011c4:	46bb      	mov	fp, r7
 80011c6:	46b2      	mov	sl, r6
 80011c8:	46a9      	mov	r9, r5
 80011ca:	46a0      	mov	r8, r4
 80011cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ce:	1ab4      	subs	r4, r6, r2
 80011d0:	46a4      	mov	ip, r4
 80011d2:	2c00      	cmp	r4, #0
 80011d4:	dd59      	ble.n	800128a <__aeabi_dsub+0x22a>
 80011d6:	2a00      	cmp	r2, #0
 80011d8:	d100      	bne.n	80011dc <__aeabi_dsub+0x17c>
 80011da:	e0b0      	b.n	800133e <__aeabi_dsub+0x2de>
 80011dc:	4556      	cmp	r6, sl
 80011de:	d100      	bne.n	80011e2 <__aeabi_dsub+0x182>
 80011e0:	e0fa      	b.n	80013d8 <__aeabi_dsub+0x378>
 80011e2:	2280      	movs	r2, #128	; 0x80
 80011e4:	0412      	lsls	r2, r2, #16
 80011e6:	4317      	orrs	r7, r2
 80011e8:	4662      	mov	r2, ip
 80011ea:	2a38      	cmp	r2, #56	; 0x38
 80011ec:	dd00      	ble.n	80011f0 <__aeabi_dsub+0x190>
 80011ee:	e0d4      	b.n	800139a <__aeabi_dsub+0x33a>
 80011f0:	2a1f      	cmp	r2, #31
 80011f2:	dc00      	bgt.n	80011f6 <__aeabi_dsub+0x196>
 80011f4:	e1c0      	b.n	8001578 <__aeabi_dsub+0x518>
 80011f6:	0039      	movs	r1, r7
 80011f8:	3a20      	subs	r2, #32
 80011fa:	40d1      	lsrs	r1, r2
 80011fc:	4662      	mov	r2, ip
 80011fe:	2a20      	cmp	r2, #32
 8001200:	d006      	beq.n	8001210 <__aeabi_dsub+0x1b0>
 8001202:	4664      	mov	r4, ip
 8001204:	2240      	movs	r2, #64	; 0x40
 8001206:	1b12      	subs	r2, r2, r4
 8001208:	003c      	movs	r4, r7
 800120a:	4094      	lsls	r4, r2
 800120c:	4304      	orrs	r4, r0
 800120e:	9401      	str	r4, [sp, #4]
 8001210:	9c01      	ldr	r4, [sp, #4]
 8001212:	1e62      	subs	r2, r4, #1
 8001214:	4194      	sbcs	r4, r2
 8001216:	430c      	orrs	r4, r1
 8001218:	e0c3      	b.n	80013a2 <__aeabi_dsub+0x342>
 800121a:	003c      	movs	r4, r7
 800121c:	4304      	orrs	r4, r0
 800121e:	d02b      	beq.n	8001278 <__aeabi_dsub+0x218>
 8001220:	468b      	mov	fp, r1
 8001222:	428d      	cmp	r5, r1
 8001224:	d02e      	beq.n	8001284 <__aeabi_dsub+0x224>
 8001226:	4c6a      	ldr	r4, [pc, #424]	; (80013d0 <__aeabi_dsub+0x370>)
 8001228:	46a4      	mov	ip, r4
 800122a:	44b4      	add	ip, r6
 800122c:	4664      	mov	r4, ip
 800122e:	2c00      	cmp	r4, #0
 8001230:	d05f      	beq.n	80012f2 <__aeabi_dsub+0x292>
 8001232:	1b94      	subs	r4, r2, r6
 8001234:	46a4      	mov	ip, r4
 8001236:	2e00      	cmp	r6, #0
 8001238:	d000      	beq.n	800123c <__aeabi_dsub+0x1dc>
 800123a:	e120      	b.n	800147e <__aeabi_dsub+0x41e>
 800123c:	464c      	mov	r4, r9
 800123e:	431c      	orrs	r4, r3
 8001240:	d100      	bne.n	8001244 <__aeabi_dsub+0x1e4>
 8001242:	e1c7      	b.n	80015d4 <__aeabi_dsub+0x574>
 8001244:	4661      	mov	r1, ip
 8001246:	1e4c      	subs	r4, r1, #1
 8001248:	2901      	cmp	r1, #1
 800124a:	d100      	bne.n	800124e <__aeabi_dsub+0x1ee>
 800124c:	e223      	b.n	8001696 <__aeabi_dsub+0x636>
 800124e:	4d5e      	ldr	r5, [pc, #376]	; (80013c8 <__aeabi_dsub+0x368>)
 8001250:	45ac      	cmp	ip, r5
 8001252:	d100      	bne.n	8001256 <__aeabi_dsub+0x1f6>
 8001254:	e1d8      	b.n	8001608 <__aeabi_dsub+0x5a8>
 8001256:	46a4      	mov	ip, r4
 8001258:	e11a      	b.n	8001490 <__aeabi_dsub+0x430>
 800125a:	003a      	movs	r2, r7
 800125c:	4302      	orrs	r2, r0
 800125e:	d100      	bne.n	8001262 <__aeabi_dsub+0x202>
 8001260:	e0e4      	b.n	800142c <__aeabi_dsub+0x3cc>
 8001262:	0022      	movs	r2, r4
 8001264:	3a01      	subs	r2, #1
 8001266:	2c01      	cmp	r4, #1
 8001268:	d100      	bne.n	800126c <__aeabi_dsub+0x20c>
 800126a:	e1c3      	b.n	80015f4 <__aeabi_dsub+0x594>
 800126c:	4956      	ldr	r1, [pc, #344]	; (80013c8 <__aeabi_dsub+0x368>)
 800126e:	428c      	cmp	r4, r1
 8001270:	d100      	bne.n	8001274 <__aeabi_dsub+0x214>
 8001272:	e0b1      	b.n	80013d8 <__aeabi_dsub+0x378>
 8001274:	4694      	mov	ip, r2
 8001276:	e72b      	b.n	80010d0 <__aeabi_dsub+0x70>
 8001278:	2401      	movs	r4, #1
 800127a:	4061      	eors	r1, r4
 800127c:	468b      	mov	fp, r1
 800127e:	428d      	cmp	r5, r1
 8001280:	d000      	beq.n	8001284 <__aeabi_dsub+0x224>
 8001282:	e716      	b.n	80010b2 <__aeabi_dsub+0x52>
 8001284:	4952      	ldr	r1, [pc, #328]	; (80013d0 <__aeabi_dsub+0x370>)
 8001286:	468c      	mov	ip, r1
 8001288:	44b4      	add	ip, r6
 800128a:	4664      	mov	r4, ip
 800128c:	2c00      	cmp	r4, #0
 800128e:	d100      	bne.n	8001292 <__aeabi_dsub+0x232>
 8001290:	e0d3      	b.n	800143a <__aeabi_dsub+0x3da>
 8001292:	1b91      	subs	r1, r2, r6
 8001294:	468c      	mov	ip, r1
 8001296:	2e00      	cmp	r6, #0
 8001298:	d100      	bne.n	800129c <__aeabi_dsub+0x23c>
 800129a:	e15e      	b.n	800155a <__aeabi_dsub+0x4fa>
 800129c:	494a      	ldr	r1, [pc, #296]	; (80013c8 <__aeabi_dsub+0x368>)
 800129e:	428a      	cmp	r2, r1
 80012a0:	d100      	bne.n	80012a4 <__aeabi_dsub+0x244>
 80012a2:	e1be      	b.n	8001622 <__aeabi_dsub+0x5c2>
 80012a4:	2180      	movs	r1, #128	; 0x80
 80012a6:	464c      	mov	r4, r9
 80012a8:	0409      	lsls	r1, r1, #16
 80012aa:	430c      	orrs	r4, r1
 80012ac:	46a1      	mov	r9, r4
 80012ae:	4661      	mov	r1, ip
 80012b0:	2938      	cmp	r1, #56	; 0x38
 80012b2:	dd00      	ble.n	80012b6 <__aeabi_dsub+0x256>
 80012b4:	e1ba      	b.n	800162c <__aeabi_dsub+0x5cc>
 80012b6:	291f      	cmp	r1, #31
 80012b8:	dd00      	ble.n	80012bc <__aeabi_dsub+0x25c>
 80012ba:	e227      	b.n	800170c <__aeabi_dsub+0x6ac>
 80012bc:	2420      	movs	r4, #32
 80012be:	1a64      	subs	r4, r4, r1
 80012c0:	4649      	mov	r1, r9
 80012c2:	40a1      	lsls	r1, r4
 80012c4:	001e      	movs	r6, r3
 80012c6:	4688      	mov	r8, r1
 80012c8:	4661      	mov	r1, ip
 80012ca:	40a3      	lsls	r3, r4
 80012cc:	40ce      	lsrs	r6, r1
 80012ce:	4641      	mov	r1, r8
 80012d0:	1e5c      	subs	r4, r3, #1
 80012d2:	41a3      	sbcs	r3, r4
 80012d4:	4331      	orrs	r1, r6
 80012d6:	4319      	orrs	r1, r3
 80012d8:	000c      	movs	r4, r1
 80012da:	4663      	mov	r3, ip
 80012dc:	4649      	mov	r1, r9
 80012de:	40d9      	lsrs	r1, r3
 80012e0:	187f      	adds	r7, r7, r1
 80012e2:	1824      	adds	r4, r4, r0
 80012e4:	4284      	cmp	r4, r0
 80012e6:	419b      	sbcs	r3, r3
 80012e8:	425b      	negs	r3, r3
 80012ea:	469a      	mov	sl, r3
 80012ec:	0016      	movs	r6, r2
 80012ee:	44ba      	add	sl, r7
 80012f0:	e05d      	b.n	80013ae <__aeabi_dsub+0x34e>
 80012f2:	4c38      	ldr	r4, [pc, #224]	; (80013d4 <__aeabi_dsub+0x374>)
 80012f4:	1c72      	adds	r2, r6, #1
 80012f6:	4222      	tst	r2, r4
 80012f8:	d000      	beq.n	80012fc <__aeabi_dsub+0x29c>
 80012fa:	e0df      	b.n	80014bc <__aeabi_dsub+0x45c>
 80012fc:	464a      	mov	r2, r9
 80012fe:	431a      	orrs	r2, r3
 8001300:	2e00      	cmp	r6, #0
 8001302:	d000      	beq.n	8001306 <__aeabi_dsub+0x2a6>
 8001304:	e15c      	b.n	80015c0 <__aeabi_dsub+0x560>
 8001306:	2a00      	cmp	r2, #0
 8001308:	d100      	bne.n	800130c <__aeabi_dsub+0x2ac>
 800130a:	e1cf      	b.n	80016ac <__aeabi_dsub+0x64c>
 800130c:	003a      	movs	r2, r7
 800130e:	4302      	orrs	r2, r0
 8001310:	d100      	bne.n	8001314 <__aeabi_dsub+0x2b4>
 8001312:	e17f      	b.n	8001614 <__aeabi_dsub+0x5b4>
 8001314:	1a1c      	subs	r4, r3, r0
 8001316:	464a      	mov	r2, r9
 8001318:	42a3      	cmp	r3, r4
 800131a:	4189      	sbcs	r1, r1
 800131c:	1bd2      	subs	r2, r2, r7
 800131e:	4249      	negs	r1, r1
 8001320:	1a52      	subs	r2, r2, r1
 8001322:	4692      	mov	sl, r2
 8001324:	0212      	lsls	r2, r2, #8
 8001326:	d400      	bmi.n	800132a <__aeabi_dsub+0x2ca>
 8001328:	e20a      	b.n	8001740 <__aeabi_dsub+0x6e0>
 800132a:	1ac4      	subs	r4, r0, r3
 800132c:	42a0      	cmp	r0, r4
 800132e:	4180      	sbcs	r0, r0
 8001330:	464b      	mov	r3, r9
 8001332:	4240      	negs	r0, r0
 8001334:	1aff      	subs	r7, r7, r3
 8001336:	1a3b      	subs	r3, r7, r0
 8001338:	469a      	mov	sl, r3
 800133a:	465d      	mov	r5, fp
 800133c:	e71a      	b.n	8001174 <__aeabi_dsub+0x114>
 800133e:	003a      	movs	r2, r7
 8001340:	4302      	orrs	r2, r0
 8001342:	d073      	beq.n	800142c <__aeabi_dsub+0x3cc>
 8001344:	0022      	movs	r2, r4
 8001346:	3a01      	subs	r2, #1
 8001348:	2c01      	cmp	r4, #1
 800134a:	d100      	bne.n	800134e <__aeabi_dsub+0x2ee>
 800134c:	e0cb      	b.n	80014e6 <__aeabi_dsub+0x486>
 800134e:	4554      	cmp	r4, sl
 8001350:	d042      	beq.n	80013d8 <__aeabi_dsub+0x378>
 8001352:	4694      	mov	ip, r2
 8001354:	e748      	b.n	80011e8 <__aeabi_dsub+0x188>
 8001356:	0010      	movs	r0, r2
 8001358:	3b1f      	subs	r3, #31
 800135a:	40d8      	lsrs	r0, r3
 800135c:	2920      	cmp	r1, #32
 800135e:	d003      	beq.n	8001368 <__aeabi_dsub+0x308>
 8001360:	2340      	movs	r3, #64	; 0x40
 8001362:	1a5b      	subs	r3, r3, r1
 8001364:	409a      	lsls	r2, r3
 8001366:	4314      	orrs	r4, r2
 8001368:	1e63      	subs	r3, r4, #1
 800136a:	419c      	sbcs	r4, r3
 800136c:	2300      	movs	r3, #0
 800136e:	2600      	movs	r6, #0
 8001370:	469a      	mov	sl, r3
 8001372:	4304      	orrs	r4, r0
 8001374:	0763      	lsls	r3, r4, #29
 8001376:	d000      	beq.n	800137a <__aeabi_dsub+0x31a>
 8001378:	e6fe      	b.n	8001178 <__aeabi_dsub+0x118>
 800137a:	4652      	mov	r2, sl
 800137c:	08e3      	lsrs	r3, r4, #3
 800137e:	0752      	lsls	r2, r2, #29
 8001380:	4313      	orrs	r3, r2
 8001382:	4652      	mov	r2, sl
 8001384:	46b4      	mov	ip, r6
 8001386:	08d2      	lsrs	r2, r2, #3
 8001388:	490f      	ldr	r1, [pc, #60]	; (80013c8 <__aeabi_dsub+0x368>)
 800138a:	458c      	cmp	ip, r1
 800138c:	d02a      	beq.n	80013e4 <__aeabi_dsub+0x384>
 800138e:	0312      	lsls	r2, r2, #12
 8001390:	0b14      	lsrs	r4, r2, #12
 8001392:	4662      	mov	r2, ip
 8001394:	0552      	lsls	r2, r2, #21
 8001396:	0d52      	lsrs	r2, r2, #21
 8001398:	e70c      	b.n	80011b4 <__aeabi_dsub+0x154>
 800139a:	003c      	movs	r4, r7
 800139c:	4304      	orrs	r4, r0
 800139e:	1e62      	subs	r2, r4, #1
 80013a0:	4194      	sbcs	r4, r2
 80013a2:	18e4      	adds	r4, r4, r3
 80013a4:	429c      	cmp	r4, r3
 80013a6:	4192      	sbcs	r2, r2
 80013a8:	4252      	negs	r2, r2
 80013aa:	444a      	add	r2, r9
 80013ac:	4692      	mov	sl, r2
 80013ae:	4653      	mov	r3, sl
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	d5df      	bpl.n	8001374 <__aeabi_dsub+0x314>
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <__aeabi_dsub+0x368>)
 80013b6:	3601      	adds	r6, #1
 80013b8:	429e      	cmp	r6, r3
 80013ba:	d000      	beq.n	80013be <__aeabi_dsub+0x35e>
 80013bc:	e0a0      	b.n	8001500 <__aeabi_dsub+0x4a0>
 80013be:	0032      	movs	r2, r6
 80013c0:	2400      	movs	r4, #0
 80013c2:	2300      	movs	r3, #0
 80013c4:	e6f6      	b.n	80011b4 <__aeabi_dsub+0x154>
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	000007ff 	.word	0x000007ff
 80013cc:	ff7fffff 	.word	0xff7fffff
 80013d0:	fffff801 	.word	0xfffff801
 80013d4:	000007fe 	.word	0x000007fe
 80013d8:	08db      	lsrs	r3, r3, #3
 80013da:	464a      	mov	r2, r9
 80013dc:	0752      	lsls	r2, r2, #29
 80013de:	4313      	orrs	r3, r2
 80013e0:	464a      	mov	r2, r9
 80013e2:	08d2      	lsrs	r2, r2, #3
 80013e4:	0019      	movs	r1, r3
 80013e6:	4311      	orrs	r1, r2
 80013e8:	d100      	bne.n	80013ec <__aeabi_dsub+0x38c>
 80013ea:	e1b5      	b.n	8001758 <__aeabi_dsub+0x6f8>
 80013ec:	2480      	movs	r4, #128	; 0x80
 80013ee:	0324      	lsls	r4, r4, #12
 80013f0:	4314      	orrs	r4, r2
 80013f2:	0324      	lsls	r4, r4, #12
 80013f4:	4ad5      	ldr	r2, [pc, #852]	; (800174c <__aeabi_dsub+0x6ec>)
 80013f6:	0b24      	lsrs	r4, r4, #12
 80013f8:	e6dc      	b.n	80011b4 <__aeabi_dsub+0x154>
 80013fa:	0020      	movs	r0, r4
 80013fc:	f000 fa0e 	bl	800181c <__clzsi2>
 8001400:	0003      	movs	r3, r0
 8001402:	3318      	adds	r3, #24
 8001404:	2b1f      	cmp	r3, #31
 8001406:	dc00      	bgt.n	800140a <__aeabi_dsub+0x3aa>
 8001408:	e695      	b.n	8001136 <__aeabi_dsub+0xd6>
 800140a:	0022      	movs	r2, r4
 800140c:	3808      	subs	r0, #8
 800140e:	4082      	lsls	r2, r0
 8001410:	2400      	movs	r4, #0
 8001412:	429e      	cmp	r6, r3
 8001414:	dc00      	bgt.n	8001418 <__aeabi_dsub+0x3b8>
 8001416:	e69a      	b.n	800114e <__aeabi_dsub+0xee>
 8001418:	1af6      	subs	r6, r6, r3
 800141a:	4bcd      	ldr	r3, [pc, #820]	; (8001750 <__aeabi_dsub+0x6f0>)
 800141c:	401a      	ands	r2, r3
 800141e:	4692      	mov	sl, r2
 8001420:	e6a8      	b.n	8001174 <__aeabi_dsub+0x114>
 8001422:	003c      	movs	r4, r7
 8001424:	4304      	orrs	r4, r0
 8001426:	1e62      	subs	r2, r4, #1
 8001428:	4194      	sbcs	r4, r2
 800142a:	e66c      	b.n	8001106 <__aeabi_dsub+0xa6>
 800142c:	464a      	mov	r2, r9
 800142e:	08db      	lsrs	r3, r3, #3
 8001430:	0752      	lsls	r2, r2, #29
 8001432:	4313      	orrs	r3, r2
 8001434:	464a      	mov	r2, r9
 8001436:	08d2      	lsrs	r2, r2, #3
 8001438:	e7a6      	b.n	8001388 <__aeabi_dsub+0x328>
 800143a:	4cc6      	ldr	r4, [pc, #792]	; (8001754 <__aeabi_dsub+0x6f4>)
 800143c:	1c72      	adds	r2, r6, #1
 800143e:	4222      	tst	r2, r4
 8001440:	d000      	beq.n	8001444 <__aeabi_dsub+0x3e4>
 8001442:	e0ac      	b.n	800159e <__aeabi_dsub+0x53e>
 8001444:	464a      	mov	r2, r9
 8001446:	431a      	orrs	r2, r3
 8001448:	2e00      	cmp	r6, #0
 800144a:	d000      	beq.n	800144e <__aeabi_dsub+0x3ee>
 800144c:	e105      	b.n	800165a <__aeabi_dsub+0x5fa>
 800144e:	2a00      	cmp	r2, #0
 8001450:	d100      	bne.n	8001454 <__aeabi_dsub+0x3f4>
 8001452:	e156      	b.n	8001702 <__aeabi_dsub+0x6a2>
 8001454:	003a      	movs	r2, r7
 8001456:	4302      	orrs	r2, r0
 8001458:	d100      	bne.n	800145c <__aeabi_dsub+0x3fc>
 800145a:	e0db      	b.n	8001614 <__aeabi_dsub+0x5b4>
 800145c:	181c      	adds	r4, r3, r0
 800145e:	429c      	cmp	r4, r3
 8001460:	419b      	sbcs	r3, r3
 8001462:	444f      	add	r7, r9
 8001464:	46ba      	mov	sl, r7
 8001466:	425b      	negs	r3, r3
 8001468:	449a      	add	sl, r3
 800146a:	4653      	mov	r3, sl
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	d400      	bmi.n	8001472 <__aeabi_dsub+0x412>
 8001470:	e780      	b.n	8001374 <__aeabi_dsub+0x314>
 8001472:	4652      	mov	r2, sl
 8001474:	4bb6      	ldr	r3, [pc, #728]	; (8001750 <__aeabi_dsub+0x6f0>)
 8001476:	2601      	movs	r6, #1
 8001478:	401a      	ands	r2, r3
 800147a:	4692      	mov	sl, r2
 800147c:	e77a      	b.n	8001374 <__aeabi_dsub+0x314>
 800147e:	4cb3      	ldr	r4, [pc, #716]	; (800174c <__aeabi_dsub+0x6ec>)
 8001480:	42a2      	cmp	r2, r4
 8001482:	d100      	bne.n	8001486 <__aeabi_dsub+0x426>
 8001484:	e0c0      	b.n	8001608 <__aeabi_dsub+0x5a8>
 8001486:	2480      	movs	r4, #128	; 0x80
 8001488:	464d      	mov	r5, r9
 800148a:	0424      	lsls	r4, r4, #16
 800148c:	4325      	orrs	r5, r4
 800148e:	46a9      	mov	r9, r5
 8001490:	4664      	mov	r4, ip
 8001492:	2c38      	cmp	r4, #56	; 0x38
 8001494:	dc53      	bgt.n	800153e <__aeabi_dsub+0x4de>
 8001496:	4661      	mov	r1, ip
 8001498:	2c1f      	cmp	r4, #31
 800149a:	dd00      	ble.n	800149e <__aeabi_dsub+0x43e>
 800149c:	e0cd      	b.n	800163a <__aeabi_dsub+0x5da>
 800149e:	2520      	movs	r5, #32
 80014a0:	001e      	movs	r6, r3
 80014a2:	1b2d      	subs	r5, r5, r4
 80014a4:	464c      	mov	r4, r9
 80014a6:	40ab      	lsls	r3, r5
 80014a8:	40ac      	lsls	r4, r5
 80014aa:	40ce      	lsrs	r6, r1
 80014ac:	1e5d      	subs	r5, r3, #1
 80014ae:	41ab      	sbcs	r3, r5
 80014b0:	4334      	orrs	r4, r6
 80014b2:	4323      	orrs	r3, r4
 80014b4:	464c      	mov	r4, r9
 80014b6:	40cc      	lsrs	r4, r1
 80014b8:	1b3f      	subs	r7, r7, r4
 80014ba:	e045      	b.n	8001548 <__aeabi_dsub+0x4e8>
 80014bc:	464a      	mov	r2, r9
 80014be:	1a1c      	subs	r4, r3, r0
 80014c0:	1bd1      	subs	r1, r2, r7
 80014c2:	42a3      	cmp	r3, r4
 80014c4:	4192      	sbcs	r2, r2
 80014c6:	4252      	negs	r2, r2
 80014c8:	4692      	mov	sl, r2
 80014ca:	000a      	movs	r2, r1
 80014cc:	4651      	mov	r1, sl
 80014ce:	1a52      	subs	r2, r2, r1
 80014d0:	4692      	mov	sl, r2
 80014d2:	0212      	lsls	r2, r2, #8
 80014d4:	d500      	bpl.n	80014d8 <__aeabi_dsub+0x478>
 80014d6:	e083      	b.n	80015e0 <__aeabi_dsub+0x580>
 80014d8:	4653      	mov	r3, sl
 80014da:	4323      	orrs	r3, r4
 80014dc:	d000      	beq.n	80014e0 <__aeabi_dsub+0x480>
 80014de:	e621      	b.n	8001124 <__aeabi_dsub+0xc4>
 80014e0:	2200      	movs	r2, #0
 80014e2:	2500      	movs	r5, #0
 80014e4:	e753      	b.n	800138e <__aeabi_dsub+0x32e>
 80014e6:	181c      	adds	r4, r3, r0
 80014e8:	429c      	cmp	r4, r3
 80014ea:	419b      	sbcs	r3, r3
 80014ec:	444f      	add	r7, r9
 80014ee:	46ba      	mov	sl, r7
 80014f0:	425b      	negs	r3, r3
 80014f2:	449a      	add	sl, r3
 80014f4:	4653      	mov	r3, sl
 80014f6:	2601      	movs	r6, #1
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	d400      	bmi.n	80014fe <__aeabi_dsub+0x49e>
 80014fc:	e73a      	b.n	8001374 <__aeabi_dsub+0x314>
 80014fe:	2602      	movs	r6, #2
 8001500:	4652      	mov	r2, sl
 8001502:	4b93      	ldr	r3, [pc, #588]	; (8001750 <__aeabi_dsub+0x6f0>)
 8001504:	2101      	movs	r1, #1
 8001506:	401a      	ands	r2, r3
 8001508:	0013      	movs	r3, r2
 800150a:	4021      	ands	r1, r4
 800150c:	0862      	lsrs	r2, r4, #1
 800150e:	430a      	orrs	r2, r1
 8001510:	07dc      	lsls	r4, r3, #31
 8001512:	085b      	lsrs	r3, r3, #1
 8001514:	469a      	mov	sl, r3
 8001516:	4314      	orrs	r4, r2
 8001518:	e62c      	b.n	8001174 <__aeabi_dsub+0x114>
 800151a:	0039      	movs	r1, r7
 800151c:	3a20      	subs	r2, #32
 800151e:	40d1      	lsrs	r1, r2
 8001520:	4662      	mov	r2, ip
 8001522:	2a20      	cmp	r2, #32
 8001524:	d006      	beq.n	8001534 <__aeabi_dsub+0x4d4>
 8001526:	4664      	mov	r4, ip
 8001528:	2240      	movs	r2, #64	; 0x40
 800152a:	1b12      	subs	r2, r2, r4
 800152c:	003c      	movs	r4, r7
 800152e:	4094      	lsls	r4, r2
 8001530:	4304      	orrs	r4, r0
 8001532:	9401      	str	r4, [sp, #4]
 8001534:	9c01      	ldr	r4, [sp, #4]
 8001536:	1e62      	subs	r2, r4, #1
 8001538:	4194      	sbcs	r4, r2
 800153a:	430c      	orrs	r4, r1
 800153c:	e5e3      	b.n	8001106 <__aeabi_dsub+0xa6>
 800153e:	4649      	mov	r1, r9
 8001540:	4319      	orrs	r1, r3
 8001542:	000b      	movs	r3, r1
 8001544:	1e5c      	subs	r4, r3, #1
 8001546:	41a3      	sbcs	r3, r4
 8001548:	1ac4      	subs	r4, r0, r3
 800154a:	42a0      	cmp	r0, r4
 800154c:	419b      	sbcs	r3, r3
 800154e:	425b      	negs	r3, r3
 8001550:	1afb      	subs	r3, r7, r3
 8001552:	469a      	mov	sl, r3
 8001554:	465d      	mov	r5, fp
 8001556:	0016      	movs	r6, r2
 8001558:	e5dc      	b.n	8001114 <__aeabi_dsub+0xb4>
 800155a:	4649      	mov	r1, r9
 800155c:	4319      	orrs	r1, r3
 800155e:	d100      	bne.n	8001562 <__aeabi_dsub+0x502>
 8001560:	e0ae      	b.n	80016c0 <__aeabi_dsub+0x660>
 8001562:	4661      	mov	r1, ip
 8001564:	4664      	mov	r4, ip
 8001566:	3901      	subs	r1, #1
 8001568:	2c01      	cmp	r4, #1
 800156a:	d100      	bne.n	800156e <__aeabi_dsub+0x50e>
 800156c:	e0e0      	b.n	8001730 <__aeabi_dsub+0x6d0>
 800156e:	4c77      	ldr	r4, [pc, #476]	; (800174c <__aeabi_dsub+0x6ec>)
 8001570:	45a4      	cmp	ip, r4
 8001572:	d056      	beq.n	8001622 <__aeabi_dsub+0x5c2>
 8001574:	468c      	mov	ip, r1
 8001576:	e69a      	b.n	80012ae <__aeabi_dsub+0x24e>
 8001578:	4661      	mov	r1, ip
 800157a:	2220      	movs	r2, #32
 800157c:	003c      	movs	r4, r7
 800157e:	1a52      	subs	r2, r2, r1
 8001580:	4094      	lsls	r4, r2
 8001582:	0001      	movs	r1, r0
 8001584:	4090      	lsls	r0, r2
 8001586:	46a0      	mov	r8, r4
 8001588:	4664      	mov	r4, ip
 800158a:	1e42      	subs	r2, r0, #1
 800158c:	4190      	sbcs	r0, r2
 800158e:	4662      	mov	r2, ip
 8001590:	40e1      	lsrs	r1, r4
 8001592:	4644      	mov	r4, r8
 8001594:	40d7      	lsrs	r7, r2
 8001596:	430c      	orrs	r4, r1
 8001598:	4304      	orrs	r4, r0
 800159a:	44b9      	add	r9, r7
 800159c:	e701      	b.n	80013a2 <__aeabi_dsub+0x342>
 800159e:	496b      	ldr	r1, [pc, #428]	; (800174c <__aeabi_dsub+0x6ec>)
 80015a0:	428a      	cmp	r2, r1
 80015a2:	d100      	bne.n	80015a6 <__aeabi_dsub+0x546>
 80015a4:	e70c      	b.n	80013c0 <__aeabi_dsub+0x360>
 80015a6:	1818      	adds	r0, r3, r0
 80015a8:	4298      	cmp	r0, r3
 80015aa:	419b      	sbcs	r3, r3
 80015ac:	444f      	add	r7, r9
 80015ae:	425b      	negs	r3, r3
 80015b0:	18fb      	adds	r3, r7, r3
 80015b2:	07dc      	lsls	r4, r3, #31
 80015b4:	0840      	lsrs	r0, r0, #1
 80015b6:	085b      	lsrs	r3, r3, #1
 80015b8:	469a      	mov	sl, r3
 80015ba:	0016      	movs	r6, r2
 80015bc:	4304      	orrs	r4, r0
 80015be:	e6d9      	b.n	8001374 <__aeabi_dsub+0x314>
 80015c0:	2a00      	cmp	r2, #0
 80015c2:	d000      	beq.n	80015c6 <__aeabi_dsub+0x566>
 80015c4:	e081      	b.n	80016ca <__aeabi_dsub+0x66a>
 80015c6:	003b      	movs	r3, r7
 80015c8:	4303      	orrs	r3, r0
 80015ca:	d11d      	bne.n	8001608 <__aeabi_dsub+0x5a8>
 80015cc:	2280      	movs	r2, #128	; 0x80
 80015ce:	2500      	movs	r5, #0
 80015d0:	0312      	lsls	r2, r2, #12
 80015d2:	e70b      	b.n	80013ec <__aeabi_dsub+0x38c>
 80015d4:	08c0      	lsrs	r0, r0, #3
 80015d6:	077b      	lsls	r3, r7, #29
 80015d8:	465d      	mov	r5, fp
 80015da:	4303      	orrs	r3, r0
 80015dc:	08fa      	lsrs	r2, r7, #3
 80015de:	e6d3      	b.n	8001388 <__aeabi_dsub+0x328>
 80015e0:	1ac4      	subs	r4, r0, r3
 80015e2:	42a0      	cmp	r0, r4
 80015e4:	4180      	sbcs	r0, r0
 80015e6:	464b      	mov	r3, r9
 80015e8:	4240      	negs	r0, r0
 80015ea:	1aff      	subs	r7, r7, r3
 80015ec:	1a3b      	subs	r3, r7, r0
 80015ee:	469a      	mov	sl, r3
 80015f0:	465d      	mov	r5, fp
 80015f2:	e597      	b.n	8001124 <__aeabi_dsub+0xc4>
 80015f4:	1a1c      	subs	r4, r3, r0
 80015f6:	464a      	mov	r2, r9
 80015f8:	42a3      	cmp	r3, r4
 80015fa:	419b      	sbcs	r3, r3
 80015fc:	1bd7      	subs	r7, r2, r7
 80015fe:	425b      	negs	r3, r3
 8001600:	1afb      	subs	r3, r7, r3
 8001602:	469a      	mov	sl, r3
 8001604:	2601      	movs	r6, #1
 8001606:	e585      	b.n	8001114 <__aeabi_dsub+0xb4>
 8001608:	08c0      	lsrs	r0, r0, #3
 800160a:	077b      	lsls	r3, r7, #29
 800160c:	465d      	mov	r5, fp
 800160e:	4303      	orrs	r3, r0
 8001610:	08fa      	lsrs	r2, r7, #3
 8001612:	e6e7      	b.n	80013e4 <__aeabi_dsub+0x384>
 8001614:	464a      	mov	r2, r9
 8001616:	08db      	lsrs	r3, r3, #3
 8001618:	0752      	lsls	r2, r2, #29
 800161a:	4313      	orrs	r3, r2
 800161c:	464a      	mov	r2, r9
 800161e:	08d2      	lsrs	r2, r2, #3
 8001620:	e6b5      	b.n	800138e <__aeabi_dsub+0x32e>
 8001622:	08c0      	lsrs	r0, r0, #3
 8001624:	077b      	lsls	r3, r7, #29
 8001626:	4303      	orrs	r3, r0
 8001628:	08fa      	lsrs	r2, r7, #3
 800162a:	e6db      	b.n	80013e4 <__aeabi_dsub+0x384>
 800162c:	4649      	mov	r1, r9
 800162e:	4319      	orrs	r1, r3
 8001630:	000b      	movs	r3, r1
 8001632:	1e59      	subs	r1, r3, #1
 8001634:	418b      	sbcs	r3, r1
 8001636:	001c      	movs	r4, r3
 8001638:	e653      	b.n	80012e2 <__aeabi_dsub+0x282>
 800163a:	464d      	mov	r5, r9
 800163c:	3c20      	subs	r4, #32
 800163e:	40e5      	lsrs	r5, r4
 8001640:	2920      	cmp	r1, #32
 8001642:	d005      	beq.n	8001650 <__aeabi_dsub+0x5f0>
 8001644:	2440      	movs	r4, #64	; 0x40
 8001646:	1a64      	subs	r4, r4, r1
 8001648:	4649      	mov	r1, r9
 800164a:	40a1      	lsls	r1, r4
 800164c:	430b      	orrs	r3, r1
 800164e:	4698      	mov	r8, r3
 8001650:	4643      	mov	r3, r8
 8001652:	1e5c      	subs	r4, r3, #1
 8001654:	41a3      	sbcs	r3, r4
 8001656:	432b      	orrs	r3, r5
 8001658:	e776      	b.n	8001548 <__aeabi_dsub+0x4e8>
 800165a:	2a00      	cmp	r2, #0
 800165c:	d0e1      	beq.n	8001622 <__aeabi_dsub+0x5c2>
 800165e:	003a      	movs	r2, r7
 8001660:	08db      	lsrs	r3, r3, #3
 8001662:	4302      	orrs	r2, r0
 8001664:	d100      	bne.n	8001668 <__aeabi_dsub+0x608>
 8001666:	e6b8      	b.n	80013da <__aeabi_dsub+0x37a>
 8001668:	464a      	mov	r2, r9
 800166a:	0752      	lsls	r2, r2, #29
 800166c:	2480      	movs	r4, #128	; 0x80
 800166e:	4313      	orrs	r3, r2
 8001670:	464a      	mov	r2, r9
 8001672:	0324      	lsls	r4, r4, #12
 8001674:	08d2      	lsrs	r2, r2, #3
 8001676:	4222      	tst	r2, r4
 8001678:	d007      	beq.n	800168a <__aeabi_dsub+0x62a>
 800167a:	08fe      	lsrs	r6, r7, #3
 800167c:	4226      	tst	r6, r4
 800167e:	d104      	bne.n	800168a <__aeabi_dsub+0x62a>
 8001680:	465d      	mov	r5, fp
 8001682:	0032      	movs	r2, r6
 8001684:	08c3      	lsrs	r3, r0, #3
 8001686:	077f      	lsls	r7, r7, #29
 8001688:	433b      	orrs	r3, r7
 800168a:	0f59      	lsrs	r1, r3, #29
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	0749      	lsls	r1, r1, #29
 8001690:	08db      	lsrs	r3, r3, #3
 8001692:	430b      	orrs	r3, r1
 8001694:	e6a6      	b.n	80013e4 <__aeabi_dsub+0x384>
 8001696:	1ac4      	subs	r4, r0, r3
 8001698:	42a0      	cmp	r0, r4
 800169a:	4180      	sbcs	r0, r0
 800169c:	464b      	mov	r3, r9
 800169e:	4240      	negs	r0, r0
 80016a0:	1aff      	subs	r7, r7, r3
 80016a2:	1a3b      	subs	r3, r7, r0
 80016a4:	469a      	mov	sl, r3
 80016a6:	465d      	mov	r5, fp
 80016a8:	2601      	movs	r6, #1
 80016aa:	e533      	b.n	8001114 <__aeabi_dsub+0xb4>
 80016ac:	003b      	movs	r3, r7
 80016ae:	4303      	orrs	r3, r0
 80016b0:	d100      	bne.n	80016b4 <__aeabi_dsub+0x654>
 80016b2:	e715      	b.n	80014e0 <__aeabi_dsub+0x480>
 80016b4:	08c0      	lsrs	r0, r0, #3
 80016b6:	077b      	lsls	r3, r7, #29
 80016b8:	465d      	mov	r5, fp
 80016ba:	4303      	orrs	r3, r0
 80016bc:	08fa      	lsrs	r2, r7, #3
 80016be:	e666      	b.n	800138e <__aeabi_dsub+0x32e>
 80016c0:	08c0      	lsrs	r0, r0, #3
 80016c2:	077b      	lsls	r3, r7, #29
 80016c4:	4303      	orrs	r3, r0
 80016c6:	08fa      	lsrs	r2, r7, #3
 80016c8:	e65e      	b.n	8001388 <__aeabi_dsub+0x328>
 80016ca:	003a      	movs	r2, r7
 80016cc:	08db      	lsrs	r3, r3, #3
 80016ce:	4302      	orrs	r2, r0
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dsub+0x674>
 80016d2:	e682      	b.n	80013da <__aeabi_dsub+0x37a>
 80016d4:	464a      	mov	r2, r9
 80016d6:	0752      	lsls	r2, r2, #29
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	4313      	orrs	r3, r2
 80016dc:	464a      	mov	r2, r9
 80016de:	0324      	lsls	r4, r4, #12
 80016e0:	08d2      	lsrs	r2, r2, #3
 80016e2:	4222      	tst	r2, r4
 80016e4:	d007      	beq.n	80016f6 <__aeabi_dsub+0x696>
 80016e6:	08fe      	lsrs	r6, r7, #3
 80016e8:	4226      	tst	r6, r4
 80016ea:	d104      	bne.n	80016f6 <__aeabi_dsub+0x696>
 80016ec:	465d      	mov	r5, fp
 80016ee:	0032      	movs	r2, r6
 80016f0:	08c3      	lsrs	r3, r0, #3
 80016f2:	077f      	lsls	r7, r7, #29
 80016f4:	433b      	orrs	r3, r7
 80016f6:	0f59      	lsrs	r1, r3, #29
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	08db      	lsrs	r3, r3, #3
 80016fc:	0749      	lsls	r1, r1, #29
 80016fe:	430b      	orrs	r3, r1
 8001700:	e670      	b.n	80013e4 <__aeabi_dsub+0x384>
 8001702:	08c0      	lsrs	r0, r0, #3
 8001704:	077b      	lsls	r3, r7, #29
 8001706:	4303      	orrs	r3, r0
 8001708:	08fa      	lsrs	r2, r7, #3
 800170a:	e640      	b.n	800138e <__aeabi_dsub+0x32e>
 800170c:	464c      	mov	r4, r9
 800170e:	3920      	subs	r1, #32
 8001710:	40cc      	lsrs	r4, r1
 8001712:	4661      	mov	r1, ip
 8001714:	2920      	cmp	r1, #32
 8001716:	d006      	beq.n	8001726 <__aeabi_dsub+0x6c6>
 8001718:	4666      	mov	r6, ip
 800171a:	2140      	movs	r1, #64	; 0x40
 800171c:	1b89      	subs	r1, r1, r6
 800171e:	464e      	mov	r6, r9
 8001720:	408e      	lsls	r6, r1
 8001722:	4333      	orrs	r3, r6
 8001724:	4698      	mov	r8, r3
 8001726:	4643      	mov	r3, r8
 8001728:	1e59      	subs	r1, r3, #1
 800172a:	418b      	sbcs	r3, r1
 800172c:	431c      	orrs	r4, r3
 800172e:	e5d8      	b.n	80012e2 <__aeabi_dsub+0x282>
 8001730:	181c      	adds	r4, r3, r0
 8001732:	4284      	cmp	r4, r0
 8001734:	4180      	sbcs	r0, r0
 8001736:	444f      	add	r7, r9
 8001738:	46ba      	mov	sl, r7
 800173a:	4240      	negs	r0, r0
 800173c:	4482      	add	sl, r0
 800173e:	e6d9      	b.n	80014f4 <__aeabi_dsub+0x494>
 8001740:	4653      	mov	r3, sl
 8001742:	4323      	orrs	r3, r4
 8001744:	d100      	bne.n	8001748 <__aeabi_dsub+0x6e8>
 8001746:	e6cb      	b.n	80014e0 <__aeabi_dsub+0x480>
 8001748:	e614      	b.n	8001374 <__aeabi_dsub+0x314>
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	000007ff 	.word	0x000007ff
 8001750:	ff7fffff 	.word	0xff7fffff
 8001754:	000007fe 	.word	0x000007fe
 8001758:	2300      	movs	r3, #0
 800175a:	4a01      	ldr	r2, [pc, #4]	; (8001760 <__aeabi_dsub+0x700>)
 800175c:	001c      	movs	r4, r3
 800175e:	e529      	b.n	80011b4 <__aeabi_dsub+0x154>
 8001760:	000007ff 	.word	0x000007ff

08001764 <__aeabi_d2iz>:
 8001764:	000a      	movs	r2, r1
 8001766:	b530      	push	{r4, r5, lr}
 8001768:	4c13      	ldr	r4, [pc, #76]	; (80017b8 <__aeabi_d2iz+0x54>)
 800176a:	0053      	lsls	r3, r2, #1
 800176c:	0309      	lsls	r1, r1, #12
 800176e:	0005      	movs	r5, r0
 8001770:	0b09      	lsrs	r1, r1, #12
 8001772:	2000      	movs	r0, #0
 8001774:	0d5b      	lsrs	r3, r3, #21
 8001776:	0fd2      	lsrs	r2, r2, #31
 8001778:	42a3      	cmp	r3, r4
 800177a:	dd04      	ble.n	8001786 <__aeabi_d2iz+0x22>
 800177c:	480f      	ldr	r0, [pc, #60]	; (80017bc <__aeabi_d2iz+0x58>)
 800177e:	4283      	cmp	r3, r0
 8001780:	dd02      	ble.n	8001788 <__aeabi_d2iz+0x24>
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <__aeabi_d2iz+0x5c>)
 8001784:	18d0      	adds	r0, r2, r3
 8001786:	bd30      	pop	{r4, r5, pc}
 8001788:	2080      	movs	r0, #128	; 0x80
 800178a:	0340      	lsls	r0, r0, #13
 800178c:	4301      	orrs	r1, r0
 800178e:	480d      	ldr	r0, [pc, #52]	; (80017c4 <__aeabi_d2iz+0x60>)
 8001790:	1ac0      	subs	r0, r0, r3
 8001792:	281f      	cmp	r0, #31
 8001794:	dd08      	ble.n	80017a8 <__aeabi_d2iz+0x44>
 8001796:	480c      	ldr	r0, [pc, #48]	; (80017c8 <__aeabi_d2iz+0x64>)
 8001798:	1ac3      	subs	r3, r0, r3
 800179a:	40d9      	lsrs	r1, r3
 800179c:	000b      	movs	r3, r1
 800179e:	4258      	negs	r0, r3
 80017a0:	2a00      	cmp	r2, #0
 80017a2:	d1f0      	bne.n	8001786 <__aeabi_d2iz+0x22>
 80017a4:	0018      	movs	r0, r3
 80017a6:	e7ee      	b.n	8001786 <__aeabi_d2iz+0x22>
 80017a8:	4c08      	ldr	r4, [pc, #32]	; (80017cc <__aeabi_d2iz+0x68>)
 80017aa:	40c5      	lsrs	r5, r0
 80017ac:	46a4      	mov	ip, r4
 80017ae:	4463      	add	r3, ip
 80017b0:	4099      	lsls	r1, r3
 80017b2:	000b      	movs	r3, r1
 80017b4:	432b      	orrs	r3, r5
 80017b6:	e7f2      	b.n	800179e <__aeabi_d2iz+0x3a>
 80017b8:	000003fe 	.word	0x000003fe
 80017bc:	0000041d 	.word	0x0000041d
 80017c0:	7fffffff 	.word	0x7fffffff
 80017c4:	00000433 	.word	0x00000433
 80017c8:	00000413 	.word	0x00000413
 80017cc:	fffffbed 	.word	0xfffffbed

080017d0 <__aeabi_ui2d>:
 80017d0:	b510      	push	{r4, lr}
 80017d2:	1e04      	subs	r4, r0, #0
 80017d4:	d010      	beq.n	80017f8 <__aeabi_ui2d+0x28>
 80017d6:	f000 f821 	bl	800181c <__clzsi2>
 80017da:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <__aeabi_ui2d+0x48>)
 80017dc:	1a1b      	subs	r3, r3, r0
 80017de:	280a      	cmp	r0, #10
 80017e0:	dc11      	bgt.n	8001806 <__aeabi_ui2d+0x36>
 80017e2:	220b      	movs	r2, #11
 80017e4:	0021      	movs	r1, r4
 80017e6:	1a12      	subs	r2, r2, r0
 80017e8:	40d1      	lsrs	r1, r2
 80017ea:	3015      	adds	r0, #21
 80017ec:	030a      	lsls	r2, r1, #12
 80017ee:	055b      	lsls	r3, r3, #21
 80017f0:	4084      	lsls	r4, r0
 80017f2:	0b12      	lsrs	r2, r2, #12
 80017f4:	0d5b      	lsrs	r3, r3, #21
 80017f6:	e001      	b.n	80017fc <__aeabi_ui2d+0x2c>
 80017f8:	2300      	movs	r3, #0
 80017fa:	2200      	movs	r2, #0
 80017fc:	051b      	lsls	r3, r3, #20
 80017fe:	4313      	orrs	r3, r2
 8001800:	0020      	movs	r0, r4
 8001802:	0019      	movs	r1, r3
 8001804:	bd10      	pop	{r4, pc}
 8001806:	0022      	movs	r2, r4
 8001808:	380b      	subs	r0, #11
 800180a:	4082      	lsls	r2, r0
 800180c:	055b      	lsls	r3, r3, #21
 800180e:	0312      	lsls	r2, r2, #12
 8001810:	2400      	movs	r4, #0
 8001812:	0b12      	lsrs	r2, r2, #12
 8001814:	0d5b      	lsrs	r3, r3, #21
 8001816:	e7f1      	b.n	80017fc <__aeabi_ui2d+0x2c>
 8001818:	0000041e 	.word	0x0000041e

0800181c <__clzsi2>:
 800181c:	211c      	movs	r1, #28
 800181e:	2301      	movs	r3, #1
 8001820:	041b      	lsls	r3, r3, #16
 8001822:	4298      	cmp	r0, r3
 8001824:	d301      	bcc.n	800182a <__clzsi2+0xe>
 8001826:	0c00      	lsrs	r0, r0, #16
 8001828:	3910      	subs	r1, #16
 800182a:	0a1b      	lsrs	r3, r3, #8
 800182c:	4298      	cmp	r0, r3
 800182e:	d301      	bcc.n	8001834 <__clzsi2+0x18>
 8001830:	0a00      	lsrs	r0, r0, #8
 8001832:	3908      	subs	r1, #8
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	4298      	cmp	r0, r3
 8001838:	d301      	bcc.n	800183e <__clzsi2+0x22>
 800183a:	0900      	lsrs	r0, r0, #4
 800183c:	3904      	subs	r1, #4
 800183e:	a202      	add	r2, pc, #8	; (adr r2, 8001848 <__clzsi2+0x2c>)
 8001840:	5c10      	ldrb	r0, [r2, r0]
 8001842:	1840      	adds	r0, r0, r1
 8001844:	4770      	bx	lr
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	02020304 	.word	0x02020304
 800184c:	01010101 	.word	0x01010101
	...

08001858 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800185e:	1dfb      	adds	r3, r7, #7
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <HAL_Init+0x3c>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_Init+0x3c>)
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	0049      	lsls	r1, r1, #1
 800186e:	430a      	orrs	r2, r1
 8001870:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001872:	2003      	movs	r0, #3
 8001874:	f000 f810 	bl	8001898 <HAL_InitTick>
 8001878:	1e03      	subs	r3, r0, #0
 800187a:	d003      	beq.n	8001884 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800187c:	1dfb      	adds	r3, r7, #7
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	e001      	b.n	8001888 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001884:	f005 ff62 	bl	800774c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001888:	1dfb      	adds	r3, r7, #7
 800188a:	781b      	ldrb	r3, [r3, #0]
}
 800188c:	0018      	movs	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	b002      	add	sp, #8
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40022000 	.word	0x40022000

08001898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018a0:	230f      	movs	r3, #15
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <HAL_InitTick+0x88>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d02b      	beq.n	8001908 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80018b0:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <HAL_InitTick+0x8c>)
 80018b2:	681c      	ldr	r4, [r3, #0]
 80018b4:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <HAL_InitTick+0x88>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	0019      	movs	r1, r3
 80018ba:	23fa      	movs	r3, #250	; 0xfa
 80018bc:	0098      	lsls	r0, r3, #2
 80018be:	f7fe fc2b 	bl	8000118 <__udivsi3>
 80018c2:	0003      	movs	r3, r0
 80018c4:	0019      	movs	r1, r3
 80018c6:	0020      	movs	r0, r4
 80018c8:	f7fe fc26 	bl	8000118 <__udivsi3>
 80018cc:	0003      	movs	r3, r0
 80018ce:	0018      	movs	r0, r3
 80018d0:	f001 fce9 	bl	80032a6 <HAL_SYSTICK_Config>
 80018d4:	1e03      	subs	r3, r0, #0
 80018d6:	d112      	bne.n	80018fe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d80a      	bhi.n	80018f4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	2301      	movs	r3, #1
 80018e2:	425b      	negs	r3, r3
 80018e4:	2200      	movs	r2, #0
 80018e6:	0018      	movs	r0, r3
 80018e8:	f001 fcb8 	bl	800325c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018ec:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <HAL_InitTick+0x90>)
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	e00d      	b.n	8001910 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80018f4:	230f      	movs	r3, #15
 80018f6:	18fb      	adds	r3, r7, r3
 80018f8:	2201      	movs	r2, #1
 80018fa:	701a      	strb	r2, [r3, #0]
 80018fc:	e008      	b.n	8001910 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018fe:	230f      	movs	r3, #15
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	e003      	b.n	8001910 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001908:	230f      	movs	r3, #15
 800190a:	18fb      	adds	r3, r7, r3
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001910:	230f      	movs	r3, #15
 8001912:	18fb      	adds	r3, r7, r3
 8001914:	781b      	ldrb	r3, [r3, #0]
}
 8001916:	0018      	movs	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	b005      	add	sp, #20
 800191c:	bd90      	pop	{r4, r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	20000004 	.word	0x20000004
 8001924:	20000014 	.word	0x20000014
 8001928:	20000000 	.word	0x20000000

0800192c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_IncTick+0x1c>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	001a      	movs	r2, r3
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_IncTick+0x20>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	18d2      	adds	r2, r2, r3
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_IncTick+0x20>)
 800193e:	601a      	str	r2, [r3, #0]
}
 8001940:	46c0      	nop			; (mov r8, r8)
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	20000004 	.word	0x20000004
 800194c:	20000084 	.word	0x20000084

08001950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  return uwTick;
 8001954:	4b02      	ldr	r3, [pc, #8]	; (8001960 <HAL_GetTick+0x10>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	0018      	movs	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	20000084 	.word	0x20000084

08001964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800196c:	f7ff fff0 	bl	8001950 <HAL_GetTick>
 8001970:	0003      	movs	r3, r0
 8001972:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3301      	adds	r3, #1
 800197c:	d005      	beq.n	800198a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <HAL_Delay+0x44>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	001a      	movs	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	189b      	adds	r3, r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	f7ff ffe0 	bl	8001950 <HAL_GetTick>
 8001990:	0002      	movs	r2, r0
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	429a      	cmp	r2, r3
 800199a:	d8f7      	bhi.n	800198c <HAL_Delay+0x28>
  {
  }
}
 800199c:	46c0      	nop			; (mov r8, r8)
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b004      	add	sp, #16
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	20000004 	.word	0x20000004

080019ac <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a06      	ldr	r2, [pc, #24]	; (80019d4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	0019      	movs	r1, r3
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]
}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b002      	add	sp, #8
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	40010000 	.word	0x40010000
 80019d4:	fffff9ff 	.word	0xfffff9ff

080019d8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <LL_ADC_SetCommonPathInternalCh+0x24>)
 80019e8:	401a      	ands	r2, r3
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	601a      	str	r2, [r3, #0]
}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b002      	add	sp, #8
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	fe3fffff 	.word	0xfe3fffff

08001a00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	23e0      	movs	r3, #224	; 0xe0
 8001a0e:	045b      	lsls	r3, r3, #17
 8001a10:	4013      	ands	r3, r2
}
 8001a12:	0018      	movs	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b002      	add	sp, #8
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	2104      	movs	r1, #4
 8001a2e:	400a      	ands	r2, r1
 8001a30:	2107      	movs	r1, #7
 8001a32:	4091      	lsls	r1, r2
 8001a34:	000a      	movs	r2, r1
 8001a36:	43d2      	mvns	r2, r2
 8001a38:	401a      	ands	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2104      	movs	r1, #4
 8001a3e:	400b      	ands	r3, r1
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4099      	lsls	r1, r3
 8001a44:	000b      	movs	r3, r1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001a4c:	46c0      	nop			; (mov r8, r8)
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	b004      	add	sp, #16
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	2104      	movs	r1, #4
 8001a66:	400a      	ands	r2, r1
 8001a68:	2107      	movs	r1, #7
 8001a6a:	4091      	lsls	r1, r2
 8001a6c:	000a      	movs	r2, r1
 8001a6e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2104      	movs	r1, #4
 8001a74:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001a76:	40da      	lsrs	r2, r3
 8001a78:	0013      	movs	r3, r2
}
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b002      	add	sp, #8
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	23c0      	movs	r3, #192	; 0xc0
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	4013      	ands	r3, r2
 8001a94:	d101      	bne.n	8001a9a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b002      	add	sp, #8
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	211f      	movs	r1, #31
 8001ab8:	400a      	ands	r2, r1
 8001aba:	210f      	movs	r1, #15
 8001abc:	4091      	lsls	r1, r2
 8001abe:	000a      	movs	r2, r1
 8001ac0:	43d2      	mvns	r2, r2
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	0e9b      	lsrs	r3, r3, #26
 8001ac8:	210f      	movs	r1, #15
 8001aca:	4019      	ands	r1, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	201f      	movs	r0, #31
 8001ad0:	4003      	ands	r3, r0
 8001ad2:	4099      	lsls	r1, r3
 8001ad4:	000b      	movs	r3, r1
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001adc:	46c0      	nop			; (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b004      	add	sp, #16
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	035b      	lsls	r3, r3, #13
 8001af6:	0b5b      	lsrs	r3, r3, #13
 8001af8:	431a      	orrs	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b002      	add	sp, #8
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	0352      	lsls	r2, r2, #13
 8001b18:	0b52      	lsrs	r2, r2, #13
 8001b1a:	43d2      	mvns	r2, r2
 8001b1c:	401a      	ands	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	46bd      	mov	sp, r7
 8001b26:	b002      	add	sp, #8
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2203      	movs	r2, #3
 8001b38:	4013      	ands	r3, r2
}
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b002      	add	sp, #8
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	0212      	lsls	r2, r2, #8
 8001b58:	43d2      	mvns	r2, r2
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	021b      	lsls	r3, r3, #8
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	400b      	ands	r3, r1
 8001b64:	4904      	ldr	r1, [pc, #16]	; (8001b78 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001b66:	400b      	ands	r3, r1
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b004      	add	sp, #16
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	07ffff00 	.word	0x07ffff00

08001b7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <LL_ADC_EnableInternalRegulator+0x24>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2280      	movs	r2, #128	; 0x80
 8001b8e:	0552      	lsls	r2, r2, #21
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b002      	add	sp, #8
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	6fffffe8 	.word	0x6fffffe8

08001ba4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	055b      	lsls	r3, r3, #21
 8001bb4:	401a      	ands	r2, r3
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	055b      	lsls	r3, r3, #21
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d101      	bne.n	8001bc2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	b002      	add	sp, #8
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4a04      	ldr	r2, [pc, #16]	; (8001bec <LL_ADC_Enable+0x20>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2201      	movs	r2, #1
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001be4:	46c0      	nop			; (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b002      	add	sp, #8
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	7fffffe8 	.word	0x7fffffe8

08001bf0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <LL_ADC_Disable+0x20>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2202      	movs	r2, #2
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c08:	46c0      	nop			; (mov r8, r8)
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b002      	add	sp, #8
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	7fffffe8 	.word	0x7fffffe8

08001c14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2201      	movs	r2, #1
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <LL_ADC_IsEnabled+0x18>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <LL_ADC_IsEnabled+0x1a>
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	0018      	movs	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b002      	add	sp, #8
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2202      	movs	r2, #2
 8001c44:	4013      	ands	r3, r2
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d101      	bne.n	8001c4e <LL_ADC_IsDisableOngoing+0x18>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <LL_ADC_IsDisableOngoing+0x1a>
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	0018      	movs	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b002      	add	sp, #8
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <LL_ADC_REG_StartConversion+0x20>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	2204      	movs	r2, #4
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c70:	46c0      	nop			; (mov r8, r8)
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b002      	add	sp, #8
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	7fffffe8 	.word	0x7fffffe8

08001c7c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2204      	movs	r2, #4
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d101      	bne.n	8001c94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	0018      	movs	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b002      	add	sp, #8
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca8:	231f      	movs	r3, #31
 8001caa:	18fb      	adds	r3, r7, r3
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e17f      	b.n	8001fc6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10a      	bne.n	8001ce4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f004 fdd5 	bl	8006880 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2254      	movs	r2, #84	; 0x54
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7ff ff5b 	bl	8001ba4 <LL_ADC_IsInternalRegulatorEnabled>
 8001cee:	1e03      	subs	r3, r0, #0
 8001cf0:	d115      	bne.n	8001d1e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f7ff ff40 	bl	8001b7c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cfc:	4bb4      	ldr	r3, [pc, #720]	; (8001fd0 <HAL_ADC_Init+0x330>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	49b4      	ldr	r1, [pc, #720]	; (8001fd4 <HAL_ADC_Init+0x334>)
 8001d02:	0018      	movs	r0, r3
 8001d04:	f7fe fa08 	bl	8000118 <__udivsi3>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d10:	e002      	b.n	8001d18 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f9      	bne.n	8001d12 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	0018      	movs	r0, r3
 8001d24:	f7ff ff3e 	bl	8001ba4 <LL_ADC_IsInternalRegulatorEnabled>
 8001d28:	1e03      	subs	r3, r0, #0
 8001d2a:	d10f      	bne.n	8001d4c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	2210      	movs	r2, #16
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d44:	231f      	movs	r3, #31
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f7ff ff93 	bl	8001c7c <LL_ADC_REG_IsConversionOngoing>
 8001d56:	0003      	movs	r3, r0
 8001d58:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	2210      	movs	r2, #16
 8001d60:	4013      	ands	r3, r2
 8001d62:	d000      	beq.n	8001d66 <HAL_ADC_Init+0xc6>
 8001d64:	e122      	b.n	8001fac <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d000      	beq.n	8001d6e <HAL_ADC_Init+0xce>
 8001d6c:	e11e      	b.n	8001fac <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d72:	4a99      	ldr	r2, [pc, #612]	; (8001fd8 <HAL_ADC_Init+0x338>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	2202      	movs	r2, #2
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	0018      	movs	r0, r3
 8001d84:	f7ff ff46 	bl	8001c14 <LL_ADC_IsEnabled>
 8001d88:	1e03      	subs	r3, r0, #0
 8001d8a:	d000      	beq.n	8001d8e <HAL_ADC_Init+0xee>
 8001d8c:	e0ad      	b.n	8001eea <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7e1b      	ldrb	r3, [r3, #24]
 8001d96:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001d98:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	7e5b      	ldrb	r3, [r3, #25]
 8001d9e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001da0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7e9b      	ldrb	r3, [r3, #26]
 8001da6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001da8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d002      	beq.n	8001db8 <HAL_ADC_Init+0x118>
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	015b      	lsls	r3, r3, #5
 8001db6:	e000      	b.n	8001dba <HAL_ADC_Init+0x11a>
 8001db8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001dba:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001dc0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	da04      	bge.n	8001dd4 <HAL_ADC_Init+0x134>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	e001      	b.n	8001dd8 <HAL_ADC_Init+0x138>
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001dd8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	212c      	movs	r1, #44	; 0x2c
 8001dde:	5c5b      	ldrb	r3, [r3, r1]
 8001de0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001de2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2220      	movs	r2, #32
 8001dee:	5c9b      	ldrb	r3, [r3, r2]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d115      	bne.n	8001e20 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7e9b      	ldrb	r3, [r3, #26]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d105      	bne.n	8001e08 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	2280      	movs	r2, #128	; 0x80
 8001e00:	0252      	lsls	r2, r2, #9
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
 8001e06:	e00b      	b.n	8001e20 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e18:	2201      	movs	r2, #1
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00a      	beq.n	8001e3e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e2c:	23e0      	movs	r3, #224	; 0xe0
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001e36:	4313      	orrs	r3, r2
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	4a65      	ldr	r2, [pc, #404]	; (8001fdc <HAL_ADC_Init+0x33c>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	0019      	movs	r1, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	0f9b      	lsrs	r3, r3, #30
 8001e5a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e60:	4313      	orrs	r3, r2
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	223c      	movs	r2, #60	; 0x3c
 8001e6c:	5c9b      	ldrb	r3, [r3, r2]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d111      	bne.n	8001e96 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	0f9b      	lsrs	r3, r3, #30
 8001e78:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e7e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001e84:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001e8a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	2201      	movs	r2, #1
 8001e92:	4313      	orrs	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	4a50      	ldr	r2, [pc, #320]	; (8001fe0 <HAL_ADC_Init+0x340>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	23c0      	movs	r3, #192	; 0xc0
 8001eb2:	061b      	lsls	r3, r3, #24
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d018      	beq.n	8001eea <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	05db      	lsls	r3, r3, #23
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d012      	beq.n	8001eea <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	061b      	lsls	r3, r3, #24
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d00c      	beq.n	8001eea <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001ed0:	4b44      	ldr	r3, [pc, #272]	; (8001fe4 <HAL_ADC_Init+0x344>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a44      	ldr	r2, [pc, #272]	; (8001fe8 <HAL_ADC_Init+0x348>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	0019      	movs	r1, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	23f0      	movs	r3, #240	; 0xf0
 8001ee0:	039b      	lsls	r3, r3, #14
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	4b3f      	ldr	r3, [pc, #252]	; (8001fe4 <HAL_ADC_Init+0x344>)
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	f7ff fd90 	bl	8001a1a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f02:	493a      	ldr	r1, [pc, #232]	; (8001fec <HAL_ADC_Init+0x34c>)
 8001f04:	001a      	movs	r2, r3
 8001f06:	f7ff fd88 	bl	8001a1a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d109      	bne.n	8001f26 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2110      	movs	r1, #16
 8001f1e:	4249      	negs	r1, r1
 8001f20:	430a      	orrs	r2, r1
 8001f22:	629a      	str	r2, [r3, #40]	; 0x28
 8001f24:	e018      	b.n	8001f58 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691a      	ldr	r2, [r3, #16]
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	039b      	lsls	r3, r3, #14
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d112      	bne.n	8001f58 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	221c      	movs	r2, #28
 8001f42:	4013      	ands	r3, r2
 8001f44:	2210      	movs	r2, #16
 8001f46:	4252      	negs	r2, r2
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	0011      	movs	r1, r2
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f7ff fd78 	bl	8001a54 <LL_ADC_GetSamplingTimeCommonChannels>
 8001f64:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d10b      	bne.n	8001f86 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	2203      	movs	r2, #3
 8001f7a:	4393      	bics	r3, r2
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f84:	e01c      	b.n	8001fc0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	2212      	movs	r2, #18
 8001f8c:	4393      	bics	r3, r2
 8001f8e:	2210      	movs	r2, #16
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001fa2:	231f      	movs	r3, #31
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001faa:	e009      	b.n	8001fc0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	2210      	movs	r2, #16
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001fb8:	231f      	movs	r3, #31
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001fc0:	231f      	movs	r3, #31
 8001fc2:	18fb      	adds	r3, r7, r3
 8001fc4:	781b      	ldrb	r3, [r3, #0]
}
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b008      	add	sp, #32
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	20000014 	.word	0x20000014
 8001fd4:	00030d40 	.word	0x00030d40
 8001fd8:	fffffefd 	.word	0xfffffefd
 8001fdc:	ffde0201 	.word	0xffde0201
 8001fe0:	1ffffc02 	.word	0x1ffffc02
 8001fe4:	40012708 	.word	0x40012708
 8001fe8:	ffc3ffff 	.word	0xffc3ffff
 8001fec:	07ffff04 	.word	0x07ffff04

08001ff0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001ff0:	b5b0      	push	{r4, r5, r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f7ff fe3d 	bl	8001c7c <LL_ADC_REG_IsConversionOngoing>
 8002002:	1e03      	subs	r3, r0, #0
 8002004:	d15f      	bne.n	80020c6 <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2254      	movs	r2, #84	; 0x54
 800200a:	5c9b      	ldrb	r3, [r3, r2]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_ADC_Start_IT+0x24>
 8002010:	2302      	movs	r3, #2
 8002012:	e05f      	b.n	80020d4 <HAL_ADC_Start_IT+0xe4>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2254      	movs	r2, #84	; 0x54
 8002018:	2101      	movs	r1, #1
 800201a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800201c:	250f      	movs	r5, #15
 800201e:	197c      	adds	r4, r7, r5
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	0018      	movs	r0, r3
 8002024:	f000 fb68 	bl	80026f8 <ADC_Enable>
 8002028:	0003      	movs	r3, r0
 800202a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800202c:	197b      	adds	r3, r7, r5
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d143      	bne.n	80020bc <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002038:	4a28      	ldr	r2, [pc, #160]	; (80020dc <HAL_ADC_Start_IT+0xec>)
 800203a:	4013      	ands	r3, r2
 800203c:	2280      	movs	r2, #128	; 0x80
 800203e:	0052      	lsls	r2, r2, #1
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	221c      	movs	r2, #28
 8002052:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2254      	movs	r2, #84	; 0x54
 8002058:	2100      	movs	r1, #0
 800205a:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	211c      	movs	r1, #28
 8002068:	438a      	bics	r2, r1
 800206a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	2b08      	cmp	r3, #8
 8002072:	d108      	bne.n	8002086 <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2108      	movs	r1, #8
 8002080:	430a      	orrs	r2, r1
 8002082:	605a      	str	r2, [r3, #4]
          break;
 8002084:	e008      	b.n	8002098 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2104      	movs	r1, #4
 8002092:	430a      	orrs	r2, r1
 8002094:	605a      	str	r2, [r3, #4]
          break;
 8002096:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	2b00      	cmp	r3, #0
 800209e:	d107      	bne.n	80020b0 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2110      	movs	r1, #16
 80020ac:	430a      	orrs	r2, r1
 80020ae:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	0018      	movs	r0, r3
 80020b6:	f7ff fdcf 	bl	8001c58 <LL_ADC_REG_StartConversion>
 80020ba:	e008      	b.n	80020ce <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2254      	movs	r2, #84	; 0x54
 80020c0:	2100      	movs	r1, #0
 80020c2:	5499      	strb	r1, [r3, r2]
 80020c4:	e003      	b.n	80020ce <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020c6:	230f      	movs	r3, #15
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	2202      	movs	r2, #2
 80020cc:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80020ce:	230f      	movs	r3, #15
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	781b      	ldrb	r3, [r3, #0]
}
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b004      	add	sp, #16
 80020da:	bdb0      	pop	{r4, r5, r7, pc}
 80020dc:	fffff0fe 	.word	0xfffff0fe

080020e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80020ee:	0018      	movs	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b002      	add	sp, #8
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	2202      	movs	r2, #2
 8002118:	4013      	ands	r3, r2
 800211a:	d017      	beq.n	800214c <HAL_ADC_IRQHandler+0x54>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2202      	movs	r2, #2
 8002120:	4013      	ands	r3, r2
 8002122:	d013      	beq.n	800214c <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	2210      	movs	r2, #16
 800212a:	4013      	ands	r3, r2
 800212c:	d106      	bne.n	800213c <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	2280      	movs	r2, #128	; 0x80
 8002134:	0112      	lsls	r2, r2, #4
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	0018      	movs	r0, r3
 8002140:	f000 fd62 	bl	8002c08 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2202      	movs	r2, #2
 800214a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	2204      	movs	r2, #4
 8002150:	4013      	ands	r3, r2
 8002152:	d003      	beq.n	800215c <HAL_ADC_IRQHandler+0x64>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2204      	movs	r2, #4
 8002158:	4013      	ands	r3, r2
 800215a:	d107      	bne.n	800216c <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2208      	movs	r2, #8
 8002160:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002162:	d04d      	beq.n	8002200 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2208      	movs	r2, #8
 8002168:	4013      	ands	r3, r2
 800216a:	d049      	beq.n	8002200 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002170:	2210      	movs	r2, #16
 8002172:	4013      	ands	r3, r2
 8002174:	d106      	bne.n	8002184 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	2280      	movs	r2, #128	; 0x80
 800217c:	0092      	lsls	r2, r2, #2
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	0018      	movs	r0, r3
 800218a:	f7ff fc7a 	bl	8001a82 <LL_ADC_REG_IsTriggerSourceSWStart>
 800218e:	1e03      	subs	r3, r0, #0
 8002190:	d02e      	beq.n	80021f0 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	7e9b      	ldrb	r3, [r3, #26]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d12a      	bne.n	80021f0 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2208      	movs	r2, #8
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d123      	bne.n	80021f0 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	0018      	movs	r0, r3
 80021ae:	f7ff fd65 	bl	8001c7c <LL_ADC_REG_IsConversionOngoing>
 80021b2:	1e03      	subs	r3, r0, #0
 80021b4:	d110      	bne.n	80021d8 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	210c      	movs	r1, #12
 80021c2:	438a      	bics	r2, r1
 80021c4:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	4a56      	ldr	r2, [pc, #344]	; (8002324 <HAL_ADC_IRQHandler+0x22c>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	2201      	movs	r2, #1
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	659a      	str	r2, [r3, #88]	; 0x58
 80021d6:	e00b      	b.n	80021f0 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021dc:	2220      	movs	r2, #32
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e8:	2201      	movs	r2, #1
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	0018      	movs	r0, r3
 80021f4:	f004 ff12 	bl	800701c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	220c      	movs	r2, #12
 80021fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	2280      	movs	r2, #128	; 0x80
 8002204:	4013      	ands	r3, r2
 8002206:	d012      	beq.n	800222e <HAL_ADC_IRQHandler+0x136>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2280      	movs	r2, #128	; 0x80
 800220c:	4013      	ands	r3, r2
 800220e:	d00e      	beq.n	800222e <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	2280      	movs	r2, #128	; 0x80
 8002216:	0252      	lsls	r2, r2, #9
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	0018      	movs	r0, r3
 8002222:	f000 f881 	bl	8002328 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2280      	movs	r2, #128	; 0x80
 800222c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4013      	ands	r3, r2
 8002236:	d014      	beq.n	8002262 <HAL_ADC_IRQHandler+0x16a>
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	4013      	ands	r3, r2
 8002240:	d00f      	beq.n	8002262 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	2280      	movs	r2, #128	; 0x80
 8002248:	0292      	lsls	r2, r2, #10
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	0018      	movs	r0, r3
 8002254:	f000 fcc8 	bl	8002be8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2280      	movs	r2, #128	; 0x80
 800225e:	0052      	lsls	r2, r2, #1
 8002260:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4013      	ands	r3, r2
 800226a:	d014      	beq.n	8002296 <HAL_ADC_IRQHandler+0x19e>
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4013      	ands	r3, r2
 8002274:	d00f      	beq.n	8002296 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227a:	2280      	movs	r2, #128	; 0x80
 800227c:	02d2      	lsls	r2, r2, #11
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	0018      	movs	r0, r3
 8002288:	f000 fcb6 	bl	8002bf8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2280      	movs	r2, #128	; 0x80
 8002292:	0092      	lsls	r2, r2, #2
 8002294:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	2210      	movs	r2, #16
 800229a:	4013      	ands	r3, r2
 800229c:	d02b      	beq.n	80022f6 <HAL_ADC_IRQHandler+0x1fe>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2210      	movs	r2, #16
 80022a2:	4013      	ands	r3, r2
 80022a4:	d027      	beq.n	80022f6 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d102      	bne.n	80022b4 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 80022ae:	2301      	movs	r3, #1
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	e008      	b.n	80022c6 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	0018      	movs	r0, r3
 80022ba:	f7ff fc36 	bl	8001b2a <LL_ADC_REG_GetDMATransfer>
 80022be:	1e03      	subs	r3, r0, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 80022c2:	2301      	movs	r3, #1
 80022c4:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d110      	bne.n	80022ee <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d0:	2280      	movs	r2, #128	; 0x80
 80022d2:	00d2      	lsls	r2, r2, #3
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022de:	2202      	movs	r2, #2
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	0018      	movs	r0, r3
 80022ea:	f000 f825 	bl	8002338 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2210      	movs	r2, #16
 80022f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	019b      	lsls	r3, r3, #6
 80022fc:	4013      	ands	r3, r2
 80022fe:	d00d      	beq.n	800231c <HAL_ADC_IRQHandler+0x224>
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	2380      	movs	r3, #128	; 0x80
 8002304:	019b      	lsls	r3, r3, #6
 8002306:	4013      	ands	r3, r2
 8002308:	d008      	beq.n	800231c <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	0018      	movs	r0, r3
 800230e:	f000 fc83 	bl	8002c18 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2280      	movs	r2, #128	; 0x80
 8002318:	0192      	lsls	r2, r2, #6
 800231a:	601a      	str	r2, [r3, #0]
  }
}
 800231c:	46c0      	nop			; (mov r8, r8)
 800231e:	46bd      	mov	sp, r7
 8002320:	b006      	add	sp, #24
 8002322:	bd80      	pop	{r7, pc}
 8002324:	fffffefe 	.word	0xfffffefe

08002328 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002330:	46c0      	nop			; (mov r8, r8)
 8002332:	46bd      	mov	sp, r7
 8002334:	b002      	add	sp, #8
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	b002      	add	sp, #8
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002352:	2317      	movs	r3, #23
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2254      	movs	r2, #84	; 0x54
 8002362:	5c9b      	ldrb	r3, [r3, r2]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_ADC_ConfigChannel+0x24>
 8002368:	2302      	movs	r3, #2
 800236a:	e1c0      	b.n	80026ee <HAL_ADC_ConfigChannel+0x3a6>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2254      	movs	r2, #84	; 0x54
 8002370:	2101      	movs	r1, #1
 8002372:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	0018      	movs	r0, r3
 800237a:	f7ff fc7f 	bl	8001c7c <LL_ADC_REG_IsConversionOngoing>
 800237e:	1e03      	subs	r3, r0, #0
 8002380:	d000      	beq.n	8002384 <HAL_ADC_ConfigChannel+0x3c>
 8002382:	e1a3      	b.n	80026cc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d100      	bne.n	800238e <HAL_ADC_ConfigChannel+0x46>
 800238c:	e143      	b.n	8002616 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	061b      	lsls	r3, r3, #24
 8002396:	429a      	cmp	r2, r3
 8002398:	d004      	beq.n	80023a4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800239e:	4ac1      	ldr	r2, [pc, #772]	; (80026a4 <HAL_ADC_ConfigChannel+0x35c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d108      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	0019      	movs	r1, r3
 80023ae:	0010      	movs	r0, r2
 80023b0:	f7ff fb98 	bl	8001ae4 <LL_ADC_REG_SetSequencerChAdd>
 80023b4:	e0c9      	b.n	800254a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	211f      	movs	r1, #31
 80023c0:	400b      	ands	r3, r1
 80023c2:	210f      	movs	r1, #15
 80023c4:	4099      	lsls	r1, r3
 80023c6:	000b      	movs	r3, r1
 80023c8:	43db      	mvns	r3, r3
 80023ca:	4013      	ands	r3, r2
 80023cc:	0019      	movs	r1, r3
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	035b      	lsls	r3, r3, #13
 80023d4:	0b5b      	lsrs	r3, r3, #13
 80023d6:	d105      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x9c>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	221f      	movs	r2, #31
 80023e0:	4013      	ands	r3, r2
 80023e2:	e098      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1ce>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2201      	movs	r2, #1
 80023ea:	4013      	ands	r3, r2
 80023ec:	d000      	beq.n	80023f0 <HAL_ADC_ConfigChannel+0xa8>
 80023ee:	e091      	b.n	8002514 <HAL_ADC_ConfigChannel+0x1cc>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2202      	movs	r2, #2
 80023f6:	4013      	ands	r3, r2
 80023f8:	d000      	beq.n	80023fc <HAL_ADC_ConfigChannel+0xb4>
 80023fa:	e089      	b.n	8002510 <HAL_ADC_ConfigChannel+0x1c8>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2204      	movs	r2, #4
 8002402:	4013      	ands	r3, r2
 8002404:	d000      	beq.n	8002408 <HAL_ADC_ConfigChannel+0xc0>
 8002406:	e081      	b.n	800250c <HAL_ADC_ConfigChannel+0x1c4>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2208      	movs	r2, #8
 800240e:	4013      	ands	r3, r2
 8002410:	d000      	beq.n	8002414 <HAL_ADC_ConfigChannel+0xcc>
 8002412:	e079      	b.n	8002508 <HAL_ADC_ConfigChannel+0x1c0>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2210      	movs	r2, #16
 800241a:	4013      	ands	r3, r2
 800241c:	d000      	beq.n	8002420 <HAL_ADC_ConfigChannel+0xd8>
 800241e:	e071      	b.n	8002504 <HAL_ADC_ConfigChannel+0x1bc>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2220      	movs	r2, #32
 8002426:	4013      	ands	r3, r2
 8002428:	d000      	beq.n	800242c <HAL_ADC_ConfigChannel+0xe4>
 800242a:	e069      	b.n	8002500 <HAL_ADC_ConfigChannel+0x1b8>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2240      	movs	r2, #64	; 0x40
 8002432:	4013      	ands	r3, r2
 8002434:	d000      	beq.n	8002438 <HAL_ADC_ConfigChannel+0xf0>
 8002436:	e061      	b.n	80024fc <HAL_ADC_ConfigChannel+0x1b4>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2280      	movs	r2, #128	; 0x80
 800243e:	4013      	ands	r3, r2
 8002440:	d000      	beq.n	8002444 <HAL_ADC_ConfigChannel+0xfc>
 8002442:	e059      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x1b0>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4013      	ands	r3, r2
 800244e:	d151      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x1ac>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4013      	ands	r3, r2
 800245a:	d149      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x1a8>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4013      	ands	r3, r2
 8002466:	d141      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x1a4>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	4013      	ands	r3, r2
 8002472:	d139      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x1a0>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	015b      	lsls	r3, r3, #5
 800247c:	4013      	ands	r3, r2
 800247e:	d131      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x19c>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	019b      	lsls	r3, r3, #6
 8002488:	4013      	ands	r3, r2
 800248a:	d129      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x198>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	01db      	lsls	r3, r3, #7
 8002494:	4013      	ands	r3, r2
 8002496:	d121      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x194>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	4013      	ands	r3, r2
 80024a2:	d119      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x190>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	025b      	lsls	r3, r3, #9
 80024ac:	4013      	ands	r3, r2
 80024ae:	d111      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x18c>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	029b      	lsls	r3, r3, #10
 80024b8:	4013      	ands	r3, r2
 80024ba:	d109      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x188>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	02db      	lsls	r3, r3, #11
 80024c4:	4013      	ands	r3, r2
 80024c6:	d001      	beq.n	80024cc <HAL_ADC_ConfigChannel+0x184>
 80024c8:	2312      	movs	r3, #18
 80024ca:	e024      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1ce>
 80024cc:	2300      	movs	r3, #0
 80024ce:	e022      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1ce>
 80024d0:	2311      	movs	r3, #17
 80024d2:	e020      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1ce>
 80024d4:	2310      	movs	r3, #16
 80024d6:	e01e      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1ce>
 80024d8:	230f      	movs	r3, #15
 80024da:	e01c      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1ce>
 80024dc:	230e      	movs	r3, #14
 80024de:	e01a      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1ce>
 80024e0:	230d      	movs	r3, #13
 80024e2:	e018      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1ce>
 80024e4:	230c      	movs	r3, #12
 80024e6:	e016      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1ce>
 80024e8:	230b      	movs	r3, #11
 80024ea:	e014      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1ce>
 80024ec:	230a      	movs	r3, #10
 80024ee:	e012      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1ce>
 80024f0:	2309      	movs	r3, #9
 80024f2:	e010      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1ce>
 80024f4:	2308      	movs	r3, #8
 80024f6:	e00e      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1ce>
 80024f8:	2307      	movs	r3, #7
 80024fa:	e00c      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1ce>
 80024fc:	2306      	movs	r3, #6
 80024fe:	e00a      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1ce>
 8002500:	2305      	movs	r3, #5
 8002502:	e008      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1ce>
 8002504:	2304      	movs	r3, #4
 8002506:	e006      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1ce>
 8002508:	2303      	movs	r3, #3
 800250a:	e004      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1ce>
 800250c:	2302      	movs	r3, #2
 800250e:	e002      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1ce>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1ce>
 8002514:	2300      	movs	r3, #0
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	6852      	ldr	r2, [r2, #4]
 800251a:	201f      	movs	r0, #31
 800251c:	4002      	ands	r2, r0
 800251e:	4093      	lsls	r3, r2
 8002520:	000a      	movs	r2, r1
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	089b      	lsrs	r3, r3, #2
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	429a      	cmp	r2, r3
 8002536:	d808      	bhi.n	800254a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	6859      	ldr	r1, [r3, #4]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	001a      	movs	r2, r3
 8002546:	f7ff faad 	bl	8001aa4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6819      	ldr	r1, [r3, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	001a      	movs	r2, r3
 8002558:	f7ff faf4 	bl	8001b44 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	db00      	blt.n	8002566 <HAL_ADC_ConfigChannel+0x21e>
 8002564:	e0bc      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002566:	4b50      	ldr	r3, [pc, #320]	; (80026a8 <HAL_ADC_ConfigChannel+0x360>)
 8002568:	0018      	movs	r0, r3
 800256a:	f7ff fa49 	bl	8001a00 <LL_ADC_GetCommonPathInternalCh>
 800256e:	0003      	movs	r3, r0
 8002570:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a4d      	ldr	r2, [pc, #308]	; (80026ac <HAL_ADC_ConfigChannel+0x364>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d122      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	041b      	lsls	r3, r3, #16
 8002582:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002584:	d11d      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	2280      	movs	r2, #128	; 0x80
 800258a:	0412      	lsls	r2, r2, #16
 800258c:	4313      	orrs	r3, r2
 800258e:	4a46      	ldr	r2, [pc, #280]	; (80026a8 <HAL_ADC_ConfigChannel+0x360>)
 8002590:	0019      	movs	r1, r3
 8002592:	0010      	movs	r0, r2
 8002594:	f7ff fa20 	bl	80019d8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002598:	4b45      	ldr	r3, [pc, #276]	; (80026b0 <HAL_ADC_ConfigChannel+0x368>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4945      	ldr	r1, [pc, #276]	; (80026b4 <HAL_ADC_ConfigChannel+0x36c>)
 800259e:	0018      	movs	r0, r3
 80025a0:	f7fd fdba 	bl	8000118 <__udivsi3>
 80025a4:	0003      	movs	r3, r0
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	0013      	movs	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	189b      	adds	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025b2:	e002      	b.n	80025ba <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f9      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025c0:	e08e      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a3c      	ldr	r2, [pc, #240]	; (80026b8 <HAL_ADC_ConfigChannel+0x370>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d10e      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	045b      	lsls	r3, r3, #17
 80025d2:	4013      	ands	r3, r2
 80025d4:	d109      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	2280      	movs	r2, #128	; 0x80
 80025da:	0452      	lsls	r2, r2, #17
 80025dc:	4313      	orrs	r3, r2
 80025de:	4a32      	ldr	r2, [pc, #200]	; (80026a8 <HAL_ADC_ConfigChannel+0x360>)
 80025e0:	0019      	movs	r1, r3
 80025e2:	0010      	movs	r0, r2
 80025e4:	f7ff f9f8 	bl	80019d8 <LL_ADC_SetCommonPathInternalCh>
 80025e8:	e07a      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a33      	ldr	r2, [pc, #204]	; (80026bc <HAL_ADC_ConfigChannel+0x374>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d000      	beq.n	80025f6 <HAL_ADC_ConfigChannel+0x2ae>
 80025f4:	e074      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	03db      	lsls	r3, r3, #15
 80025fc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80025fe:	d000      	beq.n	8002602 <HAL_ADC_ConfigChannel+0x2ba>
 8002600:	e06e      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	2280      	movs	r2, #128	; 0x80
 8002606:	03d2      	lsls	r2, r2, #15
 8002608:	4313      	orrs	r3, r2
 800260a:	4a27      	ldr	r2, [pc, #156]	; (80026a8 <HAL_ADC_ConfigChannel+0x360>)
 800260c:	0019      	movs	r1, r3
 800260e:	0010      	movs	r0, r2
 8002610:	f7ff f9e2 	bl	80019d8 <LL_ADC_SetCommonPathInternalCh>
 8002614:	e064      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	061b      	lsls	r3, r3, #24
 800261e:	429a      	cmp	r2, r3
 8002620:	d004      	beq.n	800262c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002626:	4a1f      	ldr	r2, [pc, #124]	; (80026a4 <HAL_ADC_ConfigChannel+0x35c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d107      	bne.n	800263c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	0019      	movs	r1, r3
 8002636:	0010      	movs	r0, r2
 8002638:	f7ff fa65 	bl	8001b06 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	da4d      	bge.n	80026e0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002644:	4b18      	ldr	r3, [pc, #96]	; (80026a8 <HAL_ADC_ConfigChannel+0x360>)
 8002646:	0018      	movs	r0, r3
 8002648:	f7ff f9da 	bl	8001a00 <LL_ADC_GetCommonPathInternalCh>
 800264c:	0003      	movs	r3, r0
 800264e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a15      	ldr	r2, [pc, #84]	; (80026ac <HAL_ADC_ConfigChannel+0x364>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d108      	bne.n	800266c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4a18      	ldr	r2, [pc, #96]	; (80026c0 <HAL_ADC_ConfigChannel+0x378>)
 800265e:	4013      	ands	r3, r2
 8002660:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <HAL_ADC_ConfigChannel+0x360>)
 8002662:	0019      	movs	r1, r3
 8002664:	0010      	movs	r0, r2
 8002666:	f7ff f9b7 	bl	80019d8 <LL_ADC_SetCommonPathInternalCh>
 800266a:	e039      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a11      	ldr	r2, [pc, #68]	; (80026b8 <HAL_ADC_ConfigChannel+0x370>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d108      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <HAL_ADC_ConfigChannel+0x37c>)
 800267a:	4013      	ands	r3, r2
 800267c:	4a0a      	ldr	r2, [pc, #40]	; (80026a8 <HAL_ADC_ConfigChannel+0x360>)
 800267e:	0019      	movs	r1, r3
 8002680:	0010      	movs	r0, r2
 8002682:	f7ff f9a9 	bl	80019d8 <LL_ADC_SetCommonPathInternalCh>
 8002686:	e02b      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0b      	ldr	r2, [pc, #44]	; (80026bc <HAL_ADC_ConfigChannel+0x374>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d126      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4a0c      	ldr	r2, [pc, #48]	; (80026c8 <HAL_ADC_ConfigChannel+0x380>)
 8002696:	4013      	ands	r3, r2
 8002698:	4a03      	ldr	r2, [pc, #12]	; (80026a8 <HAL_ADC_ConfigChannel+0x360>)
 800269a:	0019      	movs	r1, r3
 800269c:	0010      	movs	r0, r2
 800269e:	f7ff f99b 	bl	80019d8 <LL_ADC_SetCommonPathInternalCh>
 80026a2:	e01d      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x398>
 80026a4:	80000004 	.word	0x80000004
 80026a8:	40012708 	.word	0x40012708
 80026ac:	b0001000 	.word	0xb0001000
 80026b0:	20000014 	.word	0x20000014
 80026b4:	00030d40 	.word	0x00030d40
 80026b8:	b8004000 	.word	0xb8004000
 80026bc:	b4002000 	.word	0xb4002000
 80026c0:	ff7fffff 	.word	0xff7fffff
 80026c4:	feffffff 	.word	0xfeffffff
 80026c8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d0:	2220      	movs	r2, #32
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80026d8:	2317      	movs	r3, #23
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2254      	movs	r2, #84	; 0x54
 80026e4:	2100      	movs	r1, #0
 80026e6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80026e8:	2317      	movs	r3, #23
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	781b      	ldrb	r3, [r3, #0]
}
 80026ee:	0018      	movs	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	b006      	add	sp, #24
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	46c0      	nop			; (mov r8, r8)

080026f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002700:	2300      	movs	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	0018      	movs	r0, r3
 800270a:	f7ff fa83 	bl	8001c14 <LL_ADC_IsEnabled>
 800270e:	1e03      	subs	r3, r0, #0
 8002710:	d000      	beq.n	8002714 <ADC_Enable+0x1c>
 8002712:	e069      	b.n	80027e8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	4a36      	ldr	r2, [pc, #216]	; (80027f4 <ADC_Enable+0xfc>)
 800271c:	4013      	ands	r3, r2
 800271e:	d00d      	beq.n	800273c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	2210      	movs	r2, #16
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002730:	2201      	movs	r2, #1
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e056      	b.n	80027ea <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	0018      	movs	r0, r3
 8002742:	f7ff fa43 	bl	8001bcc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002746:	4b2c      	ldr	r3, [pc, #176]	; (80027f8 <ADC_Enable+0x100>)
 8002748:	0018      	movs	r0, r3
 800274a:	f7ff f959 	bl	8001a00 <LL_ADC_GetCommonPathInternalCh>
 800274e:	0002      	movs	r2, r0
 8002750:	2380      	movs	r3, #128	; 0x80
 8002752:	041b      	lsls	r3, r3, #16
 8002754:	4013      	ands	r3, r2
 8002756:	d00f      	beq.n	8002778 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002758:	4b28      	ldr	r3, [pc, #160]	; (80027fc <ADC_Enable+0x104>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4928      	ldr	r1, [pc, #160]	; (8002800 <ADC_Enable+0x108>)
 800275e:	0018      	movs	r0, r3
 8002760:	f7fd fcda 	bl	8000118 <__udivsi3>
 8002764:	0003      	movs	r3, r0
 8002766:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002768:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800276a:	e002      	b.n	8002772 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	3b01      	subs	r3, #1
 8002770:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f9      	bne.n	800276c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7e5b      	ldrb	r3, [r3, #25]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d033      	beq.n	80027e8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002780:	f7ff f8e6 	bl	8001950 <HAL_GetTick>
 8002784:	0003      	movs	r3, r0
 8002786:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002788:	e027      	b.n	80027da <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	0018      	movs	r0, r3
 8002790:	f7ff fa40 	bl	8001c14 <LL_ADC_IsEnabled>
 8002794:	1e03      	subs	r3, r0, #0
 8002796:	d104      	bne.n	80027a2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	0018      	movs	r0, r3
 800279e:	f7ff fa15 	bl	8001bcc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027a2:	f7ff f8d5 	bl	8001950 <HAL_GetTick>
 80027a6:	0002      	movs	r2, r0
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d914      	bls.n	80027da <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2201      	movs	r2, #1
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d00d      	beq.n	80027da <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	2210      	movs	r2, #16
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	2201      	movs	r2, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e007      	b.n	80027ea <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2201      	movs	r2, #1
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d1d0      	bne.n	800278a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	0018      	movs	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	b004      	add	sp, #16
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	80000017 	.word	0x80000017
 80027f8:	40012708 	.word	0x40012708
 80027fc:	20000014 	.word	0x20000014
 8002800:	00030d40 	.word	0x00030d40

08002804 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	0018      	movs	r0, r3
 8002812:	f7ff fa10 	bl	8001c36 <LL_ADC_IsDisableOngoing>
 8002816:	0003      	movs	r3, r0
 8002818:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	0018      	movs	r0, r3
 8002820:	f7ff f9f8 	bl	8001c14 <LL_ADC_IsEnabled>
 8002824:	1e03      	subs	r3, r0, #0
 8002826:	d046      	beq.n	80028b6 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d143      	bne.n	80028b6 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2205      	movs	r2, #5
 8002836:	4013      	ands	r3, r2
 8002838:	2b01      	cmp	r3, #1
 800283a:	d10d      	bne.n	8002858 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	0018      	movs	r0, r3
 8002842:	f7ff f9d5 	bl	8001bf0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2203      	movs	r2, #3
 800284c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800284e:	f7ff f87f 	bl	8001950 <HAL_GetTick>
 8002852:	0003      	movs	r3, r0
 8002854:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002856:	e028      	b.n	80028aa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285c:	2210      	movs	r2, #16
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002868:	2201      	movs	r2, #1
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e021      	b.n	80028b8 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002874:	f7ff f86c 	bl	8001950 <HAL_GetTick>
 8002878:	0002      	movs	r2, r0
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d913      	bls.n	80028aa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2201      	movs	r2, #1
 800288a:	4013      	ands	r3, r2
 800288c:	d00d      	beq.n	80028aa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	2210      	movs	r2, #16
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289e:	2201      	movs	r2, #1
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e006      	b.n	80028b8 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2201      	movs	r2, #1
 80028b2:	4013      	ands	r3, r2
 80028b4:	d1de      	bne.n	8002874 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	0018      	movs	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	b004      	add	sp, #16
 80028be:	bd80      	pop	{r7, pc}

080028c0 <LL_ADC_GetCommonClock>:
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	23f0      	movs	r3, #240	; 0xf0
 80028ce:	039b      	lsls	r3, r3, #14
 80028d0:	4013      	ands	r3, r2
}
 80028d2:	0018      	movs	r0, r3
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b002      	add	sp, #8
 80028d8:	bd80      	pop	{r7, pc}

080028da <LL_ADC_GetClock>:
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	0f9b      	lsrs	r3, r3, #30
 80028e8:	079b      	lsls	r3, r3, #30
}
 80028ea:	0018      	movs	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b002      	add	sp, #8
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <LL_ADC_SetCalibrationFactor>:
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	22b4      	movs	r2, #180	; 0xb4
 8002900:	589b      	ldr	r3, [r3, r2]
 8002902:	227f      	movs	r2, #127	; 0x7f
 8002904:	4393      	bics	r3, r2
 8002906:	001a      	movs	r2, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	21b4      	movs	r1, #180	; 0xb4
 8002910:	505a      	str	r2, [r3, r1]
}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	46bd      	mov	sp, r7
 8002916:	b002      	add	sp, #8
 8002918:	bd80      	pop	{r7, pc}

0800291a <LL_ADC_GetCalibrationFactor>:
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	22b4      	movs	r2, #180	; 0xb4
 8002926:	589b      	ldr	r3, [r3, r2]
 8002928:	227f      	movs	r2, #127	; 0x7f
 800292a:	4013      	ands	r3, r2
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	b002      	add	sp, #8
 8002932:	bd80      	pop	{r7, pc}

08002934 <LL_ADC_Enable>:
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a04      	ldr	r2, [pc, #16]	; (8002954 <LL_ADC_Enable+0x20>)
 8002942:	4013      	ands	r3, r2
 8002944:	2201      	movs	r2, #1
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	609a      	str	r2, [r3, #8]
}
 800294c:	46c0      	nop			; (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	b002      	add	sp, #8
 8002952:	bd80      	pop	{r7, pc}
 8002954:	7fffffe8 	.word	0x7fffffe8

08002958 <LL_ADC_Disable>:
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <LL_ADC_Disable+0x20>)
 8002966:	4013      	ands	r3, r2
 8002968:	2202      	movs	r2, #2
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	609a      	str	r2, [r3, #8]
}
 8002970:	46c0      	nop			; (mov r8, r8)
 8002972:	46bd      	mov	sp, r7
 8002974:	b002      	add	sp, #8
 8002976:	bd80      	pop	{r7, pc}
 8002978:	7fffffe8 	.word	0x7fffffe8

0800297c <LL_ADC_IsEnabled>:
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2201      	movs	r2, #1
 800298a:	4013      	ands	r3, r2
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <LL_ADC_IsEnabled+0x18>
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <LL_ADC_IsEnabled+0x1a>
 8002994:	2300      	movs	r3, #0
}
 8002996:	0018      	movs	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	b002      	add	sp, #8
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <LL_ADC_StartCalibration>:
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <LL_ADC_StartCalibration+0x24>)
 80029ae:	4013      	ands	r3, r2
 80029b0:	2280      	movs	r2, #128	; 0x80
 80029b2:	0612      	lsls	r2, r2, #24
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	609a      	str	r2, [r3, #8]
}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	46bd      	mov	sp, r7
 80029be:	b002      	add	sp, #8
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	7fffffe8 	.word	0x7fffffe8

080029c8 <LL_ADC_IsCalibrationOnGoing>:
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	0fdb      	lsrs	r3, r3, #31
 80029d6:	07da      	lsls	r2, r3, #31
 80029d8:	2380      	movs	r3, #128	; 0x80
 80029da:	061b      	lsls	r3, r3, #24
 80029dc:	429a      	cmp	r2, r3
 80029de:	d101      	bne.n	80029e4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	0018      	movs	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b002      	add	sp, #8
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b08b      	sub	sp, #44	; 0x2c
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2254      	movs	r2, #84	; 0x54
 8002a04:	5c9b      	ldrb	r3, [r3, r2]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_ADCEx_Calibration_Start+0x1e>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e0dd      	b.n	8002bca <HAL_ADCEx_Calibration_Start+0x1da>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2254      	movs	r2, #84	; 0x54
 8002a12:	2101      	movs	r1, #1
 8002a14:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002a16:	231f      	movs	r3, #31
 8002a18:	18fc      	adds	r4, r7, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7ff fef1 	bl	8002804 <ADC_Disable>
 8002a22:	0003      	movs	r3, r0
 8002a24:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f7ff ffa6 	bl	800297c <LL_ADC_IsEnabled>
 8002a30:	1e03      	subs	r3, r0, #0
 8002a32:	d000      	beq.n	8002a36 <HAL_ADCEx_Calibration_Start+0x46>
 8002a34:	e0bc      	b.n	8002bb0 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3a:	4a66      	ldr	r2, [pc, #408]	; (8002bd4 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2202      	movs	r2, #2
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4a62      	ldr	r2, [pc, #392]	; (8002bd8 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	495f      	ldr	r1, [pc, #380]	; (8002bdc <HAL_ADCEx_Calibration_Start+0x1ec>)
 8002a5e:	400a      	ands	r2, r1
 8002a60:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002a62:	2300      	movs	r3, #0
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
 8002a66:	e02d      	b.n	8002ac4 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f7ff ff97 	bl	80029a0 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002a72:	e014      	b.n	8002a9e <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	3301      	adds	r3, #1
 8002a78:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4a58      	ldr	r2, [pc, #352]	; (8002be0 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d90d      	bls.n	8002a9e <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a86:	2212      	movs	r2, #18
 8002a88:	4393      	bics	r3, r2
 8002a8a:	2210      	movs	r2, #16
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2254      	movs	r2, #84	; 0x54
 8002a96:	2100      	movs	r1, #0
 8002a98:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e095      	b.n	8002bca <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f7ff ff90 	bl	80029c8 <LL_ADC_IsCalibrationOnGoing>
 8002aa8:	1e03      	subs	r3, r0, #0
 8002aaa:	d1e3      	bne.n	8002a74 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f7ff ff32 	bl	800291a <LL_ADC_GetCalibrationFactor>
 8002ab6:	0002      	movs	r2, r0
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	189b      	adds	r3, r3, r2
 8002abc:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	2b07      	cmp	r3, #7
 8002ac8:	d9ce      	bls.n	8002a68 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002aca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002acc:	6a38      	ldr	r0, [r7, #32]
 8002ace:	f7fd fb23 	bl	8000118 <__udivsi3>
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	0018      	movs	r0, r3
 8002adc:	f7ff ff2a 	bl	8002934 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f7ff fef8 	bl	80028da <LL_ADC_GetClock>
 8002aea:	1e03      	subs	r3, r0, #0
 8002aec:	d11b      	bne.n	8002b26 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002aee:	4b3d      	ldr	r3, [pc, #244]	; (8002be4 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8002af0:	0018      	movs	r0, r3
 8002af2:	f7ff fee5 	bl	80028c0 <LL_ADC_GetCommonClock>
 8002af6:	0003      	movs	r3, r0
 8002af8:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	23e0      	movs	r3, #224	; 0xe0
 8002afe:	035b      	lsls	r3, r3, #13
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d310      	bcc.n	8002b26 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	0c9b      	lsrs	r3, r3, #18
 8002b08:	3b03      	subs	r3, #3
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	0013      	movs	r3, r2
 8002b10:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	085b      	lsrs	r3, r3, #1
 8002b16:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8002b18:	e002      	b.n	8002b20 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f9      	bne.n	8002b1a <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6a3a      	ldr	r2, [r7, #32]
 8002b2c:	0011      	movs	r1, r2
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f7ff fedf 	bl	80028f2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f7ff ff0d 	bl	8002958 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b3e:	f7fe ff07 	bl	8001950 <HAL_GetTick>
 8002b42:	0003      	movs	r3, r0
 8002b44:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b46:	e01b      	b.n	8002b80 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b48:	f7fe ff02 	bl	8001950 <HAL_GetTick>
 8002b4c:	0002      	movs	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d914      	bls.n	8002b80 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f7ff ff0e 	bl	800297c <LL_ADC_IsEnabled>
 8002b60:	1e03      	subs	r3, r0, #0
 8002b62:	d00d      	beq.n	8002b80 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b68:	2210      	movs	r2, #16
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b74:	2201      	movs	r2, #1
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e024      	b.n	8002bca <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	0018      	movs	r0, r3
 8002b86:	f7ff fef9 	bl	800297c <LL_ADC_IsEnabled>
 8002b8a:	1e03      	subs	r3, r0, #0
 8002b8c:	d1dc      	bne.n	8002b48 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68d9      	ldr	r1, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	4393      	bics	r3, r2
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	659a      	str	r2, [r3, #88]	; 0x58
 8002bae:	e005      	b.n	8002bbc <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	2210      	movs	r2, #16
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2254      	movs	r2, #84	; 0x54
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002bc4:	231f      	movs	r3, #31
 8002bc6:	18fb      	adds	r3, r7, r3
 8002bc8:	781b      	ldrb	r3, [r3, #0]
}
 8002bca:	0018      	movs	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	b00b      	add	sp, #44	; 0x2c
 8002bd0:	bd90      	pop	{r4, r7, pc}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	fffffefd 	.word	0xfffffefd
 8002bd8:	00008003 	.word	0x00008003
 8002bdc:	ffff7ffc 	.word	0xffff7ffc
 8002be0:	0002f1ff 	.word	0x0002f1ff
 8002be4:	40012708 	.word	0x40012708

08002be8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b002      	add	sp, #8
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002c00:	46c0      	nop			; (mov r8, r8)
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b002      	add	sp, #8
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002c10:	46c0      	nop			; (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b002      	add	sp, #8
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002c20:	46c0      	nop			; (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b002      	add	sp, #8
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002c30:	4a05      	ldr	r2, [pc, #20]	; (8002c48 <LL_EXTI_EnableIT_0_31+0x20>)
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	58d2      	ldr	r2, [r2, r3]
 8002c36:	4904      	ldr	r1, [pc, #16]	; (8002c48 <LL_EXTI_EnableIT_0_31+0x20>)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	2280      	movs	r2, #128	; 0x80
 8002c3e:	508b      	str	r3, [r1, r2]
}
 8002c40:	46c0      	nop			; (mov r8, r8)
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b002      	add	sp, #8
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40021800 	.word	0x40021800

08002c4c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002c54:	4a06      	ldr	r2, [pc, #24]	; (8002c70 <LL_EXTI_DisableIT_0_31+0x24>)
 8002c56:	2380      	movs	r3, #128	; 0x80
 8002c58:	58d3      	ldr	r3, [r2, r3]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	43d2      	mvns	r2, r2
 8002c5e:	4904      	ldr	r1, [pc, #16]	; (8002c70 <LL_EXTI_DisableIT_0_31+0x24>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	2280      	movs	r2, #128	; 0x80
 8002c64:	508b      	str	r3, [r1, r2]
}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	b002      	add	sp, #8
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	40021800 	.word	0x40021800

08002c74 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002c7c:	4a05      	ldr	r2, [pc, #20]	; (8002c94 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002c7e:	2384      	movs	r3, #132	; 0x84
 8002c80:	58d2      	ldr	r2, [r2, r3]
 8002c82:	4904      	ldr	r1, [pc, #16]	; (8002c94 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	2284      	movs	r2, #132	; 0x84
 8002c8a:	508b      	str	r3, [r1, r2]

}
 8002c8c:	46c0      	nop			; (mov r8, r8)
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b002      	add	sp, #8
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40021800 	.word	0x40021800

08002c98 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002ca0:	4a06      	ldr	r2, [pc, #24]	; (8002cbc <LL_EXTI_DisableEvent_0_31+0x24>)
 8002ca2:	2384      	movs	r3, #132	; 0x84
 8002ca4:	58d3      	ldr	r3, [r2, r3]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	43d2      	mvns	r2, r2
 8002caa:	4904      	ldr	r1, [pc, #16]	; (8002cbc <LL_EXTI_DisableEvent_0_31+0x24>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	2284      	movs	r2, #132	; 0x84
 8002cb0:	508b      	str	r3, [r1, r2]
}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	b002      	add	sp, #8
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	40021800 	.word	0x40021800

08002cc0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002cc8:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002cca:	6819      	ldr	r1, [r3, #0]
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]

}
 8002cd4:	46c0      	nop			; (mov r8, r8)
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b002      	add	sp, #8
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40021800 	.word	0x40021800

08002ce0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	43d9      	mvns	r1, r3
 8002cf0:	4b03      	ldr	r3, [pc, #12]	; (8002d00 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002cf2:	400a      	ands	r2, r1
 8002cf4:	601a      	str	r2, [r3, #0]

}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b002      	add	sp, #8
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	40021800 	.word	0x40021800

08002d04 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	4b03      	ldr	r3, [pc, #12]	; (8002d20 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	605a      	str	r2, [r3, #4]
}
 8002d18:	46c0      	nop			; (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b002      	add	sp, #8
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021800 	.word	0x40021800

08002d24 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	43d9      	mvns	r1, r3
 8002d34:	4b03      	ldr	r3, [pc, #12]	; (8002d44 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002d36:	400a      	ands	r2, r1
 8002d38:	605a      	str	r2, [r3, #4]
}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	b002      	add	sp, #8
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	40021800 	.word	0x40021800

08002d48 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8002d50:	4b03      	ldr	r3, [pc, #12]	; (8002d60 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	611a      	str	r2, [r3, #16]
}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b002      	add	sp, #8
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	40021800 	.word	0x40021800

08002d64 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8002d6c:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	60da      	str	r2, [r3, #12]
}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b002      	add	sp, #8
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	40021800 	.word	0x40021800

08002d80 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002d8c:	211f      	movs	r1, #31
 8002d8e:	187b      	adds	r3, r7, r1
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
  __IO uint32_t *comp_common_odd;
  __IO uint32_t *comp_common_even;
#endif /* COMP3 */

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d103      	bne.n	8002da2 <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 8002d9a:	187b      	adds	r3, r7, r1
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
 8002da0:	e13d      	b.n	800301e <HAL_COMP_Init+0x29e>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	0fdb      	lsrs	r3, r3, #31
 8002daa:	07da      	lsls	r2, r3, #31
 8002dac:	2380      	movs	r3, #128	; 0x80
 8002dae:	061b      	lsls	r3, r3, #24
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d104      	bne.n	8002dbe <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8002db4:	231f      	movs	r3, #31
 8002db6:	18fb      	adds	r3, r7, r3
 8002db8:	2201      	movs	r2, #1
 8002dba:	701a      	strb	r2, [r3, #0]
 8002dbc:	e12f      	b.n	800301e <HAL_COMP_Init+0x29e>
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }


    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2229      	movs	r2, #41	; 0x29
 8002dc2:	5c9b      	ldrb	r3, [r3, r2]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10a      	bne.n	8002de0 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2228      	movs	r2, #40	; 0x28
 8002dce:	2100      	movs	r1, #0
 8002dd0:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f003 fe34 	bl	8006a48 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2230      	movs	r2, #48	; 0x30
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InputMinus
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a85      	ldr	r2, [pc, #532]	; (800302c <HAL_COMP_Init+0x2ac>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d10d      	bne.n	8002e4e <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8002e32:	4b7f      	ldr	r3, [pc, #508]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	4b7e      	ldr	r3, [pc, #504]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002e38:	497e      	ldr	r1, [pc, #504]	; (8003034 <HAL_COMP_Init+0x2b4>)
 8002e3a:	400a      	ands	r2, r1
 8002e3c:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8002e3e:	4b7c      	ldr	r3, [pc, #496]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	4b7b      	ldr	r3, [pc, #492]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002e44:	2180      	movs	r1, #128	; 0x80
 8002e46:	0109      	lsls	r1, r1, #4
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	605a      	str	r2, [r3, #4]
 8002e4c:	e01f      	b.n	8002e8e <HAL_COMP_Init+0x10e>
    }
    else if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	23c0      	movs	r3, #192	; 0xc0
 8002e54:	015b      	lsls	r3, r3, #5
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d10d      	bne.n	8002e76 <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8002e5a:	4b75      	ldr	r3, [pc, #468]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	4b74      	ldr	r3, [pc, #464]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002e60:	2180      	movs	r1, #128	; 0x80
 8002e62:	0109      	lsls	r1, r1, #4
 8002e64:	430a      	orrs	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8002e68:	4b71      	ldr	r3, [pc, #452]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	4b70      	ldr	r3, [pc, #448]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002e6e:	4971      	ldr	r1, [pc, #452]	; (8003034 <HAL_COMP_Init+0x2b4>)
 8002e70:	400a      	ands	r2, r1
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	e00b      	b.n	8002e8e <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8002e76:	4b6e      	ldr	r3, [pc, #440]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	4b6d      	ldr	r3, [pc, #436]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002e7c:	496d      	ldr	r1, [pc, #436]	; (8003034 <HAL_COMP_Init+0x2b4>)
 8002e7e:	400a      	ands	r2, r1
 8002e80:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8002e82:	4b6b      	ldr	r3, [pc, #428]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	4b6a      	ldr	r3, [pc, #424]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002e88:	496a      	ldr	r1, [pc, #424]	; (8003034 <HAL_COMP_Init+0x2b4>)
 8002e8a:	400a      	ands	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	22a0      	movs	r2, #160	; 0xa0
 8002e94:	01d2      	lsls	r2, r2, #7
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d017      	beq.n	8002eca <HAL_COMP_Init+0x14a>
 8002e9a:	22a0      	movs	r2, #160	; 0xa0
 8002e9c:	01d2      	lsls	r2, r2, #7
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d830      	bhi.n	8002f04 <HAL_COMP_Init+0x184>
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d01f      	beq.n	8002ee6 <HAL_COMP_Init+0x166>
 8002ea6:	2280      	movs	r2, #128	; 0x80
 8002ea8:	01d2      	lsls	r2, r2, #7
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d12a      	bne.n	8002f04 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8002eae:	4b60      	ldr	r3, [pc, #384]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4b5f      	ldr	r3, [pc, #380]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002eb4:	2180      	movs	r1, #128	; 0x80
 8002eb6:	01c9      	lsls	r1, r1, #7
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8002ebc:	4b5c      	ldr	r3, [pc, #368]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	4b5b      	ldr	r3, [pc, #364]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002ec2:	495d      	ldr	r1, [pc, #372]	; (8003038 <HAL_COMP_Init+0x2b8>)
 8002ec4:	400a      	ands	r2, r1
 8002ec6:	605a      	str	r2, [r3, #4]
        break;
 8002ec8:	e029      	b.n	8002f1e <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8002eca:	4b59      	ldr	r3, [pc, #356]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	4b58      	ldr	r3, [pc, #352]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002ed0:	4959      	ldr	r1, [pc, #356]	; (8003038 <HAL_COMP_Init+0x2b8>)
 8002ed2:	400a      	ands	r2, r1
 8002ed4:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8002ed6:	4b56      	ldr	r3, [pc, #344]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	4b55      	ldr	r3, [pc, #340]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002edc:	2180      	movs	r1, #128	; 0x80
 8002ede:	01c9      	lsls	r1, r1, #7
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	605a      	str	r2, [r3, #4]
        break;
 8002ee4:	e01b      	b.n	8002f1e <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8002ee6:	4b52      	ldr	r3, [pc, #328]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4b51      	ldr	r3, [pc, #324]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002eec:	2180      	movs	r1, #128	; 0x80
 8002eee:	01c9      	lsls	r1, r1, #7
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8002ef4:	4b4e      	ldr	r3, [pc, #312]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	4b4d      	ldr	r3, [pc, #308]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002efa:	2180      	movs	r1, #128	; 0x80
 8002efc:	01c9      	lsls	r1, r1, #7
 8002efe:	430a      	orrs	r2, r1
 8002f00:	605a      	str	r2, [r3, #4]
        break;
 8002f02:	e00c      	b.n	8002f1e <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8002f04:	4b4a      	ldr	r3, [pc, #296]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4b49      	ldr	r3, [pc, #292]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002f0a:	494b      	ldr	r1, [pc, #300]	; (8003038 <HAL_COMP_Init+0x2b8>)
 8002f0c:	400a      	ands	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8002f10:	4b47      	ldr	r3, [pc, #284]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	4b46      	ldr	r3, [pc, #280]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002f16:	4948      	ldr	r1, [pc, #288]	; (8003038 <HAL_COMP_Init+0x2b8>)
 8002f18:	400a      	ands	r2, r1
 8002f1a:	605a      	str	r2, [r3, #4]
        break;
 8002f1c:	46c0      	nop			; (mov r8, r8)
#endif /* COMP3 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2230      	movs	r2, #48	; 0x30
 8002f26:	4013      	ands	r3, r2
 8002f28:	d016      	beq.n	8002f58 <HAL_COMP_Init+0x1d8>
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d113      	bne.n	8002f58 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f30:	4b42      	ldr	r3, [pc, #264]	; (800303c <HAL_COMP_Init+0x2bc>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4942      	ldr	r1, [pc, #264]	; (8003040 <HAL_COMP_Init+0x2c0>)
 8002f36:	0018      	movs	r0, r3
 8002f38:	f7fd f8ee 	bl	8000118 <__udivsi3>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	0013      	movs	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	189b      	adds	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8002f4a:	e002      	b.n	8002f52 <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f9      	bne.n	8002f4c <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a34      	ldr	r2, [pc, #208]	; (8003030 <HAL_COMP_Init+0x2b0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d102      	bne.n	8002f68 <HAL_COMP_Init+0x1e8>
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	029b      	lsls	r3, r3, #10
 8002f66:	e001      	b.n	8002f6c <HAL_COMP_Init+0x1ec>
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	02db      	lsls	r3, r3, #11
 8002f6c:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	2203      	movs	r2, #3
 8002f74:	4013      	ands	r3, r2
 8002f76:	d040      	beq.n	8002ffa <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	2210      	movs	r2, #16
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d004      	beq.n	8002f8c <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7ff fe9b 	bl	8002cc0 <LL_EXTI_EnableRisingTrig_0_31>
 8002f8a:	e003      	b.n	8002f94 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f7ff fea6 	bl	8002ce0 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	2220      	movs	r2, #32
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f7ff feaf 	bl	8002d04 <LL_EXTI_EnableFallingTrig_0_31>
 8002fa6:	e003      	b.n	8002fb0 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	0018      	movs	r0, r3
 8002fac:	f7ff feba 	bl	8002d24 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f7ff fed6 	bl	8002d64 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f7ff fec4 	bl	8002d48 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d004      	beq.n	8002fd4 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f7ff fe51 	bl	8002c74 <LL_EXTI_EnableEvent_0_31>
 8002fd2:	e003      	b.n	8002fdc <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f7ff fe5e 	bl	8002c98 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d004      	beq.n	8002ff0 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f7ff fe1d 	bl	8002c28 <LL_EXTI_EnableIT_0_31>
 8002fee:	e00c      	b.n	800300a <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f7ff fe2a 	bl	8002c4c <LL_EXTI_DisableIT_0_31>
 8002ff8:	e007      	b.n	800300a <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f7ff fe4b 	bl	8002c98 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	0018      	movs	r0, r3
 8003006:	f7ff fe21 	bl	8002c4c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2229      	movs	r2, #41	; 0x29
 800300e:	5c9b      	ldrb	r3, [r3, r2]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d103      	bne.n	800301e <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2229      	movs	r2, #41	; 0x29
 800301a:	2101      	movs	r1, #1
 800301c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800301e:	231f      	movs	r3, #31
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	781b      	ldrb	r3, [r3, #0]
}
 8003024:	0018      	movs	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	b008      	add	sp, #32
 800302a:	bd80      	pop	{r7, pc}
 800302c:	fe00740f 	.word	0xfe00740f
 8003030:	40010200 	.word	0x40010200
 8003034:	fffff7ff 	.word	0xfffff7ff
 8003038:	ffffbfff 	.word	0xffffbfff
 800303c:	20000014 	.word	0x20000014
 8003040:	00030d40 	.word	0x00030d40

08003044 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 800304c:	2300      	movs	r3, #0
 800304e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003050:	210f      	movs	r1, #15
 8003052:	187b      	adds	r3, r7, r1
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d103      	bne.n	8003066 <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 800305e:	187b      	adds	r3, r7, r1
 8003060:	2201      	movs	r2, #1
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	e035      	b.n	80030d2 <HAL_COMP_Start+0x8e>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	0fdb      	lsrs	r3, r3, #31
 800306e:	07da      	lsls	r2, r3, #31
 8003070:	2380      	movs	r3, #128	; 0x80
 8003072:	061b      	lsls	r3, r3, #24
 8003074:	429a      	cmp	r2, r3
 8003076:	d104      	bne.n	8003082 <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8003078:	230f      	movs	r3, #15
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
 8003080:	e027      	b.n	80030d2 <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2229      	movs	r2, #41	; 0x29
 8003086:	5c9b      	ldrb	r3, [r3, r2]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d11d      	bne.n	80030ca <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2101      	movs	r1, #1
 800309a:	430a      	orrs	r2, r1
 800309c:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2229      	movs	r2, #41	; 0x29
 80030a2:	2102      	movs	r1, #2
 80030a4:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030a6:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <HAL_COMP_Start+0x9c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	490e      	ldr	r1, [pc, #56]	; (80030e4 <HAL_COMP_Start+0xa0>)
 80030ac:	0018      	movs	r0, r3
 80030ae:	f7fd f833 	bl	8000118 <__udivsi3>
 80030b2:	0003      	movs	r3, r0
 80030b4:	3301      	adds	r3, #1
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030ba:	e002      	b.n	80030c2 <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	3b01      	subs	r3, #1
 80030c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1f9      	bne.n	80030bc <HAL_COMP_Start+0x78>
 80030c8:	e003      	b.n	80030d2 <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030ca:	230f      	movs	r3, #15
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	2201      	movs	r2, #1
 80030d0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80030d2:	230f      	movs	r3, #15
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	781b      	ldrb	r3, [r3, #0]
}
 80030d8:	0018      	movs	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	b004      	add	sp, #16
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	20000014 	.word	0x20000014
 80030e4:	00030d40 	.word	0x00030d40

080030e8 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(const COMP_HandleTypeDef *hcomp)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	0f9b      	lsrs	r3, r3, #30
 80030f8:	2201      	movs	r2, #1
 80030fa:	4013      	ands	r3, r2
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}

08003104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	0002      	movs	r2, r0
 800310c:	1dfb      	adds	r3, r7, #7
 800310e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003110:	1dfb      	adds	r3, r7, #7
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b7f      	cmp	r3, #127	; 0x7f
 8003116:	d809      	bhi.n	800312c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003118:	1dfb      	adds	r3, r7, #7
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	001a      	movs	r2, r3
 800311e:	231f      	movs	r3, #31
 8003120:	401a      	ands	r2, r3
 8003122:	4b04      	ldr	r3, [pc, #16]	; (8003134 <__NVIC_EnableIRQ+0x30>)
 8003124:	2101      	movs	r1, #1
 8003126:	4091      	lsls	r1, r2
 8003128:	000a      	movs	r2, r1
 800312a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	b002      	add	sp, #8
 8003132:	bd80      	pop	{r7, pc}
 8003134:	e000e100 	.word	0xe000e100

08003138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	0002      	movs	r2, r0
 8003140:	6039      	str	r1, [r7, #0]
 8003142:	1dfb      	adds	r3, r7, #7
 8003144:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003146:	1dfb      	adds	r3, r7, #7
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b7f      	cmp	r3, #127	; 0x7f
 800314c:	d828      	bhi.n	80031a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800314e:	4a2f      	ldr	r2, [pc, #188]	; (800320c <__NVIC_SetPriority+0xd4>)
 8003150:	1dfb      	adds	r3, r7, #7
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	b25b      	sxtb	r3, r3
 8003156:	089b      	lsrs	r3, r3, #2
 8003158:	33c0      	adds	r3, #192	; 0xc0
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	589b      	ldr	r3, [r3, r2]
 800315e:	1dfa      	adds	r2, r7, #7
 8003160:	7812      	ldrb	r2, [r2, #0]
 8003162:	0011      	movs	r1, r2
 8003164:	2203      	movs	r2, #3
 8003166:	400a      	ands	r2, r1
 8003168:	00d2      	lsls	r2, r2, #3
 800316a:	21ff      	movs	r1, #255	; 0xff
 800316c:	4091      	lsls	r1, r2
 800316e:	000a      	movs	r2, r1
 8003170:	43d2      	mvns	r2, r2
 8003172:	401a      	ands	r2, r3
 8003174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	019b      	lsls	r3, r3, #6
 800317a:	22ff      	movs	r2, #255	; 0xff
 800317c:	401a      	ands	r2, r3
 800317e:	1dfb      	adds	r3, r7, #7
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	0018      	movs	r0, r3
 8003184:	2303      	movs	r3, #3
 8003186:	4003      	ands	r3, r0
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800318c:	481f      	ldr	r0, [pc, #124]	; (800320c <__NVIC_SetPriority+0xd4>)
 800318e:	1dfb      	adds	r3, r7, #7
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	b25b      	sxtb	r3, r3
 8003194:	089b      	lsrs	r3, r3, #2
 8003196:	430a      	orrs	r2, r1
 8003198:	33c0      	adds	r3, #192	; 0xc0
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800319e:	e031      	b.n	8003204 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031a0:	4a1b      	ldr	r2, [pc, #108]	; (8003210 <__NVIC_SetPriority+0xd8>)
 80031a2:	1dfb      	adds	r3, r7, #7
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	0019      	movs	r1, r3
 80031a8:	230f      	movs	r3, #15
 80031aa:	400b      	ands	r3, r1
 80031ac:	3b08      	subs	r3, #8
 80031ae:	089b      	lsrs	r3, r3, #2
 80031b0:	3306      	adds	r3, #6
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	18d3      	adds	r3, r2, r3
 80031b6:	3304      	adds	r3, #4
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	1dfa      	adds	r2, r7, #7
 80031bc:	7812      	ldrb	r2, [r2, #0]
 80031be:	0011      	movs	r1, r2
 80031c0:	2203      	movs	r2, #3
 80031c2:	400a      	ands	r2, r1
 80031c4:	00d2      	lsls	r2, r2, #3
 80031c6:	21ff      	movs	r1, #255	; 0xff
 80031c8:	4091      	lsls	r1, r2
 80031ca:	000a      	movs	r2, r1
 80031cc:	43d2      	mvns	r2, r2
 80031ce:	401a      	ands	r2, r3
 80031d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	019b      	lsls	r3, r3, #6
 80031d6:	22ff      	movs	r2, #255	; 0xff
 80031d8:	401a      	ands	r2, r3
 80031da:	1dfb      	adds	r3, r7, #7
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	0018      	movs	r0, r3
 80031e0:	2303      	movs	r3, #3
 80031e2:	4003      	ands	r3, r0
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031e8:	4809      	ldr	r0, [pc, #36]	; (8003210 <__NVIC_SetPriority+0xd8>)
 80031ea:	1dfb      	adds	r3, r7, #7
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	001c      	movs	r4, r3
 80031f0:	230f      	movs	r3, #15
 80031f2:	4023      	ands	r3, r4
 80031f4:	3b08      	subs	r3, #8
 80031f6:	089b      	lsrs	r3, r3, #2
 80031f8:	430a      	orrs	r2, r1
 80031fa:	3306      	adds	r3, #6
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	18c3      	adds	r3, r0, r3
 8003200:	3304      	adds	r3, #4
 8003202:	601a      	str	r2, [r3, #0]
}
 8003204:	46c0      	nop			; (mov r8, r8)
 8003206:	46bd      	mov	sp, r7
 8003208:	b003      	add	sp, #12
 800320a:	bd90      	pop	{r4, r7, pc}
 800320c:	e000e100 	.word	0xe000e100
 8003210:	e000ed00 	.word	0xe000ed00

08003214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	1e5a      	subs	r2, r3, #1
 8003220:	2380      	movs	r3, #128	; 0x80
 8003222:	045b      	lsls	r3, r3, #17
 8003224:	429a      	cmp	r2, r3
 8003226:	d301      	bcc.n	800322c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003228:	2301      	movs	r3, #1
 800322a:	e010      	b.n	800324e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800322c:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <SysTick_Config+0x44>)
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	3a01      	subs	r2, #1
 8003232:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003234:	2301      	movs	r3, #1
 8003236:	425b      	negs	r3, r3
 8003238:	2103      	movs	r1, #3
 800323a:	0018      	movs	r0, r3
 800323c:	f7ff ff7c 	bl	8003138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003240:	4b05      	ldr	r3, [pc, #20]	; (8003258 <SysTick_Config+0x44>)
 8003242:	2200      	movs	r2, #0
 8003244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003246:	4b04      	ldr	r3, [pc, #16]	; (8003258 <SysTick_Config+0x44>)
 8003248:	2207      	movs	r2, #7
 800324a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800324c:	2300      	movs	r3, #0
}
 800324e:	0018      	movs	r0, r3
 8003250:	46bd      	mov	sp, r7
 8003252:	b002      	add	sp, #8
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	e000e010 	.word	0xe000e010

0800325c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
 8003266:	210f      	movs	r1, #15
 8003268:	187b      	adds	r3, r7, r1
 800326a:	1c02      	adds	r2, r0, #0
 800326c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	187b      	adds	r3, r7, r1
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	b25b      	sxtb	r3, r3
 8003276:	0011      	movs	r1, r2
 8003278:	0018      	movs	r0, r3
 800327a:	f7ff ff5d 	bl	8003138 <__NVIC_SetPriority>
}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	46bd      	mov	sp, r7
 8003282:	b004      	add	sp, #16
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	0002      	movs	r2, r0
 800328e:	1dfb      	adds	r3, r7, #7
 8003290:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003292:	1dfb      	adds	r3, r7, #7
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	b25b      	sxtb	r3, r3
 8003298:	0018      	movs	r0, r3
 800329a:	f7ff ff33 	bl	8003104 <__NVIC_EnableIRQ>
}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	46bd      	mov	sp, r7
 80032a2:	b002      	add	sp, #8
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	0018      	movs	r0, r3
 80032b2:	f7ff ffaf 	bl	8003214 <SysTick_Config>
 80032b6:	0003      	movs	r3, r0
}
 80032b8:	0018      	movs	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b002      	add	sp, #8
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e015      	b.n	80032fe <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	791b      	ldrb	r3, [r3, #4]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d106      	bne.n	80032ea <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	0018      	movs	r0, r3
 80032e6:	f003 fc55 	bl	8006b94 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2202      	movs	r2, #2
 80032ee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	0018      	movs	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	b002      	add	sp, #8
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e047      	b.n	80033aa <HAL_DAC_Start+0xa4>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	795b      	ldrb	r3, [r3, #5]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_DAC_Start+0x20>
 8003322:	2302      	movs	r3, #2
 8003324:	e041      	b.n	80033aa <HAL_DAC_Start+0xa4>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6819      	ldr	r1, [r3, #0]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2210      	movs	r2, #16
 800333c:	4013      	ands	r3, r2
 800333e:	2201      	movs	r2, #1
 8003340:	409a      	lsls	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10f      	bne.n	8003370 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	223e      	movs	r2, #62	; 0x3e
 8003358:	4013      	ands	r3, r2
 800335a:	2b02      	cmp	r3, #2
 800335c:	d11e      	bne.n	800339c <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2101      	movs	r1, #1
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	e015      	b.n	800339c <HAL_DAC_Start+0x96>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	23f8      	movs	r3, #248	; 0xf8
 8003378:	039b      	lsls	r3, r3, #14
 800337a:	401a      	ands	r2, r3
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2110      	movs	r1, #16
 8003380:	400b      	ands	r3, r1
 8003382:	2102      	movs	r1, #2
 8003384:	4099      	lsls	r1, r3
 8003386:	000b      	movs	r3, r1
 8003388:	429a      	cmp	r2, r3
 800338a:	d107      	bne.n	800339c <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2102      	movs	r1, #2
 8003398:	430a      	orrs	r2, r1
 800339a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	0018      	movs	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b002      	add	sp, #8
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e014      	b.n	80033f8 <HAL_DAC_SetValue+0x46>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d105      	bne.n	80033e6 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	18d3      	adds	r3, r2, r3
 80033e0:	3308      	adds	r3, #8
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	e004      	b.n	80033f0 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	18d3      	adds	r3, r2, r3
 80033ec:	3314      	adds	r3, #20
 80033ee:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	0018      	movs	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b006      	add	sp, #24
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800340c:	231f      	movs	r3, #31
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_DAC_ConfigChannel+0x20>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_DAC_ConfigChannel+0x24>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e115      	b.n	8003650 <HAL_DAC_ConfigChannel+0x250>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	795b      	ldrb	r3, [r3, #5]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_DAC_ConfigChannel+0x30>
 800342c:	2302      	movs	r3, #2
 800342e:	e10f      	b.n	8003650 <HAL_DAC_ConfigChannel+0x250>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2201      	movs	r2, #1
 8003434:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2202      	movs	r2, #2
 800343a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b04      	cmp	r3, #4
 8003442:	d000      	beq.n	8003446 <HAL_DAC_ConfigChannel+0x46>
 8003444:	e07a      	b.n	800353c <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003446:	f7fe fa83 	bl	8001950 <HAL_GetTick>
 800344a:	0003      	movs	r3, r0
 800344c:	61bb      	str	r3, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d13d      	bne.n	80034d0 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003454:	e018      	b.n	8003488 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003456:	f7fe fa7b 	bl	8001950 <HAL_GetTick>
 800345a:	0002      	movs	r2, r0
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b01      	cmp	r3, #1
 8003462:	d911      	bls.n	8003488 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800346a:	2380      	movs	r3, #128	; 0x80
 800346c:	021b      	lsls	r3, r3, #8
 800346e:	4013      	ands	r3, r2
 8003470:	d00a      	beq.n	8003488 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2208      	movs	r2, #8
 8003478:	431a      	orrs	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2203      	movs	r2, #3
 8003482:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e0e3      	b.n	8003650 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	021b      	lsls	r3, r3, #8
 8003492:	4013      	ands	r3, r2
 8003494:	d1df      	bne.n	8003456 <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	6992      	ldr	r2, [r2, #24]
 800349e:	641a      	str	r2, [r3, #64]	; 0x40
 80034a0:	e020      	b.n	80034e4 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80034a2:	f7fe fa55 	bl	8001950 <HAL_GetTick>
 80034a6:	0002      	movs	r2, r0
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d90f      	bls.n	80034d0 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	da0a      	bge.n	80034d0 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2208      	movs	r2, #8
 80034c0:	431a      	orrs	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2203      	movs	r2, #3
 80034ca:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e0bf      	b.n	8003650 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	dbe3      	blt.n	80034a2 <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	6992      	ldr	r2, [r2, #24]
 80034e2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	2110      	movs	r1, #16
 80034ee:	400a      	ands	r2, r1
 80034f0:	4959      	ldr	r1, [pc, #356]	; (8003658 <HAL_DAC_ConfigChannel+0x258>)
 80034f2:	4091      	lsls	r1, r2
 80034f4:	000a      	movs	r2, r1
 80034f6:	43d2      	mvns	r2, r2
 80034f8:	401a      	ands	r2, r3
 80034fa:	0011      	movs	r1, r2
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	69da      	ldr	r2, [r3, #28]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2010      	movs	r0, #16
 8003504:	4003      	ands	r3, r0
 8003506:	409a      	lsls	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	2110      	movs	r1, #16
 800351a:	400a      	ands	r2, r1
 800351c:	21ff      	movs	r1, #255	; 0xff
 800351e:	4091      	lsls	r1, r2
 8003520:	000a      	movs	r2, r1
 8003522:	43d2      	mvns	r2, r2
 8003524:	401a      	ands	r2, r3
 8003526:	0011      	movs	r1, r2
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	6a1a      	ldr	r2, [r3, #32]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2010      	movs	r0, #16
 8003530:	4003      	ands	r3, r0
 8003532:	409a      	lsls	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d11d      	bne.n	8003580 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2210      	movs	r2, #16
 8003550:	4013      	ands	r3, r2
 8003552:	221f      	movs	r2, #31
 8003554:	409a      	lsls	r2, r3
 8003556:	0013      	movs	r3, r2
 8003558:	43da      	mvns	r2, r3
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	4013      	ands	r3, r2
 800355e:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2210      	movs	r2, #16
 800356a:	4013      	ands	r3, r2
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	409a      	lsls	r2, r3
 8003570:	0013      	movs	r3, r2
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003586:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2210      	movs	r2, #16
 800358c:	4013      	ands	r3, r2
 800358e:	2207      	movs	r2, #7
 8003590:	409a      	lsls	r2, r3
 8003592:	0013      	movs	r3, r2
 8003594:	43da      	mvns	r2, r3
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	4013      	ands	r3, r2
 800359a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	431a      	orrs	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2210      	movs	r2, #16
 80035b2:	4013      	ands	r3, r2
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	409a      	lsls	r2, r3
 80035b8:	0013      	movs	r3, r2
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2110      	movs	r1, #16
 80035d2:	400b      	ands	r3, r1
 80035d4:	2180      	movs	r1, #128	; 0x80
 80035d6:	01c9      	lsls	r1, r1, #7
 80035d8:	4099      	lsls	r1, r3
 80035da:	000b      	movs	r3, r1
 80035dc:	43d9      	mvns	r1, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	400a      	ands	r2, r1
 80035e4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2210      	movs	r2, #16
 80035f2:	4013      	ands	r3, r2
 80035f4:	4a19      	ldr	r2, [pc, #100]	; (800365c <HAL_DAC_ConfigChannel+0x25c>)
 80035f6:	409a      	lsls	r2, r3
 80035f8:	0013      	movs	r3, r2
 80035fa:	43da      	mvns	r2, r3
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	4013      	ands	r3, r2
 8003600:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2210      	movs	r2, #16
 800360c:	4013      	ands	r3, r2
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	409a      	lsls	r2, r3
 8003612:	0013      	movs	r3, r2
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2110      	movs	r1, #16
 800362c:	400b      	ands	r3, r1
 800362e:	21c0      	movs	r1, #192	; 0xc0
 8003630:	4099      	lsls	r1, r3
 8003632:	000b      	movs	r3, r1
 8003634:	43d9      	mvns	r1, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	400a      	ands	r2, r1
 800363c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2201      	movs	r2, #1
 8003642:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800364a:	231f      	movs	r3, #31
 800364c:	18fb      	adds	r3, r7, r3
 800364e:	781b      	ldrb	r3, [r3, #0]
}
 8003650:	0018      	movs	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	b008      	add	sp, #32
 8003656:	bd80      	pop	{r7, pc}
 8003658:	000003ff 	.word	0x000003ff
 800365c:	00000ffe 	.word	0x00000ffe

08003660 <HAL_DACEx_SelfCalibrate>:
  * @retval Updates DAC_TrimmingValue. , DAC_UserTrimming set to DAC_UserTrimming
  * @retval HAL status
  * @note   Calibration runs about 7 ms.
  */
HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08a      	sub	sp, #40	; 0x28
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800366c:	2327      	movs	r3, #39	; 0x27
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	2200      	movs	r2, #0
 8003672:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Check the DAC handle allocation */
  /* Check if DAC running */
  if ((hdac == NULL) || (sConfig == NULL))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <HAL_DACEx_SelfCalibrate+0x20>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d104      	bne.n	800368a <HAL_DACEx_SelfCalibrate+0x2a>
  {
    status = HAL_ERROR;
 8003680:	2327      	movs	r3, #39	; 0x27
 8003682:	18fb      	adds	r3, r7, r3
 8003684:	2201      	movs	r2, #1
 8003686:	701a      	strb	r2, [r3, #0]
 8003688:	e10b      	b.n	80038a2 <HAL_DACEx_SelfCalibrate+0x242>
  }
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	791b      	ldrb	r3, [r3, #4]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d104      	bne.n	800369e <HAL_DACEx_SelfCalibrate+0x3e>
  {
    status = HAL_ERROR;
 8003694:	2327      	movs	r3, #39	; 0x27
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	2201      	movs	r2, #1
 800369a:	701a      	strb	r2, [r3, #0]
 800369c:	e101      	b.n	80038a2 <HAL_DACEx_SelfCalibrate+0x242>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hdac);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	795b      	ldrb	r3, [r3, #5]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_DACEx_SelfCalibrate+0x4a>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e0fe      	b.n	80038a8 <HAL_DACEx_SelfCalibrate+0x248>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	715a      	strb	r2, [r3, #5]

    /* Store configuration */
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	2110      	movs	r1, #16
 80036ba:	400a      	ands	r2, r1
 80036bc:	2107      	movs	r1, #7
 80036be:	4091      	lsls	r1, r2
 80036c0:	000a      	movs	r2, r1
 80036c2:	4013      	ands	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]

    /* Disable the selected DAC channel */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2110      	movs	r1, #16
 80036d0:	400b      	ands	r3, r1
 80036d2:	2101      	movs	r1, #1
 80036d4:	4099      	lsls	r1, r3
 80036d6:	000b      	movs	r3, r1
 80036d8:	43d9      	mvns	r1, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	400a      	ands	r2, r1
 80036e0:	601a      	str	r2, [r3, #0]

    /* Set mode in MCR  for calibration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2110      	movs	r1, #16
 80036ec:	400b      	ands	r3, r1
 80036ee:	2107      	movs	r1, #7
 80036f0:	4099      	lsls	r1, r3
 80036f2:	000b      	movs	r3, r1
 80036f4:	43d9      	mvns	r1, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	400a      	ands	r2, r1
 80036fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Enable the selected DAC channel calibration */
    /* i.e. set DAC_CR_CENx bit */
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6819      	ldr	r1, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2210      	movs	r2, #16
 8003708:	4013      	ands	r3, r2
 800370a:	2280      	movs	r2, #128	; 0x80
 800370c:	01d2      	lsls	r2, r2, #7
 800370e:	409a      	lsls	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	601a      	str	r2, [r3, #0]

    /* Init trimming counter */
    /* Medium value */
    trimmingvalue = 16UL;
 8003718:	2310      	movs	r3, #16
 800371a:	623b      	str	r3, [r7, #32]
    delta = 8UL;
 800371c:	2308      	movs	r3, #8
 800371e:	61fb      	str	r3, [r7, #28]
    while (delta != 0UL)
 8003720:	e047      	b.n	80037b2 <HAL_DACEx_SelfCalibrate+0x152>
    {
      /* Set candidate trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	2110      	movs	r1, #16
 800372c:	400a      	ands	r2, r1
 800372e:	211f      	movs	r1, #31
 8003730:	4091      	lsls	r1, r2
 8003732:	000a      	movs	r2, r1
 8003734:	43d2      	mvns	r2, r2
 8003736:	401a      	ands	r2, r3
 8003738:	0011      	movs	r1, r2
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2210      	movs	r2, #16
 800373e:	4013      	ands	r3, r2
 8003740:	6a3a      	ldr	r2, [r7, #32]
 8003742:	409a      	lsls	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Wait minimum time needed between two calibration steps (OTRIM) */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed */
      /*       32 bits register capacity and handle low frequency. */
      wait_loop_index = ((DAC_DELAY_TRIM_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800374c:	4b58      	ldr	r3, [pc, #352]	; (80038b0 <HAL_DACEx_SelfCalibrate+0x250>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4958      	ldr	r1, [pc, #352]	; (80038b4 <HAL_DACEx_SelfCalibrate+0x254>)
 8003752:	0018      	movs	r0, r3
 8003754:	f7fc fce0 	bl	8000118 <__udivsi3>
 8003758:	0003      	movs	r3, r0
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	0013      	movs	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	189b      	adds	r3, r3, r2
 8003762:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8003764:	e002      	b.n	800376c <HAL_DACEx_SelfCalibrate+0x10c>
      {
        wait_loop_index--;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	3b01      	subs	r3, #1
 800376a:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f9      	bne.n	8003766 <HAL_DACEx_SelfCalibrate+0x106>
      }

      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	2110      	movs	r1, #16
 800377c:	400a      	ands	r2, r1
 800377e:	2180      	movs	r1, #128	; 0x80
 8003780:	01c9      	lsls	r1, r1, #7
 8003782:	4091      	lsls	r1, r2
 8003784:	000a      	movs	r2, r1
 8003786:	401a      	ands	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2110      	movs	r1, #16
 800378c:	400b      	ands	r3, r1
 800378e:	2180      	movs	r1, #128	; 0x80
 8003790:	01c9      	lsls	r1, r1, #7
 8003792:	4099      	lsls	r1, r3
 8003794:	000b      	movs	r3, r1
 8003796:	429a      	cmp	r2, r3
 8003798:	d104      	bne.n	80037a4 <HAL_DACEx_SelfCalibrate+0x144>
      {
        /* DAC_SR_CAL_FLAGx is HIGH try higher trimming */
        trimmingvalue -= delta;
 800379a:	6a3a      	ldr	r2, [r7, #32]
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	623b      	str	r3, [r7, #32]
 80037a2:	e003      	b.n	80037ac <HAL_DACEx_SelfCalibrate+0x14c>
      }
      else
      {
        /* DAC_SR_CAL_FLAGx is LOW try lower trimming */
        trimmingvalue += delta;
 80037a4:	6a3a      	ldr	r2, [r7, #32]
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	18d3      	adds	r3, r2, r3
 80037aa:	623b      	str	r3, [r7, #32]
      }
      delta >>= 1UL;
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	085b      	lsrs	r3, r3, #1
 80037b0:	61fb      	str	r3, [r7, #28]
    while (delta != 0UL)
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1b4      	bne.n	8003722 <HAL_DACEx_SelfCalibrate+0xc2>
    }

    /* Still need to check if right calibration is current value or one step below */
    /* Indeed the first value that causes the DAC_SR_CAL_FLAGx bit to change from 0 to 1  */
    /* Set candidate trimming */
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	2110      	movs	r1, #16
 80037c2:	400a      	ands	r2, r1
 80037c4:	211f      	movs	r1, #31
 80037c6:	4091      	lsls	r1, r2
 80037c8:	000a      	movs	r2, r1
 80037ca:	43d2      	mvns	r2, r2
 80037cc:	401a      	ands	r2, r3
 80037ce:	0011      	movs	r1, r2
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2210      	movs	r2, #16
 80037d4:	4013      	ands	r3, r2
 80037d6:	6a3a      	ldr	r2, [r7, #32]
 80037d8:	409a      	lsls	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Wait minimum time needed between two calibration steps (OTRIM) */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed */
    /*       32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_TRIM_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037e2:	4b33      	ldr	r3, [pc, #204]	; (80038b0 <HAL_DACEx_SelfCalibrate+0x250>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4933      	ldr	r1, [pc, #204]	; (80038b4 <HAL_DACEx_SelfCalibrate+0x254>)
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7fc fc95 	bl	8000118 <__udivsi3>
 80037ee:	0003      	movs	r3, r0
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	0013      	movs	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	189b      	adds	r3, r3, r2
 80037f8:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80037fa:	e002      	b.n	8003802 <HAL_DACEx_SelfCalibrate+0x1a2>
    {
      wait_loop_index--;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	3b01      	subs	r3, #1
 8003800:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1f9      	bne.n	80037fc <HAL_DACEx_SelfCalibrate+0x19c>
    }

    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	2110      	movs	r1, #16
 8003812:	400a      	ands	r2, r1
 8003814:	2180      	movs	r1, #128	; 0x80
 8003816:	01c9      	lsls	r1, r1, #7
 8003818:	4091      	lsls	r1, r2
 800381a:	000a      	movs	r2, r1
 800381c:	4013      	ands	r3, r2
 800381e:	d117      	bne.n	8003850 <HAL_DACEx_SelfCalibrate+0x1f0>
    {
      /* Trimming is actually one value more */
      trimmingvalue++;
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	3301      	adds	r3, #1
 8003824:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	2110      	movs	r1, #16
 8003830:	400a      	ands	r2, r1
 8003832:	211f      	movs	r1, #31
 8003834:	4091      	lsls	r1, r2
 8003836:	000a      	movs	r2, r1
 8003838:	43d2      	mvns	r2, r2
 800383a:	401a      	ands	r2, r3
 800383c:	0011      	movs	r1, r2
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2210      	movs	r2, #16
 8003842:	4013      	ands	r3, r2
 8003844:	6a3a      	ldr	r2, [r7, #32]
 8003846:	409a      	lsls	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Disable the selected DAC channel calibration */
    /* i.e. clear DAC_CR_CENx bit */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2110      	movs	r1, #16
 800385a:	400b      	ands	r3, r1
 800385c:	2180      	movs	r1, #128	; 0x80
 800385e:	01c9      	lsls	r1, r1, #7
 8003860:	4099      	lsls	r1, r3
 8003862:	000b      	movs	r3, r1
 8003864:	43d9      	mvns	r1, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	400a      	ands	r2, r1
 800386c:	601a      	str	r2, [r3, #0]

    sConfig->DAC_TrimmingValue = trimmingvalue;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	6a3a      	ldr	r2, [r7, #32]
 8003872:	615a      	str	r2, [r3, #20]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2201      	movs	r2, #1
 8003878:	611a      	str	r2, [r3, #16]

    /* Restore configuration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	2110      	movs	r1, #16
 8003884:	400a      	ands	r2, r1
 8003886:	2107      	movs	r1, #7
 8003888:	4091      	lsls	r1, r2
 800388a:	000a      	movs	r2, r1
 800388c:	43d2      	mvns	r2, r2
 800388e:	401a      	ands	r2, r3
 8003890:	0011      	movs	r1, r2
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	430a      	orrs	r2, r1
 800389a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process unlocked */
    __HAL_UNLOCK(hdac);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	715a      	strb	r2, [r3, #5]
  }

  return status;
 80038a2:	2327      	movs	r3, #39	; 0x27
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	781b      	ldrb	r3, [r3, #0]
}
 80038a8:	0018      	movs	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b00a      	add	sp, #40	; 0x28
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20000014 	.word	0x20000014
 80038b4:	00030d40 	.word	0x00030d40

080038b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038c6:	e147      	b.n	8003b58 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2101      	movs	r1, #1
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4091      	lsls	r1, r2
 80038d2:	000a      	movs	r2, r1
 80038d4:	4013      	ands	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d100      	bne.n	80038e0 <HAL_GPIO_Init+0x28>
 80038de:	e138      	b.n	8003b52 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2203      	movs	r2, #3
 80038e6:	4013      	ands	r3, r2
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d005      	beq.n	80038f8 <HAL_GPIO_Init+0x40>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2203      	movs	r2, #3
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d130      	bne.n	800395a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	2203      	movs	r2, #3
 8003904:	409a      	lsls	r2, r3
 8003906:	0013      	movs	r3, r2
 8003908:	43da      	mvns	r2, r3
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4013      	ands	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	409a      	lsls	r2, r3
 800391a:	0013      	movs	r3, r2
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800392e:	2201      	movs	r2, #1
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	409a      	lsls	r2, r3
 8003934:	0013      	movs	r3, r2
 8003936:	43da      	mvns	r2, r3
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4013      	ands	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	091b      	lsrs	r3, r3, #4
 8003944:	2201      	movs	r2, #1
 8003946:	401a      	ands	r2, r3
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	409a      	lsls	r2, r3
 800394c:	0013      	movs	r3, r2
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2203      	movs	r2, #3
 8003960:	4013      	ands	r3, r2
 8003962:	2b03      	cmp	r3, #3
 8003964:	d017      	beq.n	8003996 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	2203      	movs	r2, #3
 8003972:	409a      	lsls	r2, r3
 8003974:	0013      	movs	r3, r2
 8003976:	43da      	mvns	r2, r3
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4013      	ands	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	409a      	lsls	r2, r3
 8003988:	0013      	movs	r3, r2
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2203      	movs	r2, #3
 800399c:	4013      	ands	r3, r2
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d123      	bne.n	80039ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	08da      	lsrs	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3208      	adds	r2, #8
 80039aa:	0092      	lsls	r2, r2, #2
 80039ac:	58d3      	ldr	r3, [r2, r3]
 80039ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2207      	movs	r2, #7
 80039b4:	4013      	ands	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	220f      	movs	r2, #15
 80039ba:	409a      	lsls	r2, r3
 80039bc:	0013      	movs	r3, r2
 80039be:	43da      	mvns	r2, r3
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2107      	movs	r1, #7
 80039ce:	400b      	ands	r3, r1
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	409a      	lsls	r2, r3
 80039d4:	0013      	movs	r3, r2
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	08da      	lsrs	r2, r3, #3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3208      	adds	r2, #8
 80039e4:	0092      	lsls	r2, r2, #2
 80039e6:	6939      	ldr	r1, [r7, #16]
 80039e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	2203      	movs	r2, #3
 80039f6:	409a      	lsls	r2, r3
 80039f8:	0013      	movs	r3, r2
 80039fa:	43da      	mvns	r2, r3
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4013      	ands	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2203      	movs	r2, #3
 8003a08:	401a      	ands	r2, r3
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	0013      	movs	r3, r2
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	23c0      	movs	r3, #192	; 0xc0
 8003a24:	029b      	lsls	r3, r3, #10
 8003a26:	4013      	ands	r3, r2
 8003a28:	d100      	bne.n	8003a2c <HAL_GPIO_Init+0x174>
 8003a2a:	e092      	b.n	8003b52 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003a2c:	4a50      	ldr	r2, [pc, #320]	; (8003b70 <HAL_GPIO_Init+0x2b8>)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	089b      	lsrs	r3, r3, #2
 8003a32:	3318      	adds	r3, #24
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	589b      	ldr	r3, [r3, r2]
 8003a38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	4013      	ands	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	220f      	movs	r2, #15
 8003a44:	409a      	lsls	r2, r3
 8003a46:	0013      	movs	r3, r2
 8003a48:	43da      	mvns	r2, r3
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	23a0      	movs	r3, #160	; 0xa0
 8003a54:	05db      	lsls	r3, r3, #23
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d013      	beq.n	8003a82 <HAL_GPIO_Init+0x1ca>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a45      	ldr	r2, [pc, #276]	; (8003b74 <HAL_GPIO_Init+0x2bc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00d      	beq.n	8003a7e <HAL_GPIO_Init+0x1c6>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a44      	ldr	r2, [pc, #272]	; (8003b78 <HAL_GPIO_Init+0x2c0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d007      	beq.n	8003a7a <HAL_GPIO_Init+0x1c2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a43      	ldr	r2, [pc, #268]	; (8003b7c <HAL_GPIO_Init+0x2c4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d101      	bne.n	8003a76 <HAL_GPIO_Init+0x1be>
 8003a72:	2303      	movs	r3, #3
 8003a74:	e006      	b.n	8003a84 <HAL_GPIO_Init+0x1cc>
 8003a76:	2305      	movs	r3, #5
 8003a78:	e004      	b.n	8003a84 <HAL_GPIO_Init+0x1cc>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e002      	b.n	8003a84 <HAL_GPIO_Init+0x1cc>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <HAL_GPIO_Init+0x1cc>
 8003a82:	2300      	movs	r3, #0
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	2103      	movs	r1, #3
 8003a88:	400a      	ands	r2, r1
 8003a8a:	00d2      	lsls	r2, r2, #3
 8003a8c:	4093      	lsls	r3, r2
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003a94:	4936      	ldr	r1, [pc, #216]	; (8003b70 <HAL_GPIO_Init+0x2b8>)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	089b      	lsrs	r3, r3, #2
 8003a9a:	3318      	adds	r3, #24
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aa2:	4b33      	ldr	r3, [pc, #204]	; (8003b70 <HAL_GPIO_Init+0x2b8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	43da      	mvns	r2, r3
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	2380      	movs	r3, #128	; 0x80
 8003ab8:	035b      	lsls	r3, r3, #13
 8003aba:	4013      	ands	r3, r2
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ac6:	4b2a      	ldr	r3, [pc, #168]	; (8003b70 <HAL_GPIO_Init+0x2b8>)
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003acc:	4b28      	ldr	r3, [pc, #160]	; (8003b70 <HAL_GPIO_Init+0x2b8>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	43da      	mvns	r2, r3
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	2380      	movs	r3, #128	; 0x80
 8003ae2:	039b      	lsls	r3, r3, #14
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003af0:	4b1f      	ldr	r3, [pc, #124]	; (8003b70 <HAL_GPIO_Init+0x2b8>)
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003af6:	4a1e      	ldr	r2, [pc, #120]	; (8003b70 <HAL_GPIO_Init+0x2b8>)
 8003af8:	2384      	movs	r3, #132	; 0x84
 8003afa:	58d3      	ldr	r3, [r2, r3]
 8003afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	43da      	mvns	r2, r3
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4013      	ands	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	029b      	lsls	r3, r3, #10
 8003b10:	4013      	ands	r3, r2
 8003b12:	d003      	beq.n	8003b1c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b1c:	4914      	ldr	r1, [pc, #80]	; (8003b70 <HAL_GPIO_Init+0x2b8>)
 8003b1e:	2284      	movs	r2, #132	; 0x84
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003b24:	4a12      	ldr	r2, [pc, #72]	; (8003b70 <HAL_GPIO_Init+0x2b8>)
 8003b26:	2380      	movs	r3, #128	; 0x80
 8003b28:	58d3      	ldr	r3, [r2, r3]
 8003b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	43da      	mvns	r2, r3
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4013      	ands	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	025b      	lsls	r3, r3, #9
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d003      	beq.n	8003b4a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b4a:	4909      	ldr	r1, [pc, #36]	; (8003b70 <HAL_GPIO_Init+0x2b8>)
 8003b4c:	2280      	movs	r2, #128	; 0x80
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	3301      	adds	r3, #1
 8003b56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	40da      	lsrs	r2, r3
 8003b60:	1e13      	subs	r3, r2, #0
 8003b62:	d000      	beq.n	8003b66 <HAL_GPIO_Init+0x2ae>
 8003b64:	e6b0      	b.n	80038c8 <HAL_GPIO_Init+0x10>
  }
}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	46c0      	nop			; (mov r8, r8)
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b006      	add	sp, #24
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40021800 	.word	0x40021800
 8003b74:	50000400 	.word	0x50000400
 8003b78:	50000800 	.word	0x50000800
 8003b7c:	50000c00 	.word	0x50000c00

08003b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	0008      	movs	r0, r1
 8003b8a:	0011      	movs	r1, r2
 8003b8c:	1cbb      	adds	r3, r7, #2
 8003b8e:	1c02      	adds	r2, r0, #0
 8003b90:	801a      	strh	r2, [r3, #0]
 8003b92:	1c7b      	adds	r3, r7, #1
 8003b94:	1c0a      	adds	r2, r1, #0
 8003b96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b98:	1c7b      	adds	r3, r7, #1
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d004      	beq.n	8003baa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ba0:	1cbb      	adds	r3, r7, #2
 8003ba2:	881a      	ldrh	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ba8:	e003      	b.n	8003bb2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003baa:	1cbb      	adds	r3, r7, #2
 8003bac:	881a      	ldrh	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	b002      	add	sp, #8
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e08f      	b.n	8003cee <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2241      	movs	r2, #65	; 0x41
 8003bd2:	5c9b      	ldrb	r3, [r3, r2]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d107      	bne.n	8003bea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2240      	movs	r2, #64	; 0x40
 8003bde:	2100      	movs	r1, #0
 8003be0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	0018      	movs	r0, r3
 8003be6:	f003 f89d 	bl	8006d24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2241      	movs	r2, #65	; 0x41
 8003bee:	2124      	movs	r1, #36	; 0x24
 8003bf0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	438a      	bics	r2, r1
 8003c00:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	493b      	ldr	r1, [pc, #236]	; (8003cf8 <HAL_I2C_Init+0x13c>)
 8003c0c:	400a      	ands	r2, r1
 8003c0e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4938      	ldr	r1, [pc, #224]	; (8003cfc <HAL_I2C_Init+0x140>)
 8003c1c:	400a      	ands	r2, r1
 8003c1e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d108      	bne.n	8003c3a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2180      	movs	r1, #128	; 0x80
 8003c32:	0209      	lsls	r1, r1, #8
 8003c34:	430a      	orrs	r2, r1
 8003c36:	609a      	str	r2, [r3, #8]
 8003c38:	e007      	b.n	8003c4a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2184      	movs	r1, #132	; 0x84
 8003c44:	0209      	lsls	r1, r1, #8
 8003c46:	430a      	orrs	r2, r1
 8003c48:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d109      	bne.n	8003c66 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2180      	movs	r1, #128	; 0x80
 8003c5e:	0109      	lsls	r1, r1, #4
 8003c60:	430a      	orrs	r2, r1
 8003c62:	605a      	str	r2, [r3, #4]
 8003c64:	e007      	b.n	8003c76 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4923      	ldr	r1, [pc, #140]	; (8003d00 <HAL_I2C_Init+0x144>)
 8003c72:	400a      	ands	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4920      	ldr	r1, [pc, #128]	; (8003d04 <HAL_I2C_Init+0x148>)
 8003c82:	430a      	orrs	r2, r1
 8003c84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	491a      	ldr	r1, [pc, #104]	; (8003cfc <HAL_I2C_Init+0x140>)
 8003c92:	400a      	ands	r2, r1
 8003c94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69d9      	ldr	r1, [r3, #28]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1a      	ldr	r2, [r3, #32]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2101      	movs	r1, #1
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2241      	movs	r2, #65	; 0x41
 8003cda:	2120      	movs	r1, #32
 8003cdc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2242      	movs	r2, #66	; 0x42
 8003ce8:	2100      	movs	r1, #0
 8003cea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	0018      	movs	r0, r3
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	b002      	add	sp, #8
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	f0ffffff 	.word	0xf0ffffff
 8003cfc:	ffff7fff 	.word	0xffff7fff
 8003d00:	fffff7ff 	.word	0xfffff7ff
 8003d04:	02008000 	.word	0x02008000

08003d08 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d08:	b590      	push	{r4, r7, lr}
 8003d0a:	b089      	sub	sp, #36	; 0x24
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	000c      	movs	r4, r1
 8003d12:	0010      	movs	r0, r2
 8003d14:	0019      	movs	r1, r3
 8003d16:	230a      	movs	r3, #10
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	1c22      	adds	r2, r4, #0
 8003d1c:	801a      	strh	r2, [r3, #0]
 8003d1e:	2308      	movs	r3, #8
 8003d20:	18fb      	adds	r3, r7, r3
 8003d22:	1c02      	adds	r2, r0, #0
 8003d24:	801a      	strh	r2, [r3, #0]
 8003d26:	1dbb      	adds	r3, r7, #6
 8003d28:	1c0a      	adds	r2, r1, #0
 8003d2a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2241      	movs	r2, #65	; 0x41
 8003d30:	5c9b      	ldrb	r3, [r3, r2]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b20      	cmp	r3, #32
 8003d36:	d000      	beq.n	8003d3a <HAL_I2C_Mem_Write+0x32>
 8003d38:	e10c      	b.n	8003f54 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d004      	beq.n	8003d4a <HAL_I2C_Mem_Write+0x42>
 8003d40:	232c      	movs	r3, #44	; 0x2c
 8003d42:	18fb      	adds	r3, r7, r3
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d105      	bne.n	8003d56 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2280      	movs	r2, #128	; 0x80
 8003d4e:	0092      	lsls	r2, r2, #2
 8003d50:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e0ff      	b.n	8003f56 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2240      	movs	r2, #64	; 0x40
 8003d5a:	5c9b      	ldrb	r3, [r3, r2]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_I2C_Mem_Write+0x5c>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e0f8      	b.n	8003f56 <HAL_I2C_Mem_Write+0x24e>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2240      	movs	r2, #64	; 0x40
 8003d68:	2101      	movs	r1, #1
 8003d6a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d6c:	f7fd fdf0 	bl	8001950 <HAL_GetTick>
 8003d70:	0003      	movs	r3, r0
 8003d72:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d74:	2380      	movs	r3, #128	; 0x80
 8003d76:	0219      	lsls	r1, r3, #8
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	2319      	movs	r3, #25
 8003d80:	2201      	movs	r2, #1
 8003d82:	f000 f975 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8003d86:	1e03      	subs	r3, r0, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e0e3      	b.n	8003f56 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2241      	movs	r2, #65	; 0x41
 8003d92:	2121      	movs	r1, #33	; 0x21
 8003d94:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2242      	movs	r2, #66	; 0x42
 8003d9a:	2140      	movs	r1, #64	; 0x40
 8003d9c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003da8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	222c      	movs	r2, #44	; 0x2c
 8003dae:	18ba      	adds	r2, r7, r2
 8003db0:	8812      	ldrh	r2, [r2, #0]
 8003db2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dba:	1dbb      	adds	r3, r7, #6
 8003dbc:	881c      	ldrh	r4, [r3, #0]
 8003dbe:	2308      	movs	r3, #8
 8003dc0:	18fb      	adds	r3, r7, r3
 8003dc2:	881a      	ldrh	r2, [r3, #0]
 8003dc4:	230a      	movs	r3, #10
 8003dc6:	18fb      	adds	r3, r7, r3
 8003dc8:	8819      	ldrh	r1, [r3, #0]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	9301      	str	r3, [sp, #4]
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	0023      	movs	r3, r4
 8003dd6:	f000 f8c5 	bl	8003f64 <I2C_RequestMemoryWrite>
 8003dda:	1e03      	subs	r3, r0, #0
 8003ddc:	d005      	beq.n	8003dea <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2240      	movs	r2, #64	; 0x40
 8003de2:	2100      	movs	r1, #0
 8003de4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e0b5      	b.n	8003f56 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	2bff      	cmp	r3, #255	; 0xff
 8003df2:	d911      	bls.n	8003e18 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	22ff      	movs	r2, #255	; 0xff
 8003df8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	2380      	movs	r3, #128	; 0x80
 8003e02:	045c      	lsls	r4, r3, #17
 8003e04:	230a      	movs	r3, #10
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	8819      	ldrh	r1, [r3, #0]
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	0023      	movs	r3, r4
 8003e12:	f000 fb0f 	bl	8004434 <I2C_TransferConfig>
 8003e16:	e012      	b.n	8003e3e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	049c      	lsls	r4, r3, #18
 8003e2c:	230a      	movs	r3, #10
 8003e2e:	18fb      	adds	r3, r7, r3
 8003e30:	8819      	ldrh	r1, [r3, #0]
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	2300      	movs	r3, #0
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	0023      	movs	r3, r4
 8003e3a:	f000 fafb 	bl	8004434 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	0018      	movs	r0, r3
 8003e46:	f000 f96b 	bl	8004120 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e4a:	1e03      	subs	r3, r0, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e081      	b.n	8003f56 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	781a      	ldrb	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d03a      	beq.n	8003f02 <HAL_I2C_Mem_Write+0x1fa>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d136      	bne.n	8003f02 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	0013      	movs	r3, r2
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2180      	movs	r1, #128	; 0x80
 8003ea2:	f000 f8e5 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8003ea6:	1e03      	subs	r3, r0, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e053      	b.n	8003f56 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2bff      	cmp	r3, #255	; 0xff
 8003eb6:	d911      	bls.n	8003edc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	22ff      	movs	r2, #255	; 0xff
 8003ebc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	045c      	lsls	r4, r3, #17
 8003ec8:	230a      	movs	r3, #10
 8003eca:	18fb      	adds	r3, r7, r3
 8003ecc:	8819      	ldrh	r1, [r3, #0]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	0023      	movs	r3, r4
 8003ed6:	f000 faad 	bl	8004434 <I2C_TransferConfig>
 8003eda:	e012      	b.n	8003f02 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	2380      	movs	r3, #128	; 0x80
 8003eee:	049c      	lsls	r4, r3, #18
 8003ef0:	230a      	movs	r3, #10
 8003ef2:	18fb      	adds	r3, r7, r3
 8003ef4:	8819      	ldrh	r1, [r3, #0]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	2300      	movs	r3, #0
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	0023      	movs	r3, r4
 8003efe:	f000 fa99 	bl	8004434 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d198      	bne.n	8003e3e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	0018      	movs	r0, r3
 8003f14:	f000 f94a 	bl	80041ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f18:	1e03      	subs	r3, r0, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e01a      	b.n	8003f56 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2220      	movs	r2, #32
 8003f26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	490b      	ldr	r1, [pc, #44]	; (8003f60 <HAL_I2C_Mem_Write+0x258>)
 8003f34:	400a      	ands	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2241      	movs	r2, #65	; 0x41
 8003f3c:	2120      	movs	r1, #32
 8003f3e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2242      	movs	r2, #66	; 0x42
 8003f44:	2100      	movs	r1, #0
 8003f46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2240      	movs	r2, #64	; 0x40
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	e000      	b.n	8003f56 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003f54:	2302      	movs	r3, #2
  }
}
 8003f56:	0018      	movs	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b007      	add	sp, #28
 8003f5c:	bd90      	pop	{r4, r7, pc}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	fe00e800 	.word	0xfe00e800

08003f64 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003f64:	b5b0      	push	{r4, r5, r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	000c      	movs	r4, r1
 8003f6e:	0010      	movs	r0, r2
 8003f70:	0019      	movs	r1, r3
 8003f72:	250a      	movs	r5, #10
 8003f74:	197b      	adds	r3, r7, r5
 8003f76:	1c22      	adds	r2, r4, #0
 8003f78:	801a      	strh	r2, [r3, #0]
 8003f7a:	2308      	movs	r3, #8
 8003f7c:	18fb      	adds	r3, r7, r3
 8003f7e:	1c02      	adds	r2, r0, #0
 8003f80:	801a      	strh	r2, [r3, #0]
 8003f82:	1dbb      	adds	r3, r7, #6
 8003f84:	1c0a      	adds	r2, r1, #0
 8003f86:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f88:	1dbb      	adds	r3, r7, #6
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	2380      	movs	r3, #128	; 0x80
 8003f90:	045c      	lsls	r4, r3, #17
 8003f92:	197b      	adds	r3, r7, r5
 8003f94:	8819      	ldrh	r1, [r3, #0]
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	4b23      	ldr	r3, [pc, #140]	; (8004028 <I2C_RequestMemoryWrite+0xc4>)
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	0023      	movs	r3, r4
 8003f9e:	f000 fa49 	bl	8004434 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa4:	6a39      	ldr	r1, [r7, #32]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f000 f8b9 	bl	8004120 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fae:	1e03      	subs	r3, r0, #0
 8003fb0:	d001      	beq.n	8003fb6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e033      	b.n	800401e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fb6:	1dbb      	adds	r3, r7, #6
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d107      	bne.n	8003fce <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fbe:	2308      	movs	r3, #8
 8003fc0:	18fb      	adds	r3, r7, r3
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	629a      	str	r2, [r3, #40]	; 0x28
 8003fcc:	e019      	b.n	8004002 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fce:	2308      	movs	r3, #8
 8003fd0:	18fb      	adds	r3, r7, r3
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	0a1b      	lsrs	r3, r3, #8
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe2:	6a39      	ldr	r1, [r7, #32]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f000 f89a 	bl	8004120 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fec:	1e03      	subs	r3, r0, #0
 8003fee:	d001      	beq.n	8003ff4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e014      	b.n	800401e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ff4:	2308      	movs	r3, #8
 8003ff6:	18fb      	adds	r3, r7, r3
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004002:	6a3a      	ldr	r2, [r7, #32]
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	0013      	movs	r3, r2
 800400c:	2200      	movs	r2, #0
 800400e:	2180      	movs	r1, #128	; 0x80
 8004010:	f000 f82e 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8004014:	1e03      	subs	r3, r0, #0
 8004016:	d001      	beq.n	800401c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	0018      	movs	r0, r3
 8004020:	46bd      	mov	sp, r7
 8004022:	b004      	add	sp, #16
 8004024:	bdb0      	pop	{r4, r5, r7, pc}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	80002000 	.word	0x80002000

0800402c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	2202      	movs	r2, #2
 800403c:	4013      	ands	r3, r2
 800403e:	2b02      	cmp	r3, #2
 8004040:	d103      	bne.n	800404a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2200      	movs	r2, #0
 8004048:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	2201      	movs	r2, #1
 8004052:	4013      	ands	r3, r2
 8004054:	2b01      	cmp	r3, #1
 8004056:	d007      	beq.n	8004068 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2101      	movs	r1, #1
 8004064:	430a      	orrs	r2, r1
 8004066:	619a      	str	r2, [r3, #24]
  }
}
 8004068:	46c0      	nop			; (mov r8, r8)
 800406a:	46bd      	mov	sp, r7
 800406c:	b002      	add	sp, #8
 800406e:	bd80      	pop	{r7, pc}

08004070 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	1dfb      	adds	r3, r7, #7
 800407e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004080:	e03a      	b.n	80040f8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	6839      	ldr	r1, [r7, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	0018      	movs	r0, r3
 800408a:	f000 f8d3 	bl	8004234 <I2C_IsErrorOccurred>
 800408e:	1e03      	subs	r3, r0, #0
 8004090:	d001      	beq.n	8004096 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e040      	b.n	8004118 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	3301      	adds	r3, #1
 800409a:	d02d      	beq.n	80040f8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800409c:	f7fd fc58 	bl	8001950 <HAL_GetTick>
 80040a0:	0002      	movs	r2, r0
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d302      	bcc.n	80040b2 <I2C_WaitOnFlagUntilTimeout+0x42>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d122      	bne.n	80040f8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	4013      	ands	r3, r2
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	425a      	negs	r2, r3
 80040c2:	4153      	adcs	r3, r2
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	001a      	movs	r2, r3
 80040c8:	1dfb      	adds	r3, r7, #7
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d113      	bne.n	80040f8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d4:	2220      	movs	r2, #32
 80040d6:	431a      	orrs	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2241      	movs	r2, #65	; 0x41
 80040e0:	2120      	movs	r1, #32
 80040e2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2242      	movs	r2, #66	; 0x42
 80040e8:	2100      	movs	r1, #0
 80040ea:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2240      	movs	r2, #64	; 0x40
 80040f0:	2100      	movs	r1, #0
 80040f2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e00f      	b.n	8004118 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	4013      	ands	r3, r2
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	425a      	negs	r2, r3
 8004108:	4153      	adcs	r3, r2
 800410a:	b2db      	uxtb	r3, r3
 800410c:	001a      	movs	r2, r3
 800410e:	1dfb      	adds	r3, r7, #7
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d0b5      	beq.n	8004082 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	0018      	movs	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	b004      	add	sp, #16
 800411e:	bd80      	pop	{r7, pc}

08004120 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800412c:	e032      	b.n	8004194 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	68b9      	ldr	r1, [r7, #8]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	0018      	movs	r0, r3
 8004136:	f000 f87d 	bl	8004234 <I2C_IsErrorOccurred>
 800413a:	1e03      	subs	r3, r0, #0
 800413c:	d001      	beq.n	8004142 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e030      	b.n	80041a4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	3301      	adds	r3, #1
 8004146:	d025      	beq.n	8004194 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004148:	f7fd fc02 	bl	8001950 <HAL_GetTick>
 800414c:	0002      	movs	r2, r0
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	429a      	cmp	r2, r3
 8004156:	d302      	bcc.n	800415e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d11a      	bne.n	8004194 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	2202      	movs	r2, #2
 8004166:	4013      	ands	r3, r2
 8004168:	2b02      	cmp	r3, #2
 800416a:	d013      	beq.n	8004194 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004170:	2220      	movs	r2, #32
 8004172:	431a      	orrs	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2241      	movs	r2, #65	; 0x41
 800417c:	2120      	movs	r1, #32
 800417e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2242      	movs	r2, #66	; 0x42
 8004184:	2100      	movs	r1, #0
 8004186:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2240      	movs	r2, #64	; 0x40
 800418c:	2100      	movs	r1, #0
 800418e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e007      	b.n	80041a4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	2202      	movs	r2, #2
 800419c:	4013      	ands	r3, r2
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d1c5      	bne.n	800412e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	0018      	movs	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b004      	add	sp, #16
 80041aa:	bd80      	pop	{r7, pc}

080041ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041b8:	e02f      	b.n	800421a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	0018      	movs	r0, r3
 80041c2:	f000 f837 	bl	8004234 <I2C_IsErrorOccurred>
 80041c6:	1e03      	subs	r3, r0, #0
 80041c8:	d001      	beq.n	80041ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e02d      	b.n	800422a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ce:	f7fd fbbf 	bl	8001950 <HAL_GetTick>
 80041d2:	0002      	movs	r2, r0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d302      	bcc.n	80041e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d11a      	bne.n	800421a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	2220      	movs	r2, #32
 80041ec:	4013      	ands	r3, r2
 80041ee:	2b20      	cmp	r3, #32
 80041f0:	d013      	beq.n	800421a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f6:	2220      	movs	r2, #32
 80041f8:	431a      	orrs	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2241      	movs	r2, #65	; 0x41
 8004202:	2120      	movs	r1, #32
 8004204:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2242      	movs	r2, #66	; 0x42
 800420a:	2100      	movs	r1, #0
 800420c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2240      	movs	r2, #64	; 0x40
 8004212:	2100      	movs	r1, #0
 8004214:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e007      	b.n	800422a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	2220      	movs	r2, #32
 8004222:	4013      	ands	r3, r2
 8004224:	2b20      	cmp	r3, #32
 8004226:	d1c8      	bne.n	80041ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	0018      	movs	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	b004      	add	sp, #16
 8004230:	bd80      	pop	{r7, pc}
	...

08004234 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004234:	b590      	push	{r4, r7, lr}
 8004236:	b08b      	sub	sp, #44	; 0x2c
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004240:	2327      	movs	r3, #39	; 0x27
 8004242:	18fb      	adds	r3, r7, r3
 8004244:	2200      	movs	r2, #0
 8004246:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004250:	2300      	movs	r3, #0
 8004252:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	2210      	movs	r2, #16
 800425c:	4013      	ands	r3, r2
 800425e:	d100      	bne.n	8004262 <I2C_IsErrorOccurred+0x2e>
 8004260:	e082      	b.n	8004368 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2210      	movs	r2, #16
 8004268:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800426a:	e060      	b.n	800432e <I2C_IsErrorOccurred+0xfa>
 800426c:	2427      	movs	r4, #39	; 0x27
 800426e:	193b      	adds	r3, r7, r4
 8004270:	193a      	adds	r2, r7, r4
 8004272:	7812      	ldrb	r2, [r2, #0]
 8004274:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	3301      	adds	r3, #1
 800427a:	d058      	beq.n	800432e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800427c:	f7fd fb68 	bl	8001950 <HAL_GetTick>
 8004280:	0002      	movs	r2, r0
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	429a      	cmp	r2, r3
 800428a:	d306      	bcc.n	800429a <I2C_IsErrorOccurred+0x66>
 800428c:	193b      	adds	r3, r7, r4
 800428e:	193a      	adds	r2, r7, r4
 8004290:	7812      	ldrb	r2, [r2, #0]
 8004292:	701a      	strb	r2, [r3, #0]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d149      	bne.n	800432e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	01db      	lsls	r3, r3, #7
 80042a4:	4013      	ands	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80042a8:	2013      	movs	r0, #19
 80042aa:	183b      	adds	r3, r7, r0
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	2142      	movs	r1, #66	; 0x42
 80042b0:	5c52      	ldrb	r2, [r2, r1]
 80042b2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699a      	ldr	r2, [r3, #24]
 80042ba:	2380      	movs	r3, #128	; 0x80
 80042bc:	021b      	lsls	r3, r3, #8
 80042be:	401a      	ands	r2, r3
 80042c0:	2380      	movs	r3, #128	; 0x80
 80042c2:	021b      	lsls	r3, r3, #8
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d126      	bne.n	8004316 <I2C_IsErrorOccurred+0xe2>
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	2380      	movs	r3, #128	; 0x80
 80042cc:	01db      	lsls	r3, r3, #7
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d021      	beq.n	8004316 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80042d2:	183b      	adds	r3, r7, r0
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b20      	cmp	r3, #32
 80042d8:	d01d      	beq.n	8004316 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2180      	movs	r1, #128	; 0x80
 80042e6:	01c9      	lsls	r1, r1, #7
 80042e8:	430a      	orrs	r2, r1
 80042ea:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80042ec:	f7fd fb30 	bl	8001950 <HAL_GetTick>
 80042f0:	0003      	movs	r3, r0
 80042f2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042f4:	e00f      	b.n	8004316 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80042f6:	f7fd fb2b 	bl	8001950 <HAL_GetTick>
 80042fa:	0002      	movs	r2, r0
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b19      	cmp	r3, #25
 8004302:	d908      	bls.n	8004316 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	2220      	movs	r2, #32
 8004308:	4313      	orrs	r3, r2
 800430a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800430c:	2327      	movs	r3, #39	; 0x27
 800430e:	18fb      	adds	r3, r7, r3
 8004310:	2201      	movs	r2, #1
 8004312:	701a      	strb	r2, [r3, #0]

              break;
 8004314:	e00b      	b.n	800432e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	2220      	movs	r2, #32
 800431e:	4013      	ands	r3, r2
 8004320:	2127      	movs	r1, #39	; 0x27
 8004322:	187a      	adds	r2, r7, r1
 8004324:	1879      	adds	r1, r7, r1
 8004326:	7809      	ldrb	r1, [r1, #0]
 8004328:	7011      	strb	r1, [r2, #0]
 800432a:	2b20      	cmp	r3, #32
 800432c:	d1e3      	bne.n	80042f6 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	2220      	movs	r2, #32
 8004336:	4013      	ands	r3, r2
 8004338:	2b20      	cmp	r3, #32
 800433a:	d004      	beq.n	8004346 <I2C_IsErrorOccurred+0x112>
 800433c:	2327      	movs	r3, #39	; 0x27
 800433e:	18fb      	adds	r3, r7, r3
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d092      	beq.n	800426c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004346:	2327      	movs	r3, #39	; 0x27
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d103      	bne.n	8004358 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2220      	movs	r2, #32
 8004356:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	2204      	movs	r2, #4
 800435c:	4313      	orrs	r3, r2
 800435e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004360:	2327      	movs	r3, #39	; 0x27
 8004362:	18fb      	adds	r3, r7, r3
 8004364:	2201      	movs	r2, #1
 8004366:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	2380      	movs	r3, #128	; 0x80
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	4013      	ands	r3, r2
 8004378:	d00c      	beq.n	8004394 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	2201      	movs	r2, #1
 800437e:	4313      	orrs	r3, r2
 8004380:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2280      	movs	r2, #128	; 0x80
 8004388:	0052      	lsls	r2, r2, #1
 800438a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800438c:	2327      	movs	r3, #39	; 0x27
 800438e:	18fb      	adds	r3, r7, r3
 8004390:	2201      	movs	r2, #1
 8004392:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	2380      	movs	r3, #128	; 0x80
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4013      	ands	r3, r2
 800439c:	d00c      	beq.n	80043b8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	2208      	movs	r2, #8
 80043a2:	4313      	orrs	r3, r2
 80043a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2280      	movs	r2, #128	; 0x80
 80043ac:	00d2      	lsls	r2, r2, #3
 80043ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043b0:	2327      	movs	r3, #39	; 0x27
 80043b2:	18fb      	adds	r3, r7, r3
 80043b4:	2201      	movs	r2, #1
 80043b6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	2380      	movs	r3, #128	; 0x80
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4013      	ands	r3, r2
 80043c0:	d00c      	beq.n	80043dc <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	2202      	movs	r2, #2
 80043c6:	4313      	orrs	r3, r2
 80043c8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2280      	movs	r2, #128	; 0x80
 80043d0:	0092      	lsls	r2, r2, #2
 80043d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043d4:	2327      	movs	r3, #39	; 0x27
 80043d6:	18fb      	adds	r3, r7, r3
 80043d8:	2201      	movs	r2, #1
 80043da:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80043dc:	2327      	movs	r3, #39	; 0x27
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d01d      	beq.n	8004422 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	0018      	movs	r0, r3
 80043ea:	f7ff fe1f 	bl	800402c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	490d      	ldr	r1, [pc, #52]	; (8004430 <I2C_IsErrorOccurred+0x1fc>)
 80043fa:	400a      	ands	r2, r1
 80043fc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	431a      	orrs	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2241      	movs	r2, #65	; 0x41
 800440e:	2120      	movs	r1, #32
 8004410:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2242      	movs	r2, #66	; 0x42
 8004416:	2100      	movs	r1, #0
 8004418:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2240      	movs	r2, #64	; 0x40
 800441e:	2100      	movs	r1, #0
 8004420:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004422:	2327      	movs	r3, #39	; 0x27
 8004424:	18fb      	adds	r3, r7, r3
 8004426:	781b      	ldrb	r3, [r3, #0]
}
 8004428:	0018      	movs	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	b00b      	add	sp, #44	; 0x2c
 800442e:	bd90      	pop	{r4, r7, pc}
 8004430:	fe00e800 	.word	0xfe00e800

08004434 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004434:	b590      	push	{r4, r7, lr}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	0008      	movs	r0, r1
 800443e:	0011      	movs	r1, r2
 8004440:	607b      	str	r3, [r7, #4]
 8004442:	240a      	movs	r4, #10
 8004444:	193b      	adds	r3, r7, r4
 8004446:	1c02      	adds	r2, r0, #0
 8004448:	801a      	strh	r2, [r3, #0]
 800444a:	2009      	movs	r0, #9
 800444c:	183b      	adds	r3, r7, r0
 800444e:	1c0a      	adds	r2, r1, #0
 8004450:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004452:	193b      	adds	r3, r7, r4
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	059b      	lsls	r3, r3, #22
 8004458:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800445a:	183b      	adds	r3, r7, r0
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	0419      	lsls	r1, r3, #16
 8004460:	23ff      	movs	r3, #255	; 0xff
 8004462:	041b      	lsls	r3, r3, #16
 8004464:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004466:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800446c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446e:	4313      	orrs	r3, r2
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	085b      	lsrs	r3, r3, #1
 8004474:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800447e:	0d51      	lsrs	r1, r2, #21
 8004480:	2280      	movs	r2, #128	; 0x80
 8004482:	00d2      	lsls	r2, r2, #3
 8004484:	400a      	ands	r2, r1
 8004486:	4907      	ldr	r1, [pc, #28]	; (80044a4 <I2C_TransferConfig+0x70>)
 8004488:	430a      	orrs	r2, r1
 800448a:	43d2      	mvns	r2, r2
 800448c:	401a      	ands	r2, r3
 800448e:	0011      	movs	r1, r2
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	430a      	orrs	r2, r1
 8004498:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	46bd      	mov	sp, r7
 800449e:	b007      	add	sp, #28
 80044a0:	bd90      	pop	{r4, r7, pc}
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	03ff63ff 	.word	0x03ff63ff

080044a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2241      	movs	r2, #65	; 0x41
 80044b6:	5c9b      	ldrb	r3, [r3, r2]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	d138      	bne.n	8004530 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2240      	movs	r2, #64	; 0x40
 80044c2:	5c9b      	ldrb	r3, [r3, r2]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e032      	b.n	8004532 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2240      	movs	r2, #64	; 0x40
 80044d0:	2101      	movs	r1, #1
 80044d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2241      	movs	r2, #65	; 0x41
 80044d8:	2124      	movs	r1, #36	; 0x24
 80044da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2101      	movs	r1, #1
 80044e8:	438a      	bics	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4911      	ldr	r1, [pc, #68]	; (800453c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80044f8:	400a      	ands	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6819      	ldr	r1, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2101      	movs	r1, #1
 8004518:	430a      	orrs	r2, r1
 800451a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2241      	movs	r2, #65	; 0x41
 8004520:	2120      	movs	r1, #32
 8004522:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2240      	movs	r2, #64	; 0x40
 8004528:	2100      	movs	r1, #0
 800452a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800452c:	2300      	movs	r3, #0
 800452e:	e000      	b.n	8004532 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004530:	2302      	movs	r3, #2
  }
}
 8004532:	0018      	movs	r0, r3
 8004534:	46bd      	mov	sp, r7
 8004536:	b002      	add	sp, #8
 8004538:	bd80      	pop	{r7, pc}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	ffffefff 	.word	0xffffefff

08004540 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2241      	movs	r2, #65	; 0x41
 800454e:	5c9b      	ldrb	r3, [r3, r2]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b20      	cmp	r3, #32
 8004554:	d139      	bne.n	80045ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2240      	movs	r2, #64	; 0x40
 800455a:	5c9b      	ldrb	r3, [r3, r2]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004560:	2302      	movs	r3, #2
 8004562:	e033      	b.n	80045cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2240      	movs	r2, #64	; 0x40
 8004568:	2101      	movs	r1, #1
 800456a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2241      	movs	r2, #65	; 0x41
 8004570:	2124      	movs	r1, #36	; 0x24
 8004572:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2101      	movs	r1, #1
 8004580:	438a      	bics	r2, r1
 8004582:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4a11      	ldr	r2, [pc, #68]	; (80045d4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004590:	4013      	ands	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	021b      	lsls	r3, r3, #8
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2101      	movs	r1, #1
 80045b2:	430a      	orrs	r2, r1
 80045b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2241      	movs	r2, #65	; 0x41
 80045ba:	2120      	movs	r1, #32
 80045bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2240      	movs	r2, #64	; 0x40
 80045c2:	2100      	movs	r1, #0
 80045c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	e000      	b.n	80045cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80045ca:	2302      	movs	r3, #2
  }
}
 80045cc:	0018      	movs	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b004      	add	sp, #16
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	fffff0ff 	.word	0xfffff0ff

080045d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80045e0:	4b19      	ldr	r3, [pc, #100]	; (8004648 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a19      	ldr	r2, [pc, #100]	; (800464c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	0019      	movs	r1, r3
 80045ea:	4b17      	ldr	r3, [pc, #92]	; (8004648 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	2380      	movs	r3, #128	; 0x80
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d11f      	bne.n	800463c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80045fc:	4b14      	ldr	r3, [pc, #80]	; (8004650 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	0013      	movs	r3, r2
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	189b      	adds	r3, r3, r2
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	4912      	ldr	r1, [pc, #72]	; (8004654 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800460a:	0018      	movs	r0, r3
 800460c:	f7fb fd84 	bl	8000118 <__udivsi3>
 8004610:	0003      	movs	r3, r0
 8004612:	3301      	adds	r3, #1
 8004614:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004616:	e008      	b.n	800462a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3b01      	subs	r3, #1
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	e001      	b.n	800462a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e009      	b.n	800463e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800462a:	4b07      	ldr	r3, [pc, #28]	; (8004648 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800462c:	695a      	ldr	r2, [r3, #20]
 800462e:	2380      	movs	r3, #128	; 0x80
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	401a      	ands	r2, r3
 8004634:	2380      	movs	r3, #128	; 0x80
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	429a      	cmp	r2, r3
 800463a:	d0ed      	beq.n	8004618 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	0018      	movs	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	b004      	add	sp, #16
 8004644:	bd80      	pop	{r7, pc}
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	40007000 	.word	0x40007000
 800464c:	fffff9ff 	.word	0xfffff9ff
 8004650:	20000014 	.word	0x20000014
 8004654:	000f4240 	.word	0x000f4240

08004658 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e2fe      	b.n	8004c68 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2201      	movs	r2, #1
 8004670:	4013      	ands	r3, r2
 8004672:	d100      	bne.n	8004676 <HAL_RCC_OscConfig+0x1e>
 8004674:	e07c      	b.n	8004770 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004676:	4bc3      	ldr	r3, [pc, #780]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2238      	movs	r2, #56	; 0x38
 800467c:	4013      	ands	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004680:	4bc0      	ldr	r3, [pc, #768]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	2203      	movs	r2, #3
 8004686:	4013      	ands	r3, r2
 8004688:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b10      	cmp	r3, #16
 800468e:	d102      	bne.n	8004696 <HAL_RCC_OscConfig+0x3e>
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2b03      	cmp	r3, #3
 8004694:	d002      	beq.n	800469c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	2b08      	cmp	r3, #8
 800469a:	d10b      	bne.n	80046b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800469c:	4bb9      	ldr	r3, [pc, #740]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	2380      	movs	r3, #128	; 0x80
 80046a2:	029b      	lsls	r3, r3, #10
 80046a4:	4013      	ands	r3, r2
 80046a6:	d062      	beq.n	800476e <HAL_RCC_OscConfig+0x116>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d15e      	bne.n	800476e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e2d9      	b.n	8004c68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	025b      	lsls	r3, r3, #9
 80046bc:	429a      	cmp	r2, r3
 80046be:	d107      	bne.n	80046d0 <HAL_RCC_OscConfig+0x78>
 80046c0:	4bb0      	ldr	r3, [pc, #704]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	4baf      	ldr	r3, [pc, #700]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 80046c6:	2180      	movs	r1, #128	; 0x80
 80046c8:	0249      	lsls	r1, r1, #9
 80046ca:	430a      	orrs	r2, r1
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	e020      	b.n	8004712 <HAL_RCC_OscConfig+0xba>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	23a0      	movs	r3, #160	; 0xa0
 80046d6:	02db      	lsls	r3, r3, #11
 80046d8:	429a      	cmp	r2, r3
 80046da:	d10e      	bne.n	80046fa <HAL_RCC_OscConfig+0xa2>
 80046dc:	4ba9      	ldr	r3, [pc, #676]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	4ba8      	ldr	r3, [pc, #672]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 80046e2:	2180      	movs	r1, #128	; 0x80
 80046e4:	02c9      	lsls	r1, r1, #11
 80046e6:	430a      	orrs	r2, r1
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	4ba6      	ldr	r3, [pc, #664]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4ba5      	ldr	r3, [pc, #660]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 80046f0:	2180      	movs	r1, #128	; 0x80
 80046f2:	0249      	lsls	r1, r1, #9
 80046f4:	430a      	orrs	r2, r1
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	e00b      	b.n	8004712 <HAL_RCC_OscConfig+0xba>
 80046fa:	4ba2      	ldr	r3, [pc, #648]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	4ba1      	ldr	r3, [pc, #644]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 8004700:	49a1      	ldr	r1, [pc, #644]	; (8004988 <HAL_RCC_OscConfig+0x330>)
 8004702:	400a      	ands	r2, r1
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	4b9f      	ldr	r3, [pc, #636]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	4b9e      	ldr	r3, [pc, #632]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 800470c:	499f      	ldr	r1, [pc, #636]	; (800498c <HAL_RCC_OscConfig+0x334>)
 800470e:	400a      	ands	r2, r1
 8004710:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d014      	beq.n	8004744 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471a:	f7fd f919 	bl	8001950 <HAL_GetTick>
 800471e:	0003      	movs	r3, r0
 8004720:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004724:	f7fd f914 	bl	8001950 <HAL_GetTick>
 8004728:	0002      	movs	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b64      	cmp	r3, #100	; 0x64
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e298      	b.n	8004c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004736:	4b93      	ldr	r3, [pc, #588]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	029b      	lsls	r3, r3, #10
 800473e:	4013      	ands	r3, r2
 8004740:	d0f0      	beq.n	8004724 <HAL_RCC_OscConfig+0xcc>
 8004742:	e015      	b.n	8004770 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004744:	f7fd f904 	bl	8001950 <HAL_GetTick>
 8004748:	0003      	movs	r3, r0
 800474a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800474e:	f7fd f8ff 	bl	8001950 <HAL_GetTick>
 8004752:	0002      	movs	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b64      	cmp	r3, #100	; 0x64
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e283      	b.n	8004c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004760:	4b88      	ldr	r3, [pc, #544]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	2380      	movs	r3, #128	; 0x80
 8004766:	029b      	lsls	r3, r3, #10
 8004768:	4013      	ands	r3, r2
 800476a:	d1f0      	bne.n	800474e <HAL_RCC_OscConfig+0xf6>
 800476c:	e000      	b.n	8004770 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800476e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2202      	movs	r2, #2
 8004776:	4013      	ands	r3, r2
 8004778:	d100      	bne.n	800477c <HAL_RCC_OscConfig+0x124>
 800477a:	e099      	b.n	80048b0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800477c:	4b81      	ldr	r3, [pc, #516]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2238      	movs	r2, #56	; 0x38
 8004782:	4013      	ands	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004786:	4b7f      	ldr	r3, [pc, #508]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	2203      	movs	r2, #3
 800478c:	4013      	ands	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	2b10      	cmp	r3, #16
 8004794:	d102      	bne.n	800479c <HAL_RCC_OscConfig+0x144>
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b02      	cmp	r3, #2
 800479a:	d002      	beq.n	80047a2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d135      	bne.n	800480e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047a2:	4b78      	ldr	r3, [pc, #480]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	2380      	movs	r3, #128	; 0x80
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	4013      	ands	r3, r2
 80047ac:	d005      	beq.n	80047ba <HAL_RCC_OscConfig+0x162>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e256      	b.n	8004c68 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ba:	4b72      	ldr	r3, [pc, #456]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	4a74      	ldr	r2, [pc, #464]	; (8004990 <HAL_RCC_OscConfig+0x338>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	0019      	movs	r1, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	021a      	lsls	r2, r3, #8
 80047ca:	4b6e      	ldr	r3, [pc, #440]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 80047cc:	430a      	orrs	r2, r1
 80047ce:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d112      	bne.n	80047fc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80047d6:	4b6b      	ldr	r3, [pc, #428]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a6e      	ldr	r2, [pc, #440]	; (8004994 <HAL_RCC_OscConfig+0x33c>)
 80047dc:	4013      	ands	r3, r2
 80047de:	0019      	movs	r1, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	4b67      	ldr	r3, [pc, #412]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 80047e6:	430a      	orrs	r2, r1
 80047e8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80047ea:	4b66      	ldr	r3, [pc, #408]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	0adb      	lsrs	r3, r3, #11
 80047f0:	2207      	movs	r2, #7
 80047f2:	4013      	ands	r3, r2
 80047f4:	4a68      	ldr	r2, [pc, #416]	; (8004998 <HAL_RCC_OscConfig+0x340>)
 80047f6:	40da      	lsrs	r2, r3
 80047f8:	4b68      	ldr	r3, [pc, #416]	; (800499c <HAL_RCC_OscConfig+0x344>)
 80047fa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80047fc:	4b68      	ldr	r3, [pc, #416]	; (80049a0 <HAL_RCC_OscConfig+0x348>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	0018      	movs	r0, r3
 8004802:	f7fd f849 	bl	8001898 <HAL_InitTick>
 8004806:	1e03      	subs	r3, r0, #0
 8004808:	d051      	beq.n	80048ae <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e22c      	b.n	8004c68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d030      	beq.n	8004878 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004816:	4b5b      	ldr	r3, [pc, #364]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a5e      	ldr	r2, [pc, #376]	; (8004994 <HAL_RCC_OscConfig+0x33c>)
 800481c:	4013      	ands	r3, r2
 800481e:	0019      	movs	r1, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	4b57      	ldr	r3, [pc, #348]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 8004826:	430a      	orrs	r2, r1
 8004828:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800482a:	4b56      	ldr	r3, [pc, #344]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	4b55      	ldr	r3, [pc, #340]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 8004830:	2180      	movs	r1, #128	; 0x80
 8004832:	0049      	lsls	r1, r1, #1
 8004834:	430a      	orrs	r2, r1
 8004836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004838:	f7fd f88a 	bl	8001950 <HAL_GetTick>
 800483c:	0003      	movs	r3, r0
 800483e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004842:	f7fd f885 	bl	8001950 <HAL_GetTick>
 8004846:	0002      	movs	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e209      	b.n	8004c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004854:	4b4b      	ldr	r3, [pc, #300]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	2380      	movs	r3, #128	; 0x80
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	4013      	ands	r3, r2
 800485e:	d0f0      	beq.n	8004842 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004860:	4b48      	ldr	r3, [pc, #288]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	4a4a      	ldr	r2, [pc, #296]	; (8004990 <HAL_RCC_OscConfig+0x338>)
 8004866:	4013      	ands	r3, r2
 8004868:	0019      	movs	r1, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	021a      	lsls	r2, r3, #8
 8004870:	4b44      	ldr	r3, [pc, #272]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 8004872:	430a      	orrs	r2, r1
 8004874:	605a      	str	r2, [r3, #4]
 8004876:	e01b      	b.n	80048b0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004878:	4b42      	ldr	r3, [pc, #264]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4b41      	ldr	r3, [pc, #260]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 800487e:	4949      	ldr	r1, [pc, #292]	; (80049a4 <HAL_RCC_OscConfig+0x34c>)
 8004880:	400a      	ands	r2, r1
 8004882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004884:	f7fd f864 	bl	8001950 <HAL_GetTick>
 8004888:	0003      	movs	r3, r0
 800488a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800488c:	e008      	b.n	80048a0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800488e:	f7fd f85f 	bl	8001950 <HAL_GetTick>
 8004892:	0002      	movs	r2, r0
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e1e3      	b.n	8004c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048a0:	4b38      	ldr	r3, [pc, #224]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	2380      	movs	r3, #128	; 0x80
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	4013      	ands	r3, r2
 80048aa:	d1f0      	bne.n	800488e <HAL_RCC_OscConfig+0x236>
 80048ac:	e000      	b.n	80048b0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2208      	movs	r2, #8
 80048b6:	4013      	ands	r3, r2
 80048b8:	d047      	beq.n	800494a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80048ba:	4b32      	ldr	r3, [pc, #200]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2238      	movs	r2, #56	; 0x38
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b18      	cmp	r3, #24
 80048c4:	d10a      	bne.n	80048dc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80048c6:	4b2f      	ldr	r3, [pc, #188]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 80048c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ca:	2202      	movs	r2, #2
 80048cc:	4013      	ands	r3, r2
 80048ce:	d03c      	beq.n	800494a <HAL_RCC_OscConfig+0x2f2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d138      	bne.n	800494a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e1c5      	b.n	8004c68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d019      	beq.n	8004918 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80048e4:	4b27      	ldr	r3, [pc, #156]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 80048e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80048e8:	4b26      	ldr	r3, [pc, #152]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 80048ea:	2101      	movs	r1, #1
 80048ec:	430a      	orrs	r2, r1
 80048ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f0:	f7fd f82e 	bl	8001950 <HAL_GetTick>
 80048f4:	0003      	movs	r3, r0
 80048f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048fa:	f7fd f829 	bl	8001950 <HAL_GetTick>
 80048fe:	0002      	movs	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e1ad      	b.n	8004c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800490c:	4b1d      	ldr	r3, [pc, #116]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 800490e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004910:	2202      	movs	r2, #2
 8004912:	4013      	ands	r3, r2
 8004914:	d0f1      	beq.n	80048fa <HAL_RCC_OscConfig+0x2a2>
 8004916:	e018      	b.n	800494a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004918:	4b1a      	ldr	r3, [pc, #104]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 800491a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800491c:	4b19      	ldr	r3, [pc, #100]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 800491e:	2101      	movs	r1, #1
 8004920:	438a      	bics	r2, r1
 8004922:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004924:	f7fd f814 	bl	8001950 <HAL_GetTick>
 8004928:	0003      	movs	r3, r0
 800492a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800492e:	f7fd f80f 	bl	8001950 <HAL_GetTick>
 8004932:	0002      	movs	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e193      	b.n	8004c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004940:	4b10      	ldr	r3, [pc, #64]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 8004942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004944:	2202      	movs	r2, #2
 8004946:	4013      	ands	r3, r2
 8004948:	d1f1      	bne.n	800492e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2204      	movs	r2, #4
 8004950:	4013      	ands	r3, r2
 8004952:	d100      	bne.n	8004956 <HAL_RCC_OscConfig+0x2fe>
 8004954:	e0c6      	b.n	8004ae4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004956:	231f      	movs	r3, #31
 8004958:	18fb      	adds	r3, r7, r3
 800495a:	2200      	movs	r2, #0
 800495c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800495e:	4b09      	ldr	r3, [pc, #36]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	2238      	movs	r2, #56	; 0x38
 8004964:	4013      	ands	r3, r2
 8004966:	2b20      	cmp	r3, #32
 8004968:	d11e      	bne.n	80049a8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_RCC_OscConfig+0x32c>)
 800496c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496e:	2202      	movs	r2, #2
 8004970:	4013      	ands	r3, r2
 8004972:	d100      	bne.n	8004976 <HAL_RCC_OscConfig+0x31e>
 8004974:	e0b6      	b.n	8004ae4 <HAL_RCC_OscConfig+0x48c>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d000      	beq.n	8004980 <HAL_RCC_OscConfig+0x328>
 800497e:	e0b1      	b.n	8004ae4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e171      	b.n	8004c68 <HAL_RCC_OscConfig+0x610>
 8004984:	40021000 	.word	0x40021000
 8004988:	fffeffff 	.word	0xfffeffff
 800498c:	fffbffff 	.word	0xfffbffff
 8004990:	ffff80ff 	.word	0xffff80ff
 8004994:	ffffc7ff 	.word	0xffffc7ff
 8004998:	00f42400 	.word	0x00f42400
 800499c:	20000014 	.word	0x20000014
 80049a0:	20000000 	.word	0x20000000
 80049a4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049a8:	4bb1      	ldr	r3, [pc, #708]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 80049aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049ac:	2380      	movs	r3, #128	; 0x80
 80049ae:	055b      	lsls	r3, r3, #21
 80049b0:	4013      	ands	r3, r2
 80049b2:	d101      	bne.n	80049b8 <HAL_RCC_OscConfig+0x360>
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <HAL_RCC_OscConfig+0x362>
 80049b8:	2300      	movs	r3, #0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d011      	beq.n	80049e2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80049be:	4bac      	ldr	r3, [pc, #688]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 80049c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049c2:	4bab      	ldr	r3, [pc, #684]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 80049c4:	2180      	movs	r1, #128	; 0x80
 80049c6:	0549      	lsls	r1, r1, #21
 80049c8:	430a      	orrs	r2, r1
 80049ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80049cc:	4ba8      	ldr	r3, [pc, #672]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 80049ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049d0:	2380      	movs	r3, #128	; 0x80
 80049d2:	055b      	lsls	r3, r3, #21
 80049d4:	4013      	ands	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80049da:	231f      	movs	r3, #31
 80049dc:	18fb      	adds	r3, r7, r3
 80049de:	2201      	movs	r2, #1
 80049e0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049e2:	4ba4      	ldr	r3, [pc, #656]	; (8004c74 <HAL_RCC_OscConfig+0x61c>)
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	2380      	movs	r3, #128	; 0x80
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	4013      	ands	r3, r2
 80049ec:	d11a      	bne.n	8004a24 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049ee:	4ba1      	ldr	r3, [pc, #644]	; (8004c74 <HAL_RCC_OscConfig+0x61c>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	4ba0      	ldr	r3, [pc, #640]	; (8004c74 <HAL_RCC_OscConfig+0x61c>)
 80049f4:	2180      	movs	r1, #128	; 0x80
 80049f6:	0049      	lsls	r1, r1, #1
 80049f8:	430a      	orrs	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80049fc:	f7fc ffa8 	bl	8001950 <HAL_GetTick>
 8004a00:	0003      	movs	r3, r0
 8004a02:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a06:	f7fc ffa3 	bl	8001950 <HAL_GetTick>
 8004a0a:	0002      	movs	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e127      	b.n	8004c68 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a18:	4b96      	ldr	r3, [pc, #600]	; (8004c74 <HAL_RCC_OscConfig+0x61c>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	4013      	ands	r3, r2
 8004a22:	d0f0      	beq.n	8004a06 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d106      	bne.n	8004a3a <HAL_RCC_OscConfig+0x3e2>
 8004a2c:	4b90      	ldr	r3, [pc, #576]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004a2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a30:	4b8f      	ldr	r3, [pc, #572]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004a32:	2101      	movs	r1, #1
 8004a34:	430a      	orrs	r2, r1
 8004a36:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a38:	e01c      	b.n	8004a74 <HAL_RCC_OscConfig+0x41c>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b05      	cmp	r3, #5
 8004a40:	d10c      	bne.n	8004a5c <HAL_RCC_OscConfig+0x404>
 8004a42:	4b8b      	ldr	r3, [pc, #556]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004a44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a46:	4b8a      	ldr	r3, [pc, #552]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004a48:	2104      	movs	r1, #4
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a4e:	4b88      	ldr	r3, [pc, #544]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004a50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a52:	4b87      	ldr	r3, [pc, #540]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004a54:	2101      	movs	r1, #1
 8004a56:	430a      	orrs	r2, r1
 8004a58:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a5a:	e00b      	b.n	8004a74 <HAL_RCC_OscConfig+0x41c>
 8004a5c:	4b84      	ldr	r3, [pc, #528]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004a5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a60:	4b83      	ldr	r3, [pc, #524]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004a62:	2101      	movs	r1, #1
 8004a64:	438a      	bics	r2, r1
 8004a66:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a68:	4b81      	ldr	r3, [pc, #516]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004a6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a6c:	4b80      	ldr	r3, [pc, #512]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004a6e:	2104      	movs	r1, #4
 8004a70:	438a      	bics	r2, r1
 8004a72:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d014      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7c:	f7fc ff68 	bl	8001950 <HAL_GetTick>
 8004a80:	0003      	movs	r3, r0
 8004a82:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a84:	e009      	b.n	8004a9a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a86:	f7fc ff63 	bl	8001950 <HAL_GetTick>
 8004a8a:	0002      	movs	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	4a79      	ldr	r2, [pc, #484]	; (8004c78 <HAL_RCC_OscConfig+0x620>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e0e6      	b.n	8004c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a9a:	4b75      	ldr	r3, [pc, #468]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	d0f0      	beq.n	8004a86 <HAL_RCC_OscConfig+0x42e>
 8004aa4:	e013      	b.n	8004ace <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa6:	f7fc ff53 	bl	8001950 <HAL_GetTick>
 8004aaa:	0003      	movs	r3, r0
 8004aac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004aae:	e009      	b.n	8004ac4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ab0:	f7fc ff4e 	bl	8001950 <HAL_GetTick>
 8004ab4:	0002      	movs	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	4a6f      	ldr	r2, [pc, #444]	; (8004c78 <HAL_RCC_OscConfig+0x620>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e0d1      	b.n	8004c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ac4:	4b6a      	ldr	r3, [pc, #424]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac8:	2202      	movs	r2, #2
 8004aca:	4013      	ands	r3, r2
 8004acc:	d1f0      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004ace:	231f      	movs	r3, #31
 8004ad0:	18fb      	adds	r3, r7, r3
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d105      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004ad8:	4b65      	ldr	r3, [pc, #404]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004ada:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004adc:	4b64      	ldr	r3, [pc, #400]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004ade:	4967      	ldr	r1, [pc, #412]	; (8004c7c <HAL_RCC_OscConfig+0x624>)
 8004ae0:	400a      	ands	r2, r1
 8004ae2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d100      	bne.n	8004aee <HAL_RCC_OscConfig+0x496>
 8004aec:	e0bb      	b.n	8004c66 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aee:	4b60      	ldr	r3, [pc, #384]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2238      	movs	r2, #56	; 0x38
 8004af4:	4013      	ands	r3, r2
 8004af6:	2b10      	cmp	r3, #16
 8004af8:	d100      	bne.n	8004afc <HAL_RCC_OscConfig+0x4a4>
 8004afa:	e07b      	b.n	8004bf4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d156      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b04:	4b5a      	ldr	r3, [pc, #360]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	4b59      	ldr	r3, [pc, #356]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004b0a:	495d      	ldr	r1, [pc, #372]	; (8004c80 <HAL_RCC_OscConfig+0x628>)
 8004b0c:	400a      	ands	r2, r1
 8004b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b10:	f7fc ff1e 	bl	8001950 <HAL_GetTick>
 8004b14:	0003      	movs	r3, r0
 8004b16:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1a:	f7fc ff19 	bl	8001950 <HAL_GetTick>
 8004b1e:	0002      	movs	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e09d      	b.n	8004c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b2c:	4b50      	ldr	r3, [pc, #320]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	2380      	movs	r3, #128	; 0x80
 8004b32:	049b      	lsls	r3, r3, #18
 8004b34:	4013      	ands	r3, r2
 8004b36:	d1f0      	bne.n	8004b1a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b38:	4b4d      	ldr	r3, [pc, #308]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	4a51      	ldr	r2, [pc, #324]	; (8004c84 <HAL_RCC_OscConfig+0x62c>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	0019      	movs	r1, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1a      	ldr	r2, [r3, #32]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b64:	431a      	orrs	r2, r3
 8004b66:	4b42      	ldr	r3, [pc, #264]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b6c:	4b40      	ldr	r3, [pc, #256]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4b3f      	ldr	r3, [pc, #252]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004b72:	2180      	movs	r1, #128	; 0x80
 8004b74:	0449      	lsls	r1, r1, #17
 8004b76:	430a      	orrs	r2, r1
 8004b78:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004b7a:	4b3d      	ldr	r3, [pc, #244]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	4b3c      	ldr	r3, [pc, #240]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004b80:	2180      	movs	r1, #128	; 0x80
 8004b82:	0549      	lsls	r1, r1, #21
 8004b84:	430a      	orrs	r2, r1
 8004b86:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b88:	f7fc fee2 	bl	8001950 <HAL_GetTick>
 8004b8c:	0003      	movs	r3, r0
 8004b8e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b92:	f7fc fedd 	bl	8001950 <HAL_GetTick>
 8004b96:	0002      	movs	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e061      	b.n	8004c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ba4:	4b32      	ldr	r3, [pc, #200]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	2380      	movs	r3, #128	; 0x80
 8004baa:	049b      	lsls	r3, r3, #18
 8004bac:	4013      	ands	r3, r2
 8004bae:	d0f0      	beq.n	8004b92 <HAL_RCC_OscConfig+0x53a>
 8004bb0:	e059      	b.n	8004c66 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb2:	4b2f      	ldr	r3, [pc, #188]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	4b2e      	ldr	r3, [pc, #184]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004bb8:	4931      	ldr	r1, [pc, #196]	; (8004c80 <HAL_RCC_OscConfig+0x628>)
 8004bba:	400a      	ands	r2, r1
 8004bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbe:	f7fc fec7 	bl	8001950 <HAL_GetTick>
 8004bc2:	0003      	movs	r3, r0
 8004bc4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc8:	f7fc fec2 	bl	8001950 <HAL_GetTick>
 8004bcc:	0002      	movs	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e046      	b.n	8004c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bda:	4b25      	ldr	r3, [pc, #148]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	2380      	movs	r3, #128	; 0x80
 8004be0:	049b      	lsls	r3, r3, #18
 8004be2:	4013      	ands	r3, r2
 8004be4:	d1f0      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004be6:	4b22      	ldr	r3, [pc, #136]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004be8:	68da      	ldr	r2, [r3, #12]
 8004bea:	4b21      	ldr	r3, [pc, #132]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004bec:	4926      	ldr	r1, [pc, #152]	; (8004c88 <HAL_RCC_OscConfig+0x630>)
 8004bee:	400a      	ands	r2, r1
 8004bf0:	60da      	str	r2, [r3, #12]
 8004bf2:	e038      	b.n	8004c66 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e033      	b.n	8004c68 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004c00:	4b1b      	ldr	r3, [pc, #108]	; (8004c70 <HAL_RCC_OscConfig+0x618>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2203      	movs	r2, #3
 8004c0a:	401a      	ands	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d126      	bne.n	8004c62 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	2270      	movs	r2, #112	; 0x70
 8004c18:	401a      	ands	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d11f      	bne.n	8004c62 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	23fe      	movs	r3, #254	; 0xfe
 8004c26:	01db      	lsls	r3, r3, #7
 8004c28:	401a      	ands	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d116      	bne.n	8004c62 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	23f8      	movs	r3, #248	; 0xf8
 8004c38:	039b      	lsls	r3, r3, #14
 8004c3a:	401a      	ands	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d10e      	bne.n	8004c62 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	23e0      	movs	r3, #224	; 0xe0
 8004c48:	051b      	lsls	r3, r3, #20
 8004c4a:	401a      	ands	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d106      	bne.n	8004c62 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	0f5b      	lsrs	r3, r3, #29
 8004c58:	075a      	lsls	r2, r3, #29
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d001      	beq.n	8004c66 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	0018      	movs	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	b008      	add	sp, #32
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40021000 	.word	0x40021000
 8004c74:	40007000 	.word	0x40007000
 8004c78:	00001388 	.word	0x00001388
 8004c7c:	efffffff 	.word	0xefffffff
 8004c80:	feffffff 	.word	0xfeffffff
 8004c84:	11c1808c 	.word	0x11c1808c
 8004c88:	eefefffc 	.word	0xeefefffc

08004c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e0e9      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ca0:	4b76      	ldr	r3, [pc, #472]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2207      	movs	r2, #7
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d91e      	bls.n	8004cec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cae:	4b73      	ldr	r3, [pc, #460]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2207      	movs	r2, #7
 8004cb4:	4393      	bics	r3, r2
 8004cb6:	0019      	movs	r1, r3
 8004cb8:	4b70      	ldr	r3, [pc, #448]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004cc0:	f7fc fe46 	bl	8001950 <HAL_GetTick>
 8004cc4:	0003      	movs	r3, r0
 8004cc6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004cc8:	e009      	b.n	8004cde <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cca:	f7fc fe41 	bl	8001950 <HAL_GetTick>
 8004cce:	0002      	movs	r2, r0
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	4a6a      	ldr	r2, [pc, #424]	; (8004e80 <HAL_RCC_ClockConfig+0x1f4>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e0ca      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004cde:	4b67      	ldr	r3, [pc, #412]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2207      	movs	r2, #7
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d1ee      	bne.n	8004cca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	d015      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2204      	movs	r2, #4
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d006      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004d00:	4b60      	ldr	r3, [pc, #384]	; (8004e84 <HAL_RCC_ClockConfig+0x1f8>)
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	4b5f      	ldr	r3, [pc, #380]	; (8004e84 <HAL_RCC_ClockConfig+0x1f8>)
 8004d06:	21e0      	movs	r1, #224	; 0xe0
 8004d08:	01c9      	lsls	r1, r1, #7
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d0e:	4b5d      	ldr	r3, [pc, #372]	; (8004e84 <HAL_RCC_ClockConfig+0x1f8>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	4a5d      	ldr	r2, [pc, #372]	; (8004e88 <HAL_RCC_ClockConfig+0x1fc>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	0019      	movs	r1, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	4b59      	ldr	r3, [pc, #356]	; (8004e84 <HAL_RCC_ClockConfig+0x1f8>)
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2201      	movs	r2, #1
 8004d28:	4013      	ands	r3, r2
 8004d2a:	d057      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d107      	bne.n	8004d44 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d34:	4b53      	ldr	r3, [pc, #332]	; (8004e84 <HAL_RCC_ClockConfig+0x1f8>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	2380      	movs	r3, #128	; 0x80
 8004d3a:	029b      	lsls	r3, r3, #10
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	d12b      	bne.n	8004d98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e097      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d107      	bne.n	8004d5c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d4c:	4b4d      	ldr	r3, [pc, #308]	; (8004e84 <HAL_RCC_ClockConfig+0x1f8>)
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	2380      	movs	r3, #128	; 0x80
 8004d52:	049b      	lsls	r3, r3, #18
 8004d54:	4013      	ands	r3, r2
 8004d56:	d11f      	bne.n	8004d98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e08b      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d107      	bne.n	8004d74 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d64:	4b47      	ldr	r3, [pc, #284]	; (8004e84 <HAL_RCC_ClockConfig+0x1f8>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	2380      	movs	r3, #128	; 0x80
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	d113      	bne.n	8004d98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e07f      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d106      	bne.n	8004d8a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d7c:	4b41      	ldr	r3, [pc, #260]	; (8004e84 <HAL_RCC_ClockConfig+0x1f8>)
 8004d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d80:	2202      	movs	r2, #2
 8004d82:	4013      	ands	r3, r2
 8004d84:	d108      	bne.n	8004d98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e074      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d8a:	4b3e      	ldr	r3, [pc, #248]	; (8004e84 <HAL_RCC_ClockConfig+0x1f8>)
 8004d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d8e:	2202      	movs	r2, #2
 8004d90:	4013      	ands	r3, r2
 8004d92:	d101      	bne.n	8004d98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e06d      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d98:	4b3a      	ldr	r3, [pc, #232]	; (8004e84 <HAL_RCC_ClockConfig+0x1f8>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2207      	movs	r2, #7
 8004d9e:	4393      	bics	r3, r2
 8004da0:	0019      	movs	r1, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	4b37      	ldr	r3, [pc, #220]	; (8004e84 <HAL_RCC_ClockConfig+0x1f8>)
 8004da8:	430a      	orrs	r2, r1
 8004daa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dac:	f7fc fdd0 	bl	8001950 <HAL_GetTick>
 8004db0:	0003      	movs	r3, r0
 8004db2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db4:	e009      	b.n	8004dca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004db6:	f7fc fdcb 	bl	8001950 <HAL_GetTick>
 8004dba:	0002      	movs	r2, r0
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	4a2f      	ldr	r2, [pc, #188]	; (8004e80 <HAL_RCC_ClockConfig+0x1f4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e054      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dca:	4b2e      	ldr	r3, [pc, #184]	; (8004e84 <HAL_RCC_ClockConfig+0x1f8>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2238      	movs	r2, #56	; 0x38
 8004dd0:	401a      	ands	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d1ec      	bne.n	8004db6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ddc:	4b27      	ldr	r3, [pc, #156]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2207      	movs	r2, #7
 8004de2:	4013      	ands	r3, r2
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d21e      	bcs.n	8004e28 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dea:	4b24      	ldr	r3, [pc, #144]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2207      	movs	r2, #7
 8004df0:	4393      	bics	r3, r2
 8004df2:	0019      	movs	r1, r3
 8004df4:	4b21      	ldr	r3, [pc, #132]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004dfc:	f7fc fda8 	bl	8001950 <HAL_GetTick>
 8004e00:	0003      	movs	r3, r0
 8004e02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e04:	e009      	b.n	8004e1a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e06:	f7fc fda3 	bl	8001950 <HAL_GetTick>
 8004e0a:	0002      	movs	r2, r0
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	4a1b      	ldr	r2, [pc, #108]	; (8004e80 <HAL_RCC_ClockConfig+0x1f4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e02c      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e1a:	4b18      	ldr	r3, [pc, #96]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2207      	movs	r2, #7
 8004e20:	4013      	ands	r3, r2
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d1ee      	bne.n	8004e06 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2204      	movs	r2, #4
 8004e2e:	4013      	ands	r3, r2
 8004e30:	d009      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004e32:	4b14      	ldr	r3, [pc, #80]	; (8004e84 <HAL_RCC_ClockConfig+0x1f8>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	4a15      	ldr	r2, [pc, #84]	; (8004e8c <HAL_RCC_ClockConfig+0x200>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	0019      	movs	r1, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	4b10      	ldr	r3, [pc, #64]	; (8004e84 <HAL_RCC_ClockConfig+0x1f8>)
 8004e42:	430a      	orrs	r2, r1
 8004e44:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004e46:	f000 f829 	bl	8004e9c <HAL_RCC_GetSysClockFreq>
 8004e4a:	0001      	movs	r1, r0
 8004e4c:	4b0d      	ldr	r3, [pc, #52]	; (8004e84 <HAL_RCC_ClockConfig+0x1f8>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	0a1b      	lsrs	r3, r3, #8
 8004e52:	220f      	movs	r2, #15
 8004e54:	401a      	ands	r2, r3
 8004e56:	4b0e      	ldr	r3, [pc, #56]	; (8004e90 <HAL_RCC_ClockConfig+0x204>)
 8004e58:	0092      	lsls	r2, r2, #2
 8004e5a:	58d3      	ldr	r3, [r2, r3]
 8004e5c:	221f      	movs	r2, #31
 8004e5e:	4013      	ands	r3, r2
 8004e60:	000a      	movs	r2, r1
 8004e62:	40da      	lsrs	r2, r3
 8004e64:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <HAL_RCC_ClockConfig+0x208>)
 8004e66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004e68:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <HAL_RCC_ClockConfig+0x20c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f7fc fd13 	bl	8001898 <HAL_InitTick>
 8004e72:	0003      	movs	r3, r0
}
 8004e74:	0018      	movs	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b004      	add	sp, #16
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40022000 	.word	0x40022000
 8004e80:	00001388 	.word	0x00001388
 8004e84:	40021000 	.word	0x40021000
 8004e88:	fffff0ff 	.word	0xfffff0ff
 8004e8c:	ffff8fff 	.word	0xffff8fff
 8004e90:	080092dc 	.word	0x080092dc
 8004e94:	20000014 	.word	0x20000014
 8004e98:	20000000 	.word	0x20000000

08004e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ea2:	4b3c      	ldr	r3, [pc, #240]	; (8004f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	2238      	movs	r2, #56	; 0x38
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	d10f      	bne.n	8004ecc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004eac:	4b39      	ldr	r3, [pc, #228]	; (8004f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	0adb      	lsrs	r3, r3, #11
 8004eb2:	2207      	movs	r2, #7
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	409a      	lsls	r2, r3
 8004eba:	0013      	movs	r3, r2
 8004ebc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004ebe:	6839      	ldr	r1, [r7, #0]
 8004ec0:	4835      	ldr	r0, [pc, #212]	; (8004f98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004ec2:	f7fb f929 	bl	8000118 <__udivsi3>
 8004ec6:	0003      	movs	r3, r0
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	e05d      	b.n	8004f88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ecc:	4b31      	ldr	r3, [pc, #196]	; (8004f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2238      	movs	r2, #56	; 0x38
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d102      	bne.n	8004ede <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ed8:	4b30      	ldr	r3, [pc, #192]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x100>)
 8004eda:	613b      	str	r3, [r7, #16]
 8004edc:	e054      	b.n	8004f88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ede:	4b2d      	ldr	r3, [pc, #180]	; (8004f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	2238      	movs	r2, #56	; 0x38
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	2b10      	cmp	r3, #16
 8004ee8:	d138      	bne.n	8004f5c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004eea:	4b2a      	ldr	r3, [pc, #168]	; (8004f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	2203      	movs	r2, #3
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ef4:	4b27      	ldr	r3, [pc, #156]	; (8004f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	091b      	lsrs	r3, r3, #4
 8004efa:	2207      	movs	r2, #7
 8004efc:	4013      	ands	r3, r2
 8004efe:	3301      	adds	r3, #1
 8004f00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d10d      	bne.n	8004f24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	4824      	ldr	r0, [pc, #144]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x100>)
 8004f0c:	f7fb f904 	bl	8000118 <__udivsi3>
 8004f10:	0003      	movs	r3, r0
 8004f12:	0019      	movs	r1, r3
 8004f14:	4b1f      	ldr	r3, [pc, #124]	; (8004f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	0a1b      	lsrs	r3, r3, #8
 8004f1a:	227f      	movs	r2, #127	; 0x7f
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	434b      	muls	r3, r1
 8004f20:	617b      	str	r3, [r7, #20]
        break;
 8004f22:	e00d      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	481c      	ldr	r0, [pc, #112]	; (8004f98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004f28:	f7fb f8f6 	bl	8000118 <__udivsi3>
 8004f2c:	0003      	movs	r3, r0
 8004f2e:	0019      	movs	r1, r3
 8004f30:	4b18      	ldr	r3, [pc, #96]	; (8004f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	0a1b      	lsrs	r3, r3, #8
 8004f36:	227f      	movs	r2, #127	; 0x7f
 8004f38:	4013      	ands	r3, r2
 8004f3a:	434b      	muls	r3, r1
 8004f3c:	617b      	str	r3, [r7, #20]
        break;
 8004f3e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004f40:	4b14      	ldr	r3, [pc, #80]	; (8004f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	0f5b      	lsrs	r3, r3, #29
 8004f46:	2207      	movs	r2, #7
 8004f48:	4013      	ands	r3, r2
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004f4e:	6879      	ldr	r1, [r7, #4]
 8004f50:	6978      	ldr	r0, [r7, #20]
 8004f52:	f7fb f8e1 	bl	8000118 <__udivsi3>
 8004f56:	0003      	movs	r3, r0
 8004f58:	613b      	str	r3, [r7, #16]
 8004f5a:	e015      	b.n	8004f88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004f5c:	4b0d      	ldr	r3, [pc, #52]	; (8004f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2238      	movs	r2, #56	; 0x38
 8004f62:	4013      	ands	r3, r2
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d103      	bne.n	8004f70 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004f68:	2380      	movs	r3, #128	; 0x80
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	613b      	str	r3, [r7, #16]
 8004f6e:	e00b      	b.n	8004f88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004f70:	4b08      	ldr	r3, [pc, #32]	; (8004f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	2238      	movs	r2, #56	; 0x38
 8004f76:	4013      	ands	r3, r2
 8004f78:	2b18      	cmp	r3, #24
 8004f7a:	d103      	bne.n	8004f84 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004f7c:	23fa      	movs	r3, #250	; 0xfa
 8004f7e:	01db      	lsls	r3, r3, #7
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	e001      	b.n	8004f88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004f88:	693b      	ldr	r3, [r7, #16]
}
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	b006      	add	sp, #24
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	46c0      	nop			; (mov r8, r8)
 8004f94:	40021000 	.word	0x40021000
 8004f98:	00f42400 	.word	0x00f42400
 8004f9c:	007a1200 	.word	0x007a1200

08004fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004fa8:	2313      	movs	r3, #19
 8004faa:	18fb      	adds	r3, r7, r3
 8004fac:	2200      	movs	r2, #0
 8004fae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fb0:	2312      	movs	r3, #18
 8004fb2:	18fb      	adds	r3, r7, r3
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	2380      	movs	r3, #128	; 0x80
 8004fbe:	029b      	lsls	r3, r3, #10
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d100      	bne.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004fc4:	e0a3      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fc6:	2011      	movs	r0, #17
 8004fc8:	183b      	adds	r3, r7, r0
 8004fca:	2200      	movs	r2, #0
 8004fcc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fce:	4bc3      	ldr	r3, [pc, #780]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fd2:	2380      	movs	r3, #128	; 0x80
 8004fd4:	055b      	lsls	r3, r3, #21
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	d110      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fda:	4bc0      	ldr	r3, [pc, #768]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fde:	4bbf      	ldr	r3, [pc, #764]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fe0:	2180      	movs	r1, #128	; 0x80
 8004fe2:	0549      	lsls	r1, r1, #21
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	63da      	str	r2, [r3, #60]	; 0x3c
 8004fe8:	4bbc      	ldr	r3, [pc, #752]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fec:	2380      	movs	r3, #128	; 0x80
 8004fee:	055b      	lsls	r3, r3, #21
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	60bb      	str	r3, [r7, #8]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ff6:	183b      	adds	r3, r7, r0
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ffc:	4bb8      	ldr	r3, [pc, #736]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	4bb7      	ldr	r3, [pc, #732]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005002:	2180      	movs	r1, #128	; 0x80
 8005004:	0049      	lsls	r1, r1, #1
 8005006:	430a      	orrs	r2, r1
 8005008:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800500a:	f7fc fca1 	bl	8001950 <HAL_GetTick>
 800500e:	0003      	movs	r3, r0
 8005010:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005012:	e00b      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005014:	f7fc fc9c 	bl	8001950 <HAL_GetTick>
 8005018:	0002      	movs	r2, r0
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d904      	bls.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005022:	2313      	movs	r3, #19
 8005024:	18fb      	adds	r3, r7, r3
 8005026:	2203      	movs	r2, #3
 8005028:	701a      	strb	r2, [r3, #0]
        break;
 800502a:	e005      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800502c:	4bac      	ldr	r3, [pc, #688]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	2380      	movs	r3, #128	; 0x80
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	4013      	ands	r3, r2
 8005036:	d0ed      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005038:	2313      	movs	r3, #19
 800503a:	18fb      	adds	r3, r7, r3
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d154      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005042:	4ba6      	ldr	r3, [pc, #664]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005044:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005046:	23c0      	movs	r3, #192	; 0xc0
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4013      	ands	r3, r2
 800504c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d019      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	429a      	cmp	r2, r3
 800505c:	d014      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800505e:	4b9f      	ldr	r3, [pc, #636]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005062:	4aa0      	ldr	r2, [pc, #640]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005064:	4013      	ands	r3, r2
 8005066:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005068:	4b9c      	ldr	r3, [pc, #624]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800506a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800506c:	4b9b      	ldr	r3, [pc, #620]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800506e:	2180      	movs	r1, #128	; 0x80
 8005070:	0249      	lsls	r1, r1, #9
 8005072:	430a      	orrs	r2, r1
 8005074:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005076:	4b99      	ldr	r3, [pc, #612]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005078:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800507a:	4b98      	ldr	r3, [pc, #608]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800507c:	499a      	ldr	r1, [pc, #616]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800507e:	400a      	ands	r2, r1
 8005080:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005082:	4b96      	ldr	r3, [pc, #600]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2201      	movs	r2, #1
 800508c:	4013      	ands	r3, r2
 800508e:	d016      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005090:	f7fc fc5e 	bl	8001950 <HAL_GetTick>
 8005094:	0003      	movs	r3, r0
 8005096:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005098:	e00c      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509a:	f7fc fc59 	bl	8001950 <HAL_GetTick>
 800509e:	0002      	movs	r2, r0
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	4a91      	ldr	r2, [pc, #580]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d904      	bls.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80050aa:	2313      	movs	r3, #19
 80050ac:	18fb      	adds	r3, r7, r3
 80050ae:	2203      	movs	r2, #3
 80050b0:	701a      	strb	r2, [r3, #0]
            break;
 80050b2:	e004      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050b4:	4b89      	ldr	r3, [pc, #548]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b8:	2202      	movs	r2, #2
 80050ba:	4013      	ands	r3, r2
 80050bc:	d0ed      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80050be:	2313      	movs	r3, #19
 80050c0:	18fb      	adds	r3, r7, r3
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10a      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050c8:	4b84      	ldr	r3, [pc, #528]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050cc:	4a85      	ldr	r2, [pc, #532]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	0019      	movs	r1, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050d6:	4b81      	ldr	r3, [pc, #516]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050d8:	430a      	orrs	r2, r1
 80050da:	65da      	str	r2, [r3, #92]	; 0x5c
 80050dc:	e00c      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050de:	2312      	movs	r3, #18
 80050e0:	18fb      	adds	r3, r7, r3
 80050e2:	2213      	movs	r2, #19
 80050e4:	18ba      	adds	r2, r7, r2
 80050e6:	7812      	ldrb	r2, [r2, #0]
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	e005      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ec:	2312      	movs	r3, #18
 80050ee:	18fb      	adds	r3, r7, r3
 80050f0:	2213      	movs	r2, #19
 80050f2:	18ba      	adds	r2, r7, r2
 80050f4:	7812      	ldrb	r2, [r2, #0]
 80050f6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050f8:	2311      	movs	r3, #17
 80050fa:	18fb      	adds	r3, r7, r3
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d105      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005102:	4b76      	ldr	r3, [pc, #472]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005104:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005106:	4b75      	ldr	r3, [pc, #468]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005108:	4979      	ldr	r1, [pc, #484]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800510a:	400a      	ands	r2, r1
 800510c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2201      	movs	r2, #1
 8005114:	4013      	ands	r3, r2
 8005116:	d009      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005118:	4b70      	ldr	r3, [pc, #448]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800511a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511c:	2203      	movs	r2, #3
 800511e:	4393      	bics	r3, r2
 8005120:	0019      	movs	r1, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	4b6d      	ldr	r3, [pc, #436]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005128:	430a      	orrs	r2, r1
 800512a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2202      	movs	r2, #2
 8005132:	4013      	ands	r3, r2
 8005134:	d009      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005136:	4b69      	ldr	r3, [pc, #420]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513a:	220c      	movs	r2, #12
 800513c:	4393      	bics	r3, r2
 800513e:	0019      	movs	r1, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	4b65      	ldr	r3, [pc, #404]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005146:	430a      	orrs	r2, r1
 8005148:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2210      	movs	r2, #16
 8005150:	4013      	ands	r3, r2
 8005152:	d009      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005154:	4b61      	ldr	r3, [pc, #388]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005158:	4a66      	ldr	r2, [pc, #408]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800515a:	4013      	ands	r3, r2
 800515c:	0019      	movs	r1, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	4b5e      	ldr	r3, [pc, #376]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005164:	430a      	orrs	r2, r1
 8005166:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	2380      	movs	r3, #128	; 0x80
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4013      	ands	r3, r2
 8005172:	d009      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005174:	4b59      	ldr	r3, [pc, #356]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005178:	4a5f      	ldr	r2, [pc, #380]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800517a:	4013      	ands	r3, r2
 800517c:	0019      	movs	r1, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	4b56      	ldr	r3, [pc, #344]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005184:	430a      	orrs	r2, r1
 8005186:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	2380      	movs	r3, #128	; 0x80
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	4013      	ands	r3, r2
 8005192:	d009      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005194:	4b51      	ldr	r3, [pc, #324]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005198:	4a58      	ldr	r2, [pc, #352]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800519a:	4013      	ands	r3, r2
 800519c:	0019      	movs	r1, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69da      	ldr	r2, [r3, #28]
 80051a2:	4b4e      	ldr	r3, [pc, #312]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051a4:	430a      	orrs	r2, r1
 80051a6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2220      	movs	r2, #32
 80051ae:	4013      	ands	r3, r2
 80051b0:	d009      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051b2:	4b4a      	ldr	r3, [pc, #296]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b6:	4a52      	ldr	r2, [pc, #328]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80051b8:	4013      	ands	r3, r2
 80051ba:	0019      	movs	r1, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	4b46      	ldr	r3, [pc, #280]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051c2:	430a      	orrs	r2, r1
 80051c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	2380      	movs	r3, #128	; 0x80
 80051cc:	01db      	lsls	r3, r3, #7
 80051ce:	4013      	ands	r3, r2
 80051d0:	d015      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051d2:	4b42      	ldr	r3, [pc, #264]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	0899      	lsrs	r1, r3, #2
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1a      	ldr	r2, [r3, #32]
 80051de:	4b3f      	ldr	r3, [pc, #252]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051e0:	430a      	orrs	r2, r1
 80051e2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a1a      	ldr	r2, [r3, #32]
 80051e8:	2380      	movs	r3, #128	; 0x80
 80051ea:	05db      	lsls	r3, r3, #23
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d106      	bne.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80051f0:	4b3a      	ldr	r3, [pc, #232]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	4b39      	ldr	r3, [pc, #228]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051f6:	2180      	movs	r1, #128	; 0x80
 80051f8:	0249      	lsls	r1, r1, #9
 80051fa:	430a      	orrs	r2, r1
 80051fc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	2380      	movs	r3, #128	; 0x80
 8005204:	031b      	lsls	r3, r3, #12
 8005206:	4013      	ands	r3, r2
 8005208:	d009      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800520a:	4b34      	ldr	r3, [pc, #208]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800520c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520e:	2240      	movs	r2, #64	; 0x40
 8005210:	4393      	bics	r3, r2
 8005212:	0019      	movs	r1, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005218:	4b30      	ldr	r3, [pc, #192]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800521a:	430a      	orrs	r2, r1
 800521c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	2380      	movs	r3, #128	; 0x80
 8005224:	039b      	lsls	r3, r3, #14
 8005226:	4013      	ands	r3, r2
 8005228:	d016      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800522a:	4b2c      	ldr	r3, [pc, #176]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800522c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522e:	4a35      	ldr	r2, [pc, #212]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005230:	4013      	ands	r3, r2
 8005232:	0019      	movs	r1, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005238:	4b28      	ldr	r3, [pc, #160]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800523a:	430a      	orrs	r2, r1
 800523c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005242:	2380      	movs	r3, #128	; 0x80
 8005244:	03db      	lsls	r3, r3, #15
 8005246:	429a      	cmp	r2, r3
 8005248:	d106      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800524a:	4b24      	ldr	r3, [pc, #144]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	4b23      	ldr	r3, [pc, #140]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005250:	2180      	movs	r1, #128	; 0x80
 8005252:	0449      	lsls	r1, r1, #17
 8005254:	430a      	orrs	r2, r1
 8005256:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	2380      	movs	r3, #128	; 0x80
 800525e:	03db      	lsls	r3, r3, #15
 8005260:	4013      	ands	r3, r2
 8005262:	d016      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005264:	4b1d      	ldr	r3, [pc, #116]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005268:	4a27      	ldr	r2, [pc, #156]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800526a:	4013      	ands	r3, r2
 800526c:	0019      	movs	r1, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005272:	4b1a      	ldr	r3, [pc, #104]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005274:	430a      	orrs	r2, r1
 8005276:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527c:	2380      	movs	r3, #128	; 0x80
 800527e:	045b      	lsls	r3, r3, #17
 8005280:	429a      	cmp	r2, r3
 8005282:	d106      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005284:	4b15      	ldr	r3, [pc, #84]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	4b14      	ldr	r3, [pc, #80]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800528a:	2180      	movs	r1, #128	; 0x80
 800528c:	0449      	lsls	r1, r1, #17
 800528e:	430a      	orrs	r2, r1
 8005290:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	2380      	movs	r3, #128	; 0x80
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	4013      	ands	r3, r2
 800529c:	d016      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800529e:	4b0f      	ldr	r3, [pc, #60]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a2:	4a1a      	ldr	r2, [pc, #104]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	0019      	movs	r1, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	695a      	ldr	r2, [r3, #20]
 80052ac:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052ae:	430a      	orrs	r2, r1
 80052b0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695a      	ldr	r2, [r3, #20]
 80052b6:	2380      	movs	r3, #128	; 0x80
 80052b8:	01db      	lsls	r3, r3, #7
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d106      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80052be:	4b07      	ldr	r3, [pc, #28]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	4b06      	ldr	r3, [pc, #24]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052c4:	2180      	movs	r1, #128	; 0x80
 80052c6:	0249      	lsls	r1, r1, #9
 80052c8:	430a      	orrs	r2, r1
 80052ca:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80052cc:	2312      	movs	r3, #18
 80052ce:	18fb      	adds	r3, r7, r3
 80052d0:	781b      	ldrb	r3, [r3, #0]
}
 80052d2:	0018      	movs	r0, r3
 80052d4:	46bd      	mov	sp, r7
 80052d6:	b006      	add	sp, #24
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	40021000 	.word	0x40021000
 80052e0:	40007000 	.word	0x40007000
 80052e4:	fffffcff 	.word	0xfffffcff
 80052e8:	fffeffff 	.word	0xfffeffff
 80052ec:	00001388 	.word	0x00001388
 80052f0:	efffffff 	.word	0xefffffff
 80052f4:	fffff3ff 	.word	0xfffff3ff
 80052f8:	fff3ffff 	.word	0xfff3ffff
 80052fc:	ffcfffff 	.word	0xffcfffff
 8005300:	ffffcfff 	.word	0xffffcfff
 8005304:	ffbfffff 	.word	0xffbfffff
 8005308:	feffffff 	.word	0xfeffffff
 800530c:	ffff3fff 	.word	0xffff3fff

08005310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e04a      	b.n	80053b8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	223d      	movs	r2, #61	; 0x3d
 8005326:	5c9b      	ldrb	r3, [r3, r2]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d107      	bne.n	800533e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	223c      	movs	r2, #60	; 0x3c
 8005332:	2100      	movs	r1, #0
 8005334:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	0018      	movs	r0, r3
 800533a:	f002 fb71 	bl	8007a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	223d      	movs	r2, #61	; 0x3d
 8005342:	2102      	movs	r1, #2
 8005344:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3304      	adds	r3, #4
 800534e:	0019      	movs	r1, r3
 8005350:	0010      	movs	r0, r2
 8005352:	f000 fcc3 	bl	8005cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2248      	movs	r2, #72	; 0x48
 800535a:	2101      	movs	r1, #1
 800535c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	223e      	movs	r2, #62	; 0x3e
 8005362:	2101      	movs	r1, #1
 8005364:	5499      	strb	r1, [r3, r2]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	223f      	movs	r2, #63	; 0x3f
 800536a:	2101      	movs	r1, #1
 800536c:	5499      	strb	r1, [r3, r2]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2240      	movs	r2, #64	; 0x40
 8005372:	2101      	movs	r1, #1
 8005374:	5499      	strb	r1, [r3, r2]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2241      	movs	r2, #65	; 0x41
 800537a:	2101      	movs	r1, #1
 800537c:	5499      	strb	r1, [r3, r2]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2242      	movs	r2, #66	; 0x42
 8005382:	2101      	movs	r1, #1
 8005384:	5499      	strb	r1, [r3, r2]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2243      	movs	r2, #67	; 0x43
 800538a:	2101      	movs	r1, #1
 800538c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2244      	movs	r2, #68	; 0x44
 8005392:	2101      	movs	r1, #1
 8005394:	5499      	strb	r1, [r3, r2]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2245      	movs	r2, #69	; 0x45
 800539a:	2101      	movs	r1, #1
 800539c:	5499      	strb	r1, [r3, r2]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2246      	movs	r2, #70	; 0x46
 80053a2:	2101      	movs	r1, #1
 80053a4:	5499      	strb	r1, [r3, r2]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2247      	movs	r2, #71	; 0x47
 80053aa:	2101      	movs	r1, #1
 80053ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	223d      	movs	r2, #61	; 0x3d
 80053b2:	2101      	movs	r1, #1
 80053b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	0018      	movs	r0, r3
 80053ba:	46bd      	mov	sp, r7
 80053bc:	b002      	add	sp, #8
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e04a      	b.n	8005468 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	223d      	movs	r2, #61	; 0x3d
 80053d6:	5c9b      	ldrb	r3, [r3, r2]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d107      	bne.n	80053ee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	223c      	movs	r2, #60	; 0x3c
 80053e2:	2100      	movs	r1, #0
 80053e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	0018      	movs	r0, r3
 80053ea:	f000 f841 	bl	8005470 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	223d      	movs	r2, #61	; 0x3d
 80053f2:	2102      	movs	r1, #2
 80053f4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3304      	adds	r3, #4
 80053fe:	0019      	movs	r1, r3
 8005400:	0010      	movs	r0, r2
 8005402:	f000 fc6b 	bl	8005cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2248      	movs	r2, #72	; 0x48
 800540a:	2101      	movs	r1, #1
 800540c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	223e      	movs	r2, #62	; 0x3e
 8005412:	2101      	movs	r1, #1
 8005414:	5499      	strb	r1, [r3, r2]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	223f      	movs	r2, #63	; 0x3f
 800541a:	2101      	movs	r1, #1
 800541c:	5499      	strb	r1, [r3, r2]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2240      	movs	r2, #64	; 0x40
 8005422:	2101      	movs	r1, #1
 8005424:	5499      	strb	r1, [r3, r2]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2241      	movs	r2, #65	; 0x41
 800542a:	2101      	movs	r1, #1
 800542c:	5499      	strb	r1, [r3, r2]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2242      	movs	r2, #66	; 0x42
 8005432:	2101      	movs	r1, #1
 8005434:	5499      	strb	r1, [r3, r2]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2243      	movs	r2, #67	; 0x43
 800543a:	2101      	movs	r1, #1
 800543c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2244      	movs	r2, #68	; 0x44
 8005442:	2101      	movs	r1, #1
 8005444:	5499      	strb	r1, [r3, r2]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2245      	movs	r2, #69	; 0x45
 800544a:	2101      	movs	r1, #1
 800544c:	5499      	strb	r1, [r3, r2]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2246      	movs	r2, #70	; 0x46
 8005452:	2101      	movs	r1, #1
 8005454:	5499      	strb	r1, [r3, r2]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2247      	movs	r2, #71	; 0x47
 800545a:	2101      	movs	r1, #1
 800545c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	223d      	movs	r2, #61	; 0x3d
 8005462:	2101      	movs	r1, #1
 8005464:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	0018      	movs	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	b002      	add	sp, #8
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005478:	46c0      	nop			; (mov r8, r8)
 800547a:	46bd      	mov	sp, r7
 800547c:	b002      	add	sp, #8
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800548a:	230f      	movs	r3, #15
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	2200      	movs	r2, #0
 8005490:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d108      	bne.n	80054aa <HAL_TIM_PWM_Start_IT+0x2a>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	223e      	movs	r2, #62	; 0x3e
 800549c:	5c9b      	ldrb	r3, [r3, r2]
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	3b01      	subs	r3, #1
 80054a2:	1e5a      	subs	r2, r3, #1
 80054a4:	4193      	sbcs	r3, r2
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	e037      	b.n	800551a <HAL_TIM_PWM_Start_IT+0x9a>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d108      	bne.n	80054c2 <HAL_TIM_PWM_Start_IT+0x42>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	223f      	movs	r2, #63	; 0x3f
 80054b4:	5c9b      	ldrb	r3, [r3, r2]
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	1e5a      	subs	r2, r3, #1
 80054bc:	4193      	sbcs	r3, r2
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	e02b      	b.n	800551a <HAL_TIM_PWM_Start_IT+0x9a>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d108      	bne.n	80054da <HAL_TIM_PWM_Start_IT+0x5a>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2240      	movs	r2, #64	; 0x40
 80054cc:	5c9b      	ldrb	r3, [r3, r2]
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	3b01      	subs	r3, #1
 80054d2:	1e5a      	subs	r2, r3, #1
 80054d4:	4193      	sbcs	r3, r2
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	e01f      	b.n	800551a <HAL_TIM_PWM_Start_IT+0x9a>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b0c      	cmp	r3, #12
 80054de:	d108      	bne.n	80054f2 <HAL_TIM_PWM_Start_IT+0x72>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2241      	movs	r2, #65	; 0x41
 80054e4:	5c9b      	ldrb	r3, [r3, r2]
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	3b01      	subs	r3, #1
 80054ea:	1e5a      	subs	r2, r3, #1
 80054ec:	4193      	sbcs	r3, r2
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	e013      	b.n	800551a <HAL_TIM_PWM_Start_IT+0x9a>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b10      	cmp	r3, #16
 80054f6:	d108      	bne.n	800550a <HAL_TIM_PWM_Start_IT+0x8a>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2242      	movs	r2, #66	; 0x42
 80054fc:	5c9b      	ldrb	r3, [r3, r2]
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	1e5a      	subs	r2, r3, #1
 8005504:	4193      	sbcs	r3, r2
 8005506:	b2db      	uxtb	r3, r3
 8005508:	e007      	b.n	800551a <HAL_TIM_PWM_Start_IT+0x9a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2243      	movs	r2, #67	; 0x43
 800550e:	5c9b      	ldrb	r3, [r3, r2]
 8005510:	b2db      	uxtb	r3, r3
 8005512:	3b01      	subs	r3, #1
 8005514:	1e5a      	subs	r2, r3, #1
 8005516:	4193      	sbcs	r3, r2
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <HAL_TIM_PWM_Start_IT+0xa2>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e0ce      	b.n	80056c0 <HAL_TIM_PWM_Start_IT+0x240>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d104      	bne.n	8005532 <HAL_TIM_PWM_Start_IT+0xb2>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	223e      	movs	r2, #62	; 0x3e
 800552c:	2102      	movs	r1, #2
 800552e:	5499      	strb	r1, [r3, r2]
 8005530:	e023      	b.n	800557a <HAL_TIM_PWM_Start_IT+0xfa>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b04      	cmp	r3, #4
 8005536:	d104      	bne.n	8005542 <HAL_TIM_PWM_Start_IT+0xc2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	223f      	movs	r2, #63	; 0x3f
 800553c:	2102      	movs	r1, #2
 800553e:	5499      	strb	r1, [r3, r2]
 8005540:	e01b      	b.n	800557a <HAL_TIM_PWM_Start_IT+0xfa>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b08      	cmp	r3, #8
 8005546:	d104      	bne.n	8005552 <HAL_TIM_PWM_Start_IT+0xd2>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2240      	movs	r2, #64	; 0x40
 800554c:	2102      	movs	r1, #2
 800554e:	5499      	strb	r1, [r3, r2]
 8005550:	e013      	b.n	800557a <HAL_TIM_PWM_Start_IT+0xfa>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b0c      	cmp	r3, #12
 8005556:	d104      	bne.n	8005562 <HAL_TIM_PWM_Start_IT+0xe2>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2241      	movs	r2, #65	; 0x41
 800555c:	2102      	movs	r1, #2
 800555e:	5499      	strb	r1, [r3, r2]
 8005560:	e00b      	b.n	800557a <HAL_TIM_PWM_Start_IT+0xfa>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b10      	cmp	r3, #16
 8005566:	d104      	bne.n	8005572 <HAL_TIM_PWM_Start_IT+0xf2>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2242      	movs	r2, #66	; 0x42
 800556c:	2102      	movs	r1, #2
 800556e:	5499      	strb	r1, [r3, r2]
 8005570:	e003      	b.n	800557a <HAL_TIM_PWM_Start_IT+0xfa>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2243      	movs	r2, #67	; 0x43
 8005576:	2102      	movs	r1, #2
 8005578:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b0c      	cmp	r3, #12
 800557e:	d02a      	beq.n	80055d6 <HAL_TIM_PWM_Start_IT+0x156>
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b0c      	cmp	r3, #12
 8005584:	d830      	bhi.n	80055e8 <HAL_TIM_PWM_Start_IT+0x168>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b08      	cmp	r3, #8
 800558a:	d01b      	beq.n	80055c4 <HAL_TIM_PWM_Start_IT+0x144>
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2b08      	cmp	r3, #8
 8005590:	d82a      	bhi.n	80055e8 <HAL_TIM_PWM_Start_IT+0x168>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <HAL_TIM_PWM_Start_IT+0x120>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b04      	cmp	r3, #4
 800559c:	d009      	beq.n	80055b2 <HAL_TIM_PWM_Start_IT+0x132>
 800559e:	e023      	b.n	80055e8 <HAL_TIM_PWM_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2102      	movs	r1, #2
 80055ac:	430a      	orrs	r2, r1
 80055ae:	60da      	str	r2, [r3, #12]
      break;
 80055b0:	e01f      	b.n	80055f2 <HAL_TIM_PWM_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2104      	movs	r1, #4
 80055be:	430a      	orrs	r2, r1
 80055c0:	60da      	str	r2, [r3, #12]
      break;
 80055c2:	e016      	b.n	80055f2 <HAL_TIM_PWM_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2108      	movs	r1, #8
 80055d0:	430a      	orrs	r2, r1
 80055d2:	60da      	str	r2, [r3, #12]
      break;
 80055d4:	e00d      	b.n	80055f2 <HAL_TIM_PWM_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68da      	ldr	r2, [r3, #12]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2110      	movs	r1, #16
 80055e2:	430a      	orrs	r2, r1
 80055e4:	60da      	str	r2, [r3, #12]
      break;
 80055e6:	e004      	b.n	80055f2 <HAL_TIM_PWM_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 80055e8:	230f      	movs	r3, #15
 80055ea:	18fb      	adds	r3, r7, r3
 80055ec:	2201      	movs	r2, #1
 80055ee:	701a      	strb	r2, [r3, #0]
      break;
 80055f0:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80055f2:	230f      	movs	r3, #15
 80055f4:	18fb      	adds	r3, r7, r3
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d15e      	bne.n	80056ba <HAL_TIM_PWM_Start_IT+0x23a>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6839      	ldr	r1, [r7, #0]
 8005602:	2201      	movs	r2, #1
 8005604:	0018      	movs	r0, r3
 8005606:	f000 ff57 	bl	80064b8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a2e      	ldr	r2, [pc, #184]	; (80056c8 <HAL_TIM_PWM_Start_IT+0x248>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d00e      	beq.n	8005632 <HAL_TIM_PWM_Start_IT+0x1b2>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a2c      	ldr	r2, [pc, #176]	; (80056cc <HAL_TIM_PWM_Start_IT+0x24c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d009      	beq.n	8005632 <HAL_TIM_PWM_Start_IT+0x1b2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a2b      	ldr	r2, [pc, #172]	; (80056d0 <HAL_TIM_PWM_Start_IT+0x250>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d004      	beq.n	8005632 <HAL_TIM_PWM_Start_IT+0x1b2>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a29      	ldr	r2, [pc, #164]	; (80056d4 <HAL_TIM_PWM_Start_IT+0x254>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d101      	bne.n	8005636 <HAL_TIM_PWM_Start_IT+0x1b6>
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <HAL_TIM_PWM_Start_IT+0x1b8>
 8005636:	2300      	movs	r3, #0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d008      	beq.n	800564e <HAL_TIM_PWM_Start_IT+0x1ce>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2180      	movs	r1, #128	; 0x80
 8005648:	0209      	lsls	r1, r1, #8
 800564a:	430a      	orrs	r2, r1
 800564c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a1d      	ldr	r2, [pc, #116]	; (80056c8 <HAL_TIM_PWM_Start_IT+0x248>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00f      	beq.n	8005678 <HAL_TIM_PWM_Start_IT+0x1f8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	2380      	movs	r3, #128	; 0x80
 800565e:	05db      	lsls	r3, r3, #23
 8005660:	429a      	cmp	r2, r3
 8005662:	d009      	beq.n	8005678 <HAL_TIM_PWM_Start_IT+0x1f8>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a1b      	ldr	r2, [pc, #108]	; (80056d8 <HAL_TIM_PWM_Start_IT+0x258>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d004      	beq.n	8005678 <HAL_TIM_PWM_Start_IT+0x1f8>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a16      	ldr	r2, [pc, #88]	; (80056cc <HAL_TIM_PWM_Start_IT+0x24c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d116      	bne.n	80056a6 <HAL_TIM_PWM_Start_IT+0x226>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	4a17      	ldr	r2, [pc, #92]	; (80056dc <HAL_TIM_PWM_Start_IT+0x25c>)
 8005680:	4013      	ands	r3, r2
 8005682:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b06      	cmp	r3, #6
 8005688:	d016      	beq.n	80056b8 <HAL_TIM_PWM_Start_IT+0x238>
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	2380      	movs	r3, #128	; 0x80
 800568e:	025b      	lsls	r3, r3, #9
 8005690:	429a      	cmp	r2, r3
 8005692:	d011      	beq.n	80056b8 <HAL_TIM_PWM_Start_IT+0x238>
      {
        __HAL_TIM_ENABLE(htim);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2101      	movs	r1, #1
 80056a0:	430a      	orrs	r2, r1
 80056a2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a4:	e008      	b.n	80056b8 <HAL_TIM_PWM_Start_IT+0x238>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2101      	movs	r1, #1
 80056b2:	430a      	orrs	r2, r1
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	e000      	b.n	80056ba <HAL_TIM_PWM_Start_IT+0x23a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b8:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 80056ba:	230f      	movs	r3, #15
 80056bc:	18fb      	adds	r3, r7, r3
 80056be:	781b      	ldrb	r3, [r3, #0]
}
 80056c0:	0018      	movs	r0, r3
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b004      	add	sp, #16
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40012c00 	.word	0x40012c00
 80056cc:	40014000 	.word	0x40014000
 80056d0:	40014400 	.word	0x40014400
 80056d4:	40014800 	.word	0x40014800
 80056d8:	40000400 	.word	0x40000400
 80056dc:	00010007 	.word	0x00010007

080056e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2202      	movs	r2, #2
 80056fc:	4013      	ands	r3, r2
 80056fe:	d021      	beq.n	8005744 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2202      	movs	r2, #2
 8005704:	4013      	ands	r3, r2
 8005706:	d01d      	beq.n	8005744 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2203      	movs	r2, #3
 800570e:	4252      	negs	r2, r2
 8005710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	2203      	movs	r2, #3
 8005720:	4013      	ands	r3, r2
 8005722:	d004      	beq.n	800572e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	0018      	movs	r0, r3
 8005728:	f000 fac8 	bl	8005cbc <HAL_TIM_IC_CaptureCallback>
 800572c:	e007      	b.n	800573e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	0018      	movs	r0, r3
 8005732:	f000 fabb 	bl	8005cac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	0018      	movs	r0, r3
 800573a:	f001 fd0d 	bl	8007158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2204      	movs	r2, #4
 8005748:	4013      	ands	r3, r2
 800574a:	d022      	beq.n	8005792 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2204      	movs	r2, #4
 8005750:	4013      	ands	r3, r2
 8005752:	d01e      	beq.n	8005792 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2205      	movs	r2, #5
 800575a:	4252      	negs	r2, r2
 800575c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2202      	movs	r2, #2
 8005762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699a      	ldr	r2, [r3, #24]
 800576a:	23c0      	movs	r3, #192	; 0xc0
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4013      	ands	r3, r2
 8005770:	d004      	beq.n	800577c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	0018      	movs	r0, r3
 8005776:	f000 faa1 	bl	8005cbc <HAL_TIM_IC_CaptureCallback>
 800577a:	e007      	b.n	800578c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	0018      	movs	r0, r3
 8005780:	f000 fa94 	bl	8005cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	0018      	movs	r0, r3
 8005788:	f001 fce6 	bl	8007158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2208      	movs	r2, #8
 8005796:	4013      	ands	r3, r2
 8005798:	d021      	beq.n	80057de <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2208      	movs	r2, #8
 800579e:	4013      	ands	r3, r2
 80057a0:	d01d      	beq.n	80057de <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2209      	movs	r2, #9
 80057a8:	4252      	negs	r2, r2
 80057aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2204      	movs	r2, #4
 80057b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	2203      	movs	r2, #3
 80057ba:	4013      	ands	r3, r2
 80057bc:	d004      	beq.n	80057c8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	0018      	movs	r0, r3
 80057c2:	f000 fa7b 	bl	8005cbc <HAL_TIM_IC_CaptureCallback>
 80057c6:	e007      	b.n	80057d8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	0018      	movs	r0, r3
 80057cc:	f000 fa6e 	bl	8005cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	0018      	movs	r0, r3
 80057d4:	f001 fcc0 	bl	8007158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2210      	movs	r2, #16
 80057e2:	4013      	ands	r3, r2
 80057e4:	d022      	beq.n	800582c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2210      	movs	r2, #16
 80057ea:	4013      	ands	r3, r2
 80057ec:	d01e      	beq.n	800582c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2211      	movs	r2, #17
 80057f4:	4252      	negs	r2, r2
 80057f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2208      	movs	r2, #8
 80057fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69da      	ldr	r2, [r3, #28]
 8005804:	23c0      	movs	r3, #192	; 0xc0
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4013      	ands	r3, r2
 800580a:	d004      	beq.n	8005816 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	0018      	movs	r0, r3
 8005810:	f000 fa54 	bl	8005cbc <HAL_TIM_IC_CaptureCallback>
 8005814:	e007      	b.n	8005826 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	0018      	movs	r0, r3
 800581a:	f000 fa47 	bl	8005cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	0018      	movs	r0, r3
 8005822:	f001 fc99 	bl	8007158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2201      	movs	r2, #1
 8005830:	4013      	ands	r3, r2
 8005832:	d00c      	beq.n	800584e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	4013      	ands	r3, r2
 800583a:	d008      	beq.n	800584e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2202      	movs	r2, #2
 8005842:	4252      	negs	r2, r2
 8005844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	0018      	movs	r0, r3
 800584a:	f000 fa27 	bl	8005c9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2280      	movs	r2, #128	; 0x80
 8005852:	4013      	ands	r3, r2
 8005854:	d104      	bne.n	8005860 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	2380      	movs	r3, #128	; 0x80
 800585a:	019b      	lsls	r3, r3, #6
 800585c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800585e:	d00b      	beq.n	8005878 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2280      	movs	r2, #128	; 0x80
 8005864:	4013      	ands	r3, r2
 8005866:	d007      	beq.n	8005878 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a1e      	ldr	r2, [pc, #120]	; (80058e8 <HAL_TIM_IRQHandler+0x208>)
 800586e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	0018      	movs	r0, r3
 8005874:	f000 ff56 	bl	8006724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	2380      	movs	r3, #128	; 0x80
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	4013      	ands	r3, r2
 8005880:	d00b      	beq.n	800589a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2280      	movs	r2, #128	; 0x80
 8005886:	4013      	ands	r3, r2
 8005888:	d007      	beq.n	800589a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a17      	ldr	r2, [pc, #92]	; (80058ec <HAL_TIM_IRQHandler+0x20c>)
 8005890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	0018      	movs	r0, r3
 8005896:	f000 ff4d 	bl	8006734 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2240      	movs	r2, #64	; 0x40
 800589e:	4013      	ands	r3, r2
 80058a0:	d00c      	beq.n	80058bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2240      	movs	r2, #64	; 0x40
 80058a6:	4013      	ands	r3, r2
 80058a8:	d008      	beq.n	80058bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2241      	movs	r2, #65	; 0x41
 80058b0:	4252      	negs	r2, r2
 80058b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	0018      	movs	r0, r3
 80058b8:	f000 fa08 	bl	8005ccc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2220      	movs	r2, #32
 80058c0:	4013      	ands	r3, r2
 80058c2:	d00c      	beq.n	80058de <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2220      	movs	r2, #32
 80058c8:	4013      	ands	r3, r2
 80058ca:	d008      	beq.n	80058de <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2221      	movs	r2, #33	; 0x21
 80058d2:	4252      	negs	r2, r2
 80058d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	0018      	movs	r0, r3
 80058da:	f000 ff1b 	bl	8006714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058de:	46c0      	nop			; (mov r8, r8)
 80058e0:	46bd      	mov	sp, r7
 80058e2:	b004      	add	sp, #16
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	46c0      	nop			; (mov r8, r8)
 80058e8:	ffffdf7f 	.word	0xffffdf7f
 80058ec:	fffffeff 	.word	0xfffffeff

080058f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058fc:	2317      	movs	r3, #23
 80058fe:	18fb      	adds	r3, r7, r3
 8005900:	2200      	movs	r2, #0
 8005902:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	223c      	movs	r2, #60	; 0x3c
 8005908:	5c9b      	ldrb	r3, [r3, r2]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <HAL_TIM_PWM_ConfigChannel+0x22>
 800590e:	2302      	movs	r3, #2
 8005910:	e0e5      	b.n	8005ade <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	223c      	movs	r2, #60	; 0x3c
 8005916:	2101      	movs	r1, #1
 8005918:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b14      	cmp	r3, #20
 800591e:	d900      	bls.n	8005922 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005920:	e0d1      	b.n	8005ac6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	009a      	lsls	r2, r3, #2
 8005926:	4b70      	ldr	r3, [pc, #448]	; (8005ae8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005928:	18d3      	adds	r3, r2, r3
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	0011      	movs	r1, r2
 8005936:	0018      	movs	r0, r3
 8005938:	f000 fa5e 	bl	8005df8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2108      	movs	r1, #8
 8005948:	430a      	orrs	r2, r1
 800594a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2104      	movs	r1, #4
 8005958:	438a      	bics	r2, r1
 800595a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6999      	ldr	r1, [r3, #24]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	691a      	ldr	r2, [r3, #16]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	619a      	str	r2, [r3, #24]
      break;
 800596e:	e0af      	b.n	8005ad0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	0011      	movs	r1, r2
 8005978:	0018      	movs	r0, r3
 800597a:	f000 fac7 	bl	8005f0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	699a      	ldr	r2, [r3, #24]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2180      	movs	r1, #128	; 0x80
 800598a:	0109      	lsls	r1, r1, #4
 800598c:	430a      	orrs	r2, r1
 800598e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4954      	ldr	r1, [pc, #336]	; (8005aec <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800599c:	400a      	ands	r2, r1
 800599e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6999      	ldr	r1, [r3, #24]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	021a      	lsls	r2, r3, #8
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	619a      	str	r2, [r3, #24]
      break;
 80059b4:	e08c      	b.n	8005ad0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	0011      	movs	r1, r2
 80059be:	0018      	movs	r0, r3
 80059c0:	f000 fb28 	bl	8006014 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69da      	ldr	r2, [r3, #28]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2108      	movs	r1, #8
 80059d0:	430a      	orrs	r2, r1
 80059d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69da      	ldr	r2, [r3, #28]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2104      	movs	r1, #4
 80059e0:	438a      	bics	r2, r1
 80059e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	69d9      	ldr	r1, [r3, #28]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	691a      	ldr	r2, [r3, #16]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	61da      	str	r2, [r3, #28]
      break;
 80059f6:	e06b      	b.n	8005ad0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	0011      	movs	r1, r2
 8005a00:	0018      	movs	r0, r3
 8005a02:	f000 fb8f 	bl	8006124 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	69da      	ldr	r2, [r3, #28]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2180      	movs	r1, #128	; 0x80
 8005a12:	0109      	lsls	r1, r1, #4
 8005a14:	430a      	orrs	r2, r1
 8005a16:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69da      	ldr	r2, [r3, #28]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4932      	ldr	r1, [pc, #200]	; (8005aec <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005a24:	400a      	ands	r2, r1
 8005a26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	69d9      	ldr	r1, [r3, #28]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	021a      	lsls	r2, r3, #8
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	61da      	str	r2, [r3, #28]
      break;
 8005a3c:	e048      	b.n	8005ad0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	0011      	movs	r1, r2
 8005a46:	0018      	movs	r0, r3
 8005a48:	f000 fbd6 	bl	80061f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2108      	movs	r1, #8
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2104      	movs	r1, #4
 8005a68:	438a      	bics	r2, r1
 8005a6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	691a      	ldr	r2, [r3, #16]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a7e:	e027      	b.n	8005ad0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	0011      	movs	r1, r2
 8005a88:	0018      	movs	r0, r3
 8005a8a:	f000 fc15 	bl	80062b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2180      	movs	r1, #128	; 0x80
 8005a9a:	0109      	lsls	r1, r1, #4
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4910      	ldr	r1, [pc, #64]	; (8005aec <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005aac:	400a      	ands	r2, r1
 8005aae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	021a      	lsls	r2, r3, #8
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ac4:	e004      	b.n	8005ad0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005ac6:	2317      	movs	r3, #23
 8005ac8:	18fb      	adds	r3, r7, r3
 8005aca:	2201      	movs	r2, #1
 8005acc:	701a      	strb	r2, [r3, #0]
      break;
 8005ace:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	223c      	movs	r2, #60	; 0x3c
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	5499      	strb	r1, [r3, r2]

  return status;
 8005ad8:	2317      	movs	r3, #23
 8005ada:	18fb      	adds	r3, r7, r3
 8005adc:	781b      	ldrb	r3, [r3, #0]
}
 8005ade:	0018      	movs	r0, r3
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	b006      	add	sp, #24
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	46c0      	nop			; (mov r8, r8)
 8005ae8:	0800852c 	.word	0x0800852c
 8005aec:	fffffbff 	.word	0xfffffbff

08005af0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005afa:	230f      	movs	r3, #15
 8005afc:	18fb      	adds	r3, r7, r3
 8005afe:	2200      	movs	r2, #0
 8005b00:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	223c      	movs	r2, #60	; 0x3c
 8005b06:	5c9b      	ldrb	r3, [r3, r2]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d101      	bne.n	8005b10 <HAL_TIM_ConfigClockSource+0x20>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	e0bc      	b.n	8005c8a <HAL_TIM_ConfigClockSource+0x19a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	223c      	movs	r2, #60	; 0x3c
 8005b14:	2101      	movs	r1, #1
 8005b16:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	223d      	movs	r2, #61	; 0x3d
 8005b1c:	2102      	movs	r1, #2
 8005b1e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	4a5a      	ldr	r2, [pc, #360]	; (8005c94 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	4a59      	ldr	r2, [pc, #356]	; (8005c98 <HAL_TIM_ConfigClockSource+0x1a8>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2280      	movs	r2, #128	; 0x80
 8005b46:	0192      	lsls	r2, r2, #6
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d040      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0xde>
 8005b4c:	2280      	movs	r2, #128	; 0x80
 8005b4e:	0192      	lsls	r2, r2, #6
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d900      	bls.n	8005b56 <HAL_TIM_ConfigClockSource+0x66>
 8005b54:	e088      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x178>
 8005b56:	2280      	movs	r2, #128	; 0x80
 8005b58:	0152      	lsls	r2, r2, #5
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d100      	bne.n	8005b60 <HAL_TIM_ConfigClockSource+0x70>
 8005b5e:	e088      	b.n	8005c72 <HAL_TIM_ConfigClockSource+0x182>
 8005b60:	2280      	movs	r2, #128	; 0x80
 8005b62:	0152      	lsls	r2, r2, #5
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d900      	bls.n	8005b6a <HAL_TIM_ConfigClockSource+0x7a>
 8005b68:	e07e      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x178>
 8005b6a:	2b70      	cmp	r3, #112	; 0x70
 8005b6c:	d018      	beq.n	8005ba0 <HAL_TIM_ConfigClockSource+0xb0>
 8005b6e:	d900      	bls.n	8005b72 <HAL_TIM_ConfigClockSource+0x82>
 8005b70:	e07a      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x178>
 8005b72:	2b60      	cmp	r3, #96	; 0x60
 8005b74:	d04f      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0x126>
 8005b76:	d900      	bls.n	8005b7a <HAL_TIM_ConfigClockSource+0x8a>
 8005b78:	e076      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x178>
 8005b7a:	2b50      	cmp	r3, #80	; 0x50
 8005b7c:	d03b      	beq.n	8005bf6 <HAL_TIM_ConfigClockSource+0x106>
 8005b7e:	d900      	bls.n	8005b82 <HAL_TIM_ConfigClockSource+0x92>
 8005b80:	e072      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x178>
 8005b82:	2b40      	cmp	r3, #64	; 0x40
 8005b84:	d057      	beq.n	8005c36 <HAL_TIM_ConfigClockSource+0x146>
 8005b86:	d900      	bls.n	8005b8a <HAL_TIM_ConfigClockSource+0x9a>
 8005b88:	e06e      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x178>
 8005b8a:	2b30      	cmp	r3, #48	; 0x30
 8005b8c:	d063      	beq.n	8005c56 <HAL_TIM_ConfigClockSource+0x166>
 8005b8e:	d86b      	bhi.n	8005c68 <HAL_TIM_ConfigClockSource+0x178>
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	d060      	beq.n	8005c56 <HAL_TIM_ConfigClockSource+0x166>
 8005b94:	d868      	bhi.n	8005c68 <HAL_TIM_ConfigClockSource+0x178>
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d05d      	beq.n	8005c56 <HAL_TIM_ConfigClockSource+0x166>
 8005b9a:	2b10      	cmp	r3, #16
 8005b9c:	d05b      	beq.n	8005c56 <HAL_TIM_ConfigClockSource+0x166>
 8005b9e:	e063      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bb0:	f000 fc62 	bl	8006478 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2277      	movs	r2, #119	; 0x77
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	609a      	str	r2, [r3, #8]
      break;
 8005bcc:	e052      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bde:	f000 fc4b 	bl	8006478 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2180      	movs	r1, #128	; 0x80
 8005bee:	01c9      	lsls	r1, r1, #7
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	609a      	str	r2, [r3, #8]
      break;
 8005bf4:	e03e      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c02:	001a      	movs	r2, r3
 8005c04:	f000 fbbc 	bl	8006380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2150      	movs	r1, #80	; 0x50
 8005c0e:	0018      	movs	r0, r3
 8005c10:	f000 fc16 	bl	8006440 <TIM_ITRx_SetConfig>
      break;
 8005c14:	e02e      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c22:	001a      	movs	r2, r3
 8005c24:	f000 fbda 	bl	80063dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2160      	movs	r1, #96	; 0x60
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f000 fc06 	bl	8006440 <TIM_ITRx_SetConfig>
      break;
 8005c34:	e01e      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c42:	001a      	movs	r2, r3
 8005c44:	f000 fb9c 	bl	8006380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2140      	movs	r1, #64	; 0x40
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f000 fbf6 	bl	8006440 <TIM_ITRx_SetConfig>
      break;
 8005c54:	e00e      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	0019      	movs	r1, r3
 8005c60:	0010      	movs	r0, r2
 8005c62:	f000 fbed 	bl	8006440 <TIM_ITRx_SetConfig>
      break;
 8005c66:	e005      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005c68:	230f      	movs	r3, #15
 8005c6a:	18fb      	adds	r3, r7, r3
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	701a      	strb	r2, [r3, #0]
      break;
 8005c70:	e000      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005c72:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	223d      	movs	r2, #61	; 0x3d
 8005c78:	2101      	movs	r1, #1
 8005c7a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	223c      	movs	r2, #60	; 0x3c
 8005c80:	2100      	movs	r1, #0
 8005c82:	5499      	strb	r1, [r3, r2]

  return status;
 8005c84:	230f      	movs	r3, #15
 8005c86:	18fb      	adds	r3, r7, r3
 8005c88:	781b      	ldrb	r3, [r3, #0]
}
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	b004      	add	sp, #16
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	46c0      	nop			; (mov r8, r8)
 8005c94:	ffceff88 	.word	0xffceff88
 8005c98:	ffff00ff 	.word	0xffff00ff

08005c9c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ca4:	46c0      	nop			; (mov r8, r8)
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	b002      	add	sp, #8
 8005caa:	bd80      	pop	{r7, pc}

08005cac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cb4:	46c0      	nop			; (mov r8, r8)
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	b002      	add	sp, #8
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cc4:	46c0      	nop			; (mov r8, r8)
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	b002      	add	sp, #8
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cd4:	46c0      	nop			; (mov r8, r8)
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	b002      	add	sp, #8
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a3b      	ldr	r2, [pc, #236]	; (8005ddc <TIM_Base_SetConfig+0x100>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d008      	beq.n	8005d06 <TIM_Base_SetConfig+0x2a>
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	2380      	movs	r3, #128	; 0x80
 8005cf8:	05db      	lsls	r3, r3, #23
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d003      	beq.n	8005d06 <TIM_Base_SetConfig+0x2a>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a37      	ldr	r2, [pc, #220]	; (8005de0 <TIM_Base_SetConfig+0x104>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d108      	bne.n	8005d18 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2270      	movs	r2, #112	; 0x70
 8005d0a:	4393      	bics	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a30      	ldr	r2, [pc, #192]	; (8005ddc <TIM_Base_SetConfig+0x100>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d018      	beq.n	8005d52 <TIM_Base_SetConfig+0x76>
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	2380      	movs	r3, #128	; 0x80
 8005d24:	05db      	lsls	r3, r3, #23
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d013      	beq.n	8005d52 <TIM_Base_SetConfig+0x76>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a2c      	ldr	r2, [pc, #176]	; (8005de0 <TIM_Base_SetConfig+0x104>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d00f      	beq.n	8005d52 <TIM_Base_SetConfig+0x76>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a2b      	ldr	r2, [pc, #172]	; (8005de4 <TIM_Base_SetConfig+0x108>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00b      	beq.n	8005d52 <TIM_Base_SetConfig+0x76>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a2a      	ldr	r2, [pc, #168]	; (8005de8 <TIM_Base_SetConfig+0x10c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d007      	beq.n	8005d52 <TIM_Base_SetConfig+0x76>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a29      	ldr	r2, [pc, #164]	; (8005dec <TIM_Base_SetConfig+0x110>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d003      	beq.n	8005d52 <TIM_Base_SetConfig+0x76>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a28      	ldr	r2, [pc, #160]	; (8005df0 <TIM_Base_SetConfig+0x114>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d108      	bne.n	8005d64 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4a27      	ldr	r2, [pc, #156]	; (8005df4 <TIM_Base_SetConfig+0x118>)
 8005d56:	4013      	ands	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2280      	movs	r2, #128	; 0x80
 8005d68:	4393      	bics	r3, r2
 8005d6a:	001a      	movs	r2, r3
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a13      	ldr	r2, [pc, #76]	; (8005ddc <TIM_Base_SetConfig+0x100>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00b      	beq.n	8005daa <TIM_Base_SetConfig+0xce>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a14      	ldr	r2, [pc, #80]	; (8005de8 <TIM_Base_SetConfig+0x10c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d007      	beq.n	8005daa <TIM_Base_SetConfig+0xce>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a13      	ldr	r2, [pc, #76]	; (8005dec <TIM_Base_SetConfig+0x110>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d003      	beq.n	8005daa <TIM_Base_SetConfig+0xce>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a12      	ldr	r2, [pc, #72]	; (8005df0 <TIM_Base_SetConfig+0x114>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d103      	bne.n	8005db2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	691a      	ldr	r2, [r3, #16]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d106      	bne.n	8005dd2 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	4393      	bics	r3, r2
 8005dcc:	001a      	movs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	611a      	str	r2, [r3, #16]
  }
}
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	b004      	add	sp, #16
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	40012c00 	.word	0x40012c00
 8005de0:	40000400 	.word	0x40000400
 8005de4:	40002000 	.word	0x40002000
 8005de8:	40014000 	.word	0x40014000
 8005dec:	40014400 	.word	0x40014400
 8005df0:	40014800 	.word	0x40014800
 8005df4:	fffffcff 	.word	0xfffffcff

08005df8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	4393      	bics	r3, r2
 8005e10:	001a      	movs	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4a32      	ldr	r2, [pc, #200]	; (8005ef0 <TIM_OC1_SetConfig+0xf8>)
 8005e26:	4013      	ands	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2203      	movs	r2, #3
 8005e2e:	4393      	bics	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	4393      	bics	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a28      	ldr	r2, [pc, #160]	; (8005ef4 <TIM_OC1_SetConfig+0xfc>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00b      	beq.n	8005e6e <TIM_OC1_SetConfig+0x76>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a27      	ldr	r2, [pc, #156]	; (8005ef8 <TIM_OC1_SetConfig+0x100>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d007      	beq.n	8005e6e <TIM_OC1_SetConfig+0x76>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a26      	ldr	r2, [pc, #152]	; (8005efc <TIM_OC1_SetConfig+0x104>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d003      	beq.n	8005e6e <TIM_OC1_SetConfig+0x76>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a25      	ldr	r2, [pc, #148]	; (8005f00 <TIM_OC1_SetConfig+0x108>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d10c      	bne.n	8005e88 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2208      	movs	r2, #8
 8005e72:	4393      	bics	r3, r2
 8005e74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	2204      	movs	r2, #4
 8005e84:	4393      	bics	r3, r2
 8005e86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a1a      	ldr	r2, [pc, #104]	; (8005ef4 <TIM_OC1_SetConfig+0xfc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00b      	beq.n	8005ea8 <TIM_OC1_SetConfig+0xb0>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a19      	ldr	r2, [pc, #100]	; (8005ef8 <TIM_OC1_SetConfig+0x100>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d007      	beq.n	8005ea8 <TIM_OC1_SetConfig+0xb0>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a18      	ldr	r2, [pc, #96]	; (8005efc <TIM_OC1_SetConfig+0x104>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d003      	beq.n	8005ea8 <TIM_OC1_SetConfig+0xb0>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a17      	ldr	r2, [pc, #92]	; (8005f00 <TIM_OC1_SetConfig+0x108>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d111      	bne.n	8005ecc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	4a16      	ldr	r2, [pc, #88]	; (8005f04 <TIM_OC1_SetConfig+0x10c>)
 8005eac:	4013      	ands	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	4a15      	ldr	r2, [pc, #84]	; (8005f08 <TIM_OC1_SetConfig+0x110>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	621a      	str	r2, [r3, #32]
}
 8005ee6:	46c0      	nop			; (mov r8, r8)
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	b006      	add	sp, #24
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	46c0      	nop			; (mov r8, r8)
 8005ef0:	fffeff8f 	.word	0xfffeff8f
 8005ef4:	40012c00 	.word	0x40012c00
 8005ef8:	40014000 	.word	0x40014000
 8005efc:	40014400 	.word	0x40014400
 8005f00:	40014800 	.word	0x40014800
 8005f04:	fffffeff 	.word	0xfffffeff
 8005f08:	fffffdff 	.word	0xfffffdff

08005f0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	2210      	movs	r2, #16
 8005f22:	4393      	bics	r3, r2
 8005f24:	001a      	movs	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4a2e      	ldr	r2, [pc, #184]	; (8005ff4 <TIM_OC2_SetConfig+0xe8>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4a2d      	ldr	r2, [pc, #180]	; (8005ff8 <TIM_OC2_SetConfig+0xec>)
 8005f42:	4013      	ands	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	021b      	lsls	r3, r3, #8
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2220      	movs	r2, #32
 8005f56:	4393      	bics	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a24      	ldr	r2, [pc, #144]	; (8005ffc <TIM_OC2_SetConfig+0xf0>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d10d      	bne.n	8005f8a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2280      	movs	r2, #128	; 0x80
 8005f72:	4393      	bics	r3, r2
 8005f74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2240      	movs	r2, #64	; 0x40
 8005f86:	4393      	bics	r3, r2
 8005f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a1b      	ldr	r2, [pc, #108]	; (8005ffc <TIM_OC2_SetConfig+0xf0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00b      	beq.n	8005faa <TIM_OC2_SetConfig+0x9e>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a1a      	ldr	r2, [pc, #104]	; (8006000 <TIM_OC2_SetConfig+0xf4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d007      	beq.n	8005faa <TIM_OC2_SetConfig+0x9e>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a19      	ldr	r2, [pc, #100]	; (8006004 <TIM_OC2_SetConfig+0xf8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d003      	beq.n	8005faa <TIM_OC2_SetConfig+0x9e>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a18      	ldr	r2, [pc, #96]	; (8006008 <TIM_OC2_SetConfig+0xfc>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d113      	bne.n	8005fd2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	4a17      	ldr	r2, [pc, #92]	; (800600c <TIM_OC2_SetConfig+0x100>)
 8005fae:	4013      	ands	r3, r2
 8005fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	4a16      	ldr	r2, [pc, #88]	; (8006010 <TIM_OC2_SetConfig+0x104>)
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	621a      	str	r2, [r3, #32]
}
 8005fec:	46c0      	nop			; (mov r8, r8)
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	b006      	add	sp, #24
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	feff8fff 	.word	0xfeff8fff
 8005ff8:	fffffcff 	.word	0xfffffcff
 8005ffc:	40012c00 	.word	0x40012c00
 8006000:	40014000 	.word	0x40014000
 8006004:	40014400 	.word	0x40014400
 8006008:	40014800 	.word	0x40014800
 800600c:	fffffbff 	.word	0xfffffbff
 8006010:	fffff7ff 	.word	0xfffff7ff

08006014 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	4a33      	ldr	r2, [pc, #204]	; (80060f8 <TIM_OC3_SetConfig+0xe4>)
 800602a:	401a      	ands	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4a2f      	ldr	r2, [pc, #188]	; (80060fc <TIM_OC3_SetConfig+0xe8>)
 8006040:	4013      	ands	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2203      	movs	r2, #3
 8006048:	4393      	bics	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	4313      	orrs	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	4a29      	ldr	r2, [pc, #164]	; (8006100 <TIM_OC3_SetConfig+0xec>)
 800605a:	4013      	ands	r3, r2
 800605c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	021b      	lsls	r3, r3, #8
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	4313      	orrs	r3, r2
 8006068:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a25      	ldr	r2, [pc, #148]	; (8006104 <TIM_OC3_SetConfig+0xf0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d10d      	bne.n	800608e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	4a24      	ldr	r2, [pc, #144]	; (8006108 <TIM_OC3_SetConfig+0xf4>)
 8006076:	4013      	ands	r3, r2
 8006078:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	021b      	lsls	r3, r3, #8
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	4a20      	ldr	r2, [pc, #128]	; (800610c <TIM_OC3_SetConfig+0xf8>)
 800608a:	4013      	ands	r3, r2
 800608c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a1c      	ldr	r2, [pc, #112]	; (8006104 <TIM_OC3_SetConfig+0xf0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00b      	beq.n	80060ae <TIM_OC3_SetConfig+0x9a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a1d      	ldr	r2, [pc, #116]	; (8006110 <TIM_OC3_SetConfig+0xfc>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d007      	beq.n	80060ae <TIM_OC3_SetConfig+0x9a>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a1c      	ldr	r2, [pc, #112]	; (8006114 <TIM_OC3_SetConfig+0x100>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d003      	beq.n	80060ae <TIM_OC3_SetConfig+0x9a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a1b      	ldr	r2, [pc, #108]	; (8006118 <TIM_OC3_SetConfig+0x104>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d113      	bne.n	80060d6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	4a1a      	ldr	r2, [pc, #104]	; (800611c <TIM_OC3_SetConfig+0x108>)
 80060b2:	4013      	ands	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	4a19      	ldr	r2, [pc, #100]	; (8006120 <TIM_OC3_SetConfig+0x10c>)
 80060ba:	4013      	ands	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	621a      	str	r2, [r3, #32]
}
 80060f0:	46c0      	nop			; (mov r8, r8)
 80060f2:	46bd      	mov	sp, r7
 80060f4:	b006      	add	sp, #24
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	fffffeff 	.word	0xfffffeff
 80060fc:	fffeff8f 	.word	0xfffeff8f
 8006100:	fffffdff 	.word	0xfffffdff
 8006104:	40012c00 	.word	0x40012c00
 8006108:	fffff7ff 	.word	0xfffff7ff
 800610c:	fffffbff 	.word	0xfffffbff
 8006110:	40014000 	.word	0x40014000
 8006114:	40014400 	.word	0x40014400
 8006118:	40014800 	.word	0x40014800
 800611c:	ffffefff 	.word	0xffffefff
 8006120:	ffffdfff 	.word	0xffffdfff

08006124 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	4a26      	ldr	r2, [pc, #152]	; (80061d4 <TIM_OC4_SetConfig+0xb0>)
 800613a:	401a      	ands	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4a22      	ldr	r2, [pc, #136]	; (80061d8 <TIM_OC4_SetConfig+0xb4>)
 8006150:	4013      	ands	r3, r2
 8006152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4a21      	ldr	r2, [pc, #132]	; (80061dc <TIM_OC4_SetConfig+0xb8>)
 8006158:	4013      	ands	r3, r2
 800615a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	021b      	lsls	r3, r3, #8
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	4313      	orrs	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	4a1d      	ldr	r2, [pc, #116]	; (80061e0 <TIM_OC4_SetConfig+0xbc>)
 800616c:	4013      	ands	r3, r2
 800616e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	031b      	lsls	r3, r3, #12
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	4313      	orrs	r3, r2
 800617a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a19      	ldr	r2, [pc, #100]	; (80061e4 <TIM_OC4_SetConfig+0xc0>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d00b      	beq.n	800619c <TIM_OC4_SetConfig+0x78>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a18      	ldr	r2, [pc, #96]	; (80061e8 <TIM_OC4_SetConfig+0xc4>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d007      	beq.n	800619c <TIM_OC4_SetConfig+0x78>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a17      	ldr	r2, [pc, #92]	; (80061ec <TIM_OC4_SetConfig+0xc8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d003      	beq.n	800619c <TIM_OC4_SetConfig+0x78>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a16      	ldr	r2, [pc, #88]	; (80061f0 <TIM_OC4_SetConfig+0xcc>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d109      	bne.n	80061b0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	4a15      	ldr	r2, [pc, #84]	; (80061f4 <TIM_OC4_SetConfig+0xd0>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	019b      	lsls	r3, r3, #6
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	621a      	str	r2, [r3, #32]
}
 80061ca:	46c0      	nop			; (mov r8, r8)
 80061cc:	46bd      	mov	sp, r7
 80061ce:	b006      	add	sp, #24
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	46c0      	nop			; (mov r8, r8)
 80061d4:	ffffefff 	.word	0xffffefff
 80061d8:	feff8fff 	.word	0xfeff8fff
 80061dc:	fffffcff 	.word	0xfffffcff
 80061e0:	ffffdfff 	.word	0xffffdfff
 80061e4:	40012c00 	.word	0x40012c00
 80061e8:	40014000 	.word	0x40014000
 80061ec:	40014400 	.word	0x40014400
 80061f0:	40014800 	.word	0x40014800
 80061f4:	ffffbfff 	.word	0xffffbfff

080061f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	4a23      	ldr	r2, [pc, #140]	; (800629c <TIM_OC5_SetConfig+0xa4>)
 800620e:	401a      	ands	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4a1f      	ldr	r2, [pc, #124]	; (80062a0 <TIM_OC5_SetConfig+0xa8>)
 8006224:	4013      	ands	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4313      	orrs	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	4a1b      	ldr	r2, [pc, #108]	; (80062a4 <TIM_OC5_SetConfig+0xac>)
 8006236:	4013      	ands	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	041b      	lsls	r3, r3, #16
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a17      	ldr	r2, [pc, #92]	; (80062a8 <TIM_OC5_SetConfig+0xb0>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d00b      	beq.n	8006266 <TIM_OC5_SetConfig+0x6e>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a16      	ldr	r2, [pc, #88]	; (80062ac <TIM_OC5_SetConfig+0xb4>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d007      	beq.n	8006266 <TIM_OC5_SetConfig+0x6e>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a15      	ldr	r2, [pc, #84]	; (80062b0 <TIM_OC5_SetConfig+0xb8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d003      	beq.n	8006266 <TIM_OC5_SetConfig+0x6e>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a14      	ldr	r2, [pc, #80]	; (80062b4 <TIM_OC5_SetConfig+0xbc>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d109      	bne.n	800627a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	4a0c      	ldr	r2, [pc, #48]	; (800629c <TIM_OC5_SetConfig+0xa4>)
 800626a:	4013      	ands	r3, r2
 800626c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	021b      	lsls	r3, r3, #8
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	4313      	orrs	r3, r2
 8006278:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	621a      	str	r2, [r3, #32]
}
 8006294:	46c0      	nop			; (mov r8, r8)
 8006296:	46bd      	mov	sp, r7
 8006298:	b006      	add	sp, #24
 800629a:	bd80      	pop	{r7, pc}
 800629c:	fffeffff 	.word	0xfffeffff
 80062a0:	fffeff8f 	.word	0xfffeff8f
 80062a4:	fffdffff 	.word	0xfffdffff
 80062a8:	40012c00 	.word	0x40012c00
 80062ac:	40014000 	.word	0x40014000
 80062b0:	40014400 	.word	0x40014400
 80062b4:	40014800 	.word	0x40014800

080062b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	4a24      	ldr	r2, [pc, #144]	; (8006360 <TIM_OC6_SetConfig+0xa8>)
 80062ce:	401a      	ands	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4a20      	ldr	r2, [pc, #128]	; (8006364 <TIM_OC6_SetConfig+0xac>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	021b      	lsls	r3, r3, #8
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	4a1c      	ldr	r2, [pc, #112]	; (8006368 <TIM_OC6_SetConfig+0xb0>)
 80062f8:	4013      	ands	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	051b      	lsls	r3, r3, #20
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	4313      	orrs	r3, r2
 8006306:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a18      	ldr	r2, [pc, #96]	; (800636c <TIM_OC6_SetConfig+0xb4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d00b      	beq.n	8006328 <TIM_OC6_SetConfig+0x70>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a17      	ldr	r2, [pc, #92]	; (8006370 <TIM_OC6_SetConfig+0xb8>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d007      	beq.n	8006328 <TIM_OC6_SetConfig+0x70>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a16      	ldr	r2, [pc, #88]	; (8006374 <TIM_OC6_SetConfig+0xbc>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d003      	beq.n	8006328 <TIM_OC6_SetConfig+0x70>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a15      	ldr	r2, [pc, #84]	; (8006378 <TIM_OC6_SetConfig+0xc0>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d109      	bne.n	800633c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	4a14      	ldr	r2, [pc, #80]	; (800637c <TIM_OC6_SetConfig+0xc4>)
 800632c:	4013      	ands	r3, r2
 800632e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	029b      	lsls	r3, r3, #10
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4313      	orrs	r3, r2
 800633a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	621a      	str	r2, [r3, #32]
}
 8006356:	46c0      	nop			; (mov r8, r8)
 8006358:	46bd      	mov	sp, r7
 800635a:	b006      	add	sp, #24
 800635c:	bd80      	pop	{r7, pc}
 800635e:	46c0      	nop			; (mov r8, r8)
 8006360:	ffefffff 	.word	0xffefffff
 8006364:	feff8fff 	.word	0xfeff8fff
 8006368:	ffdfffff 	.word	0xffdfffff
 800636c:	40012c00 	.word	0x40012c00
 8006370:	40014000 	.word	0x40014000
 8006374:	40014400 	.word	0x40014400
 8006378:	40014800 	.word	0x40014800
 800637c:	fffbffff 	.word	0xfffbffff

08006380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	2201      	movs	r2, #1
 8006398:	4393      	bics	r3, r2
 800639a:	001a      	movs	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	22f0      	movs	r2, #240	; 0xf0
 80063aa:	4393      	bics	r3, r2
 80063ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	011b      	lsls	r3, r3, #4
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	220a      	movs	r2, #10
 80063bc:	4393      	bics	r3, r2
 80063be:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	621a      	str	r2, [r3, #32]
}
 80063d4:	46c0      	nop			; (mov r8, r8)
 80063d6:	46bd      	mov	sp, r7
 80063d8:	b006      	add	sp, #24
 80063da:	bd80      	pop	{r7, pc}

080063dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6a1b      	ldr	r3, [r3, #32]
 80063ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	2210      	movs	r2, #16
 80063f4:	4393      	bics	r3, r2
 80063f6:	001a      	movs	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	4a0d      	ldr	r2, [pc, #52]	; (800643c <TIM_TI2_ConfigInputStage+0x60>)
 8006406:	4013      	ands	r3, r2
 8006408:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	031b      	lsls	r3, r3, #12
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	4313      	orrs	r3, r2
 8006412:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	22a0      	movs	r2, #160	; 0xa0
 8006418:	4393      	bics	r3, r2
 800641a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	4313      	orrs	r3, r2
 8006424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	621a      	str	r2, [r3, #32]
}
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	46bd      	mov	sp, r7
 8006436:	b006      	add	sp, #24
 8006438:	bd80      	pop	{r7, pc}
 800643a:	46c0      	nop			; (mov r8, r8)
 800643c:	ffff0fff 	.word	0xffff0fff

08006440 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4a08      	ldr	r2, [pc, #32]	; (8006474 <TIM_ITRx_SetConfig+0x34>)
 8006454:	4013      	ands	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4313      	orrs	r3, r2
 800645e:	2207      	movs	r2, #7
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	609a      	str	r2, [r3, #8]
}
 800646a:	46c0      	nop			; (mov r8, r8)
 800646c:	46bd      	mov	sp, r7
 800646e:	b004      	add	sp, #16
 8006470:	bd80      	pop	{r7, pc}
 8006472:	46c0      	nop			; (mov r8, r8)
 8006474:	ffcfff8f 	.word	0xffcfff8f

08006478 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	4a09      	ldr	r2, [pc, #36]	; (80064b4 <TIM_ETR_SetConfig+0x3c>)
 8006490:	4013      	ands	r3, r2
 8006492:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	021a      	lsls	r2, r3, #8
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	431a      	orrs	r2, r3
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4313      	orrs	r3, r2
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	609a      	str	r2, [r3, #8]
}
 80064ac:	46c0      	nop			; (mov r8, r8)
 80064ae:	46bd      	mov	sp, r7
 80064b0:	b006      	add	sp, #24
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	ffff00ff 	.word	0xffff00ff

080064b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	221f      	movs	r2, #31
 80064c8:	4013      	ands	r3, r2
 80064ca:	2201      	movs	r2, #1
 80064cc:	409a      	lsls	r2, r3
 80064ce:	0013      	movs	r3, r2
 80064d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	43d2      	mvns	r2, r2
 80064da:	401a      	ands	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6a1a      	ldr	r2, [r3, #32]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	211f      	movs	r1, #31
 80064e8:	400b      	ands	r3, r1
 80064ea:	6879      	ldr	r1, [r7, #4]
 80064ec:	4099      	lsls	r1, r3
 80064ee:	000b      	movs	r3, r1
 80064f0:	431a      	orrs	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	621a      	str	r2, [r3, #32]
}
 80064f6:	46c0      	nop			; (mov r8, r8)
 80064f8:	46bd      	mov	sp, r7
 80064fa:	b006      	add	sp, #24
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	223c      	movs	r2, #60	; 0x3c
 800650e:	5c9b      	ldrb	r3, [r3, r2]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d101      	bne.n	8006518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006514:	2302      	movs	r3, #2
 8006516:	e055      	b.n	80065c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	223c      	movs	r2, #60	; 0x3c
 800651c:	2101      	movs	r1, #1
 800651e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	223d      	movs	r2, #61	; 0x3d
 8006524:	2102      	movs	r1, #2
 8006526:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a23      	ldr	r2, [pc, #140]	; (80065cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d108      	bne.n	8006554 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4a22      	ldr	r2, [pc, #136]	; (80065d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006546:	4013      	ands	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	4313      	orrs	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2270      	movs	r2, #112	; 0x70
 8006558:	4393      	bics	r3, r2
 800655a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a16      	ldr	r2, [pc, #88]	; (80065cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00f      	beq.n	8006598 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	2380      	movs	r3, #128	; 0x80
 800657e:	05db      	lsls	r3, r3, #23
 8006580:	429a      	cmp	r2, r3
 8006582:	d009      	beq.n	8006598 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a12      	ldr	r2, [pc, #72]	; (80065d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d004      	beq.n	8006598 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a11      	ldr	r2, [pc, #68]	; (80065d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d10c      	bne.n	80065b2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2280      	movs	r2, #128	; 0x80
 800659c:	4393      	bics	r3, r2
 800659e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	223d      	movs	r2, #61	; 0x3d
 80065b6:	2101      	movs	r1, #1
 80065b8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	223c      	movs	r2, #60	; 0x3c
 80065be:	2100      	movs	r1, #0
 80065c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	0018      	movs	r0, r3
 80065c6:	46bd      	mov	sp, r7
 80065c8:	b004      	add	sp, #16
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	40012c00 	.word	0x40012c00
 80065d0:	ff0fffff 	.word	0xff0fffff
 80065d4:	40000400 	.word	0x40000400
 80065d8:	40014000 	.word	0x40014000

080065dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	223c      	movs	r2, #60	; 0x3c
 80065ee:	5c9b      	ldrb	r3, [r3, r2]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e06f      	b.n	80066d8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	223c      	movs	r2, #60	; 0x3c
 80065fc:	2101      	movs	r1, #1
 80065fe:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	22ff      	movs	r2, #255	; 0xff
 8006604:	4393      	bics	r3, r2
 8006606:	001a      	movs	r2, r3
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	4313      	orrs	r3, r2
 800660e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4a33      	ldr	r2, [pc, #204]	; (80066e0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8006614:	401a      	ands	r2, r3
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4a30      	ldr	r2, [pc, #192]	; (80066e4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8006622:	401a      	ands	r2, r3
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	4313      	orrs	r3, r2
 800662a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4a2e      	ldr	r2, [pc, #184]	; (80066e8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8006630:	401a      	ands	r2, r3
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4a2b      	ldr	r2, [pc, #172]	; (80066ec <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800663e:	401a      	ands	r2, r3
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	4313      	orrs	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4a29      	ldr	r2, [pc, #164]	; (80066f0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800664c:	401a      	ands	r2, r3
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	4313      	orrs	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	4a26      	ldr	r2, [pc, #152]	; (80066f4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800665a:	401a      	ands	r2, r3
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006660:	4313      	orrs	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4a24      	ldr	r2, [pc, #144]	; (80066f8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006668:	401a      	ands	r2, r3
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	041b      	lsls	r3, r3, #16
 8006670:	4313      	orrs	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4a21      	ldr	r2, [pc, #132]	; (80066fc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006678:	401a      	ands	r2, r3
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	4313      	orrs	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a1e      	ldr	r2, [pc, #120]	; (8006700 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d11c      	bne.n	80066c6 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4a1d      	ldr	r2, [pc, #116]	; (8006704 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006690:	401a      	ands	r2, r3
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006696:	051b      	lsls	r3, r3, #20
 8006698:	4313      	orrs	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4a1a      	ldr	r2, [pc, #104]	; (8006708 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80066a0:	401a      	ands	r2, r3
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	4a17      	ldr	r2, [pc, #92]	; (800670c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80066ae:	401a      	ands	r2, r3
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	4313      	orrs	r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4a15      	ldr	r2, [pc, #84]	; (8006710 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80066bc:	401a      	ands	r2, r3
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	223c      	movs	r2, #60	; 0x3c
 80066d2:	2100      	movs	r1, #0
 80066d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	0018      	movs	r0, r3
 80066da:	46bd      	mov	sp, r7
 80066dc:	b004      	add	sp, #16
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	fffffcff 	.word	0xfffffcff
 80066e4:	fffffbff 	.word	0xfffffbff
 80066e8:	fffff7ff 	.word	0xfffff7ff
 80066ec:	ffffefff 	.word	0xffffefff
 80066f0:	ffffdfff 	.word	0xffffdfff
 80066f4:	ffffbfff 	.word	0xffffbfff
 80066f8:	fff0ffff 	.word	0xfff0ffff
 80066fc:	efffffff 	.word	0xefffffff
 8006700:	40012c00 	.word	0x40012c00
 8006704:	ff0fffff 	.word	0xff0fffff
 8006708:	feffffff 	.word	0xfeffffff
 800670c:	fdffffff 	.word	0xfdffffff
 8006710:	dfffffff 	.word	0xdfffffff

08006714 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800671c:	46c0      	nop			; (mov r8, r8)
 800671e:	46bd      	mov	sp, r7
 8006720:	b002      	add	sp, #8
 8006722:	bd80      	pop	{r7, pc}

08006724 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800672c:	46c0      	nop			; (mov r8, r8)
 800672e:	46bd      	mov	sp, r7
 8006730:	b002      	add	sp, #8
 8006732:	bd80      	pop	{r7, pc}

08006734 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800673c:	46c0      	nop			; (mov r8, r8)
 800673e:	46bd      	mov	sp, r7
 8006740:	b002      	add	sp, #8
 8006742:	bd80      	pop	{r7, pc}

08006744 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800674a:	1d3b      	adds	r3, r7, #4
 800674c:	0018      	movs	r0, r3
 800674e:	230c      	movs	r3, #12
 8006750:	001a      	movs	r2, r3
 8006752:	2100      	movs	r1, #0
 8006754:	f001 fa3f 	bl	8007bd6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8006758:	4b45      	ldr	r3, [pc, #276]	; (8006870 <MX_ADC1_Init+0x12c>)
 800675a:	4a46      	ldr	r2, [pc, #280]	; (8006874 <MX_ADC1_Init+0x130>)
 800675c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 800675e:	4b44      	ldr	r3, [pc, #272]	; (8006870 <MX_ADC1_Init+0x12c>)
 8006760:	2280      	movs	r2, #128	; 0x80
 8006762:	0352      	lsls	r2, r2, #13
 8006764:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006766:	4b42      	ldr	r3, [pc, #264]	; (8006870 <MX_ADC1_Init+0x12c>)
 8006768:	2200      	movs	r2, #0
 800676a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800676c:	4b40      	ldr	r3, [pc, #256]	; (8006870 <MX_ADC1_Init+0x12c>)
 800676e:	2200      	movs	r2, #0
 8006770:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006772:	4b3f      	ldr	r3, [pc, #252]	; (8006870 <MX_ADC1_Init+0x12c>)
 8006774:	2200      	movs	r2, #0
 8006776:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006778:	4b3d      	ldr	r3, [pc, #244]	; (8006870 <MX_ADC1_Init+0x12c>)
 800677a:	2204      	movs	r2, #4
 800677c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800677e:	4b3c      	ldr	r3, [pc, #240]	; (8006870 <MX_ADC1_Init+0x12c>)
 8006780:	2200      	movs	r2, #0
 8006782:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8006784:	4b3a      	ldr	r3, [pc, #232]	; (8006870 <MX_ADC1_Init+0x12c>)
 8006786:	2200      	movs	r2, #0
 8006788:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800678a:	4b39      	ldr	r3, [pc, #228]	; (8006870 <MX_ADC1_Init+0x12c>)
 800678c:	2200      	movs	r2, #0
 800678e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8006790:	4b37      	ldr	r3, [pc, #220]	; (8006870 <MX_ADC1_Init+0x12c>)
 8006792:	2201      	movs	r2, #1
 8006794:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8006796:	4b36      	ldr	r3, [pc, #216]	; (8006870 <MX_ADC1_Init+0x12c>)
 8006798:	2220      	movs	r2, #32
 800679a:	2101      	movs	r1, #1
 800679c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800679e:	4b34      	ldr	r3, [pc, #208]	; (8006870 <MX_ADC1_Init+0x12c>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80067a4:	4b32      	ldr	r3, [pc, #200]	; (8006870 <MX_ADC1_Init+0x12c>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80067aa:	4b31      	ldr	r3, [pc, #196]	; (8006870 <MX_ADC1_Init+0x12c>)
 80067ac:	222c      	movs	r2, #44	; 0x2c
 80067ae:	2100      	movs	r1, #0
 80067b0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80067b2:	4b2f      	ldr	r3, [pc, #188]	; (8006870 <MX_ADC1_Init+0x12c>)
 80067b4:	2280      	movs	r2, #128	; 0x80
 80067b6:	0152      	lsls	r2, r2, #5
 80067b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_3CYCLES_5;
 80067ba:	4b2d      	ldr	r3, [pc, #180]	; (8006870 <MX_ADC1_Init+0x12c>)
 80067bc:	2201      	movs	r2, #1
 80067be:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 80067c0:	4b2b      	ldr	r3, [pc, #172]	; (8006870 <MX_ADC1_Init+0x12c>)
 80067c2:	2205      	movs	r2, #5
 80067c4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 80067c6:	4b2a      	ldr	r3, [pc, #168]	; (8006870 <MX_ADC1_Init+0x12c>)
 80067c8:	223c      	movs	r2, #60	; 0x3c
 80067ca:	2101      	movs	r1, #1
 80067cc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 80067ce:	4b28      	ldr	r3, [pc, #160]	; (8006870 <MX_ADC1_Init+0x12c>)
 80067d0:	2210      	movs	r2, #16
 80067d2:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_5;
 80067d4:	4b26      	ldr	r3, [pc, #152]	; (8006870 <MX_ADC1_Init+0x12c>)
 80067d6:	22a0      	movs	r2, #160	; 0xa0
 80067d8:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80067da:	4b25      	ldr	r3, [pc, #148]	; (8006870 <MX_ADC1_Init+0x12c>)
 80067dc:	2200      	movs	r2, #0
 80067de:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80067e0:	4b23      	ldr	r3, [pc, #140]	; (8006870 <MX_ADC1_Init+0x12c>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80067e6:	4b22      	ldr	r3, [pc, #136]	; (8006870 <MX_ADC1_Init+0x12c>)
 80067e8:	0018      	movs	r0, r3
 80067ea:	f7fb fa59 	bl	8001ca0 <HAL_ADC_Init>
 80067ee:	1e03      	subs	r3, r0, #0
 80067f0:	d001      	beq.n	80067f6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80067f2:	f000 fd3b 	bl	800726c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80067f6:	1d3b      	adds	r3, r7, #4
 80067f8:	2201      	movs	r2, #1
 80067fa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80067fc:	1d3b      	adds	r3, r7, #4
 80067fe:	2200      	movs	r2, #0
 8006800:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8006802:	1d3b      	adds	r3, r7, #4
 8006804:	2200      	movs	r2, #0
 8006806:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006808:	1d3a      	adds	r2, r7, #4
 800680a:	4b19      	ldr	r3, [pc, #100]	; (8006870 <MX_ADC1_Init+0x12c>)
 800680c:	0011      	movs	r1, r2
 800680e:	0018      	movs	r0, r3
 8006810:	f7fb fd9a 	bl	8002348 <HAL_ADC_ConfigChannel>
 8006814:	1e03      	subs	r3, r0, #0
 8006816:	d001      	beq.n	800681c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8006818:	f000 fd28 	bl	800726c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

	sConfig.Channel = ADC_CHANNEL_2;
 800681c:	1d3b      	adds	r3, r7, #4
 800681e:	4a16      	ldr	r2, [pc, #88]	; (8006878 <MX_ADC1_Init+0x134>)
 8006820:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8006822:	1d3b      	adds	r3, r7, #4
 8006824:	2200      	movs	r2, #0
 8006826:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8006828:	1d3b      	adds	r3, r7, #4
 800682a:	2200      	movs	r2, #0
 800682c:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800682e:	1d3a      	adds	r2, r7, #4
 8006830:	4b0f      	ldr	r3, [pc, #60]	; (8006870 <MX_ADC1_Init+0x12c>)
 8006832:	0011      	movs	r1, r2
 8006834:	0018      	movs	r0, r3
 8006836:	f7fb fd87 	bl	8002348 <HAL_ADC_ConfigChannel>
 800683a:	1e03      	subs	r3, r0, #0
 800683c:	d001      	beq.n	8006842 <MX_ADC1_Init+0xfe>
		Error_Handler();
 800683e:	f000 fd15 	bl	800726c <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_4;
 8006842:	1d3b      	adds	r3, r7, #4
 8006844:	4a0d      	ldr	r2, [pc, #52]	; (800687c <MX_ADC1_Init+0x138>)
 8006846:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8006848:	1d3b      	adds	r3, r7, #4
 800684a:	2200      	movs	r2, #0
 800684c:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800684e:	1d3b      	adds	r3, r7, #4
 8006850:	2200      	movs	r2, #0
 8006852:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8006854:	1d3a      	adds	r2, r7, #4
 8006856:	4b06      	ldr	r3, [pc, #24]	; (8006870 <MX_ADC1_Init+0x12c>)
 8006858:	0011      	movs	r1, r2
 800685a:	0018      	movs	r0, r3
 800685c:	f7fb fd74 	bl	8002348 <HAL_ADC_ConfigChannel>
 8006860:	1e03      	subs	r3, r0, #0
 8006862:	d001      	beq.n	8006868 <MX_ADC1_Init+0x124>
		Error_Handler();
 8006864:	f000 fd02 	bl	800726c <Error_Handler>
	}

  /* USER CODE END ADC1_Init 2 */

}
 8006868:	46c0      	nop			; (mov r8, r8)
 800686a:	46bd      	mov	sp, r7
 800686c:	b004      	add	sp, #16
 800686e:	bd80      	pop	{r7, pc}
 8006870:	20000088 	.word	0x20000088
 8006874:	40012400 	.word	0x40012400
 8006878:	08000004 	.word	0x08000004
 800687c:	10000010 	.word	0x10000010

08006880 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006880:	b590      	push	{r4, r7, lr}
 8006882:	b099      	sub	sp, #100	; 0x64
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006888:	234c      	movs	r3, #76	; 0x4c
 800688a:	18fb      	adds	r3, r7, r3
 800688c:	0018      	movs	r0, r3
 800688e:	2314      	movs	r3, #20
 8006890:	001a      	movs	r2, r3
 8006892:	2100      	movs	r1, #0
 8006894:	f001 f99f 	bl	8007bd6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006898:	2418      	movs	r4, #24
 800689a:	193b      	adds	r3, r7, r4
 800689c:	0018      	movs	r0, r3
 800689e:	2334      	movs	r3, #52	; 0x34
 80068a0:	001a      	movs	r2, r3
 80068a2:	2100      	movs	r1, #0
 80068a4:	f001 f997 	bl	8007bd6 <memset>
  if(adcHandle->Instance==ADC1)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a31      	ldr	r2, [pc, #196]	; (8006974 <HAL_ADC_MspInit+0xf4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d15c      	bne.n	800696c <HAL_ADC_MspInit+0xec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80068b2:	193b      	adds	r3, r7, r4
 80068b4:	2280      	movs	r2, #128	; 0x80
 80068b6:	01d2      	lsls	r2, r2, #7
 80068b8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80068ba:	193b      	adds	r3, r7, r4
 80068bc:	2200      	movs	r2, #0
 80068be:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80068c0:	193b      	adds	r3, r7, r4
 80068c2:	0018      	movs	r0, r3
 80068c4:	f7fe fb6c 	bl	8004fa0 <HAL_RCCEx_PeriphCLKConfig>
 80068c8:	1e03      	subs	r3, r0, #0
 80068ca:	d001      	beq.n	80068d0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80068cc:	f000 fcce 	bl	800726c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80068d0:	4b29      	ldr	r3, [pc, #164]	; (8006978 <HAL_ADC_MspInit+0xf8>)
 80068d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068d4:	4b28      	ldr	r3, [pc, #160]	; (8006978 <HAL_ADC_MspInit+0xf8>)
 80068d6:	2180      	movs	r1, #128	; 0x80
 80068d8:	0349      	lsls	r1, r1, #13
 80068da:	430a      	orrs	r2, r1
 80068dc:	641a      	str	r2, [r3, #64]	; 0x40
 80068de:	4b26      	ldr	r3, [pc, #152]	; (8006978 <HAL_ADC_MspInit+0xf8>)
 80068e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068e2:	2380      	movs	r3, #128	; 0x80
 80068e4:	035b      	lsls	r3, r3, #13
 80068e6:	4013      	ands	r3, r2
 80068e8:	617b      	str	r3, [r7, #20]
 80068ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068ec:	4b22      	ldr	r3, [pc, #136]	; (8006978 <HAL_ADC_MspInit+0xf8>)
 80068ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068f0:	4b21      	ldr	r3, [pc, #132]	; (8006978 <HAL_ADC_MspInit+0xf8>)
 80068f2:	2101      	movs	r1, #1
 80068f4:	430a      	orrs	r2, r1
 80068f6:	635a      	str	r2, [r3, #52]	; 0x34
 80068f8:	4b1f      	ldr	r3, [pc, #124]	; (8006978 <HAL_ADC_MspInit+0xf8>)
 80068fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068fc:	2201      	movs	r2, #1
 80068fe:	4013      	ands	r3, r2
 8006900:	613b      	str	r3, [r7, #16]
 8006902:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006904:	4b1c      	ldr	r3, [pc, #112]	; (8006978 <HAL_ADC_MspInit+0xf8>)
 8006906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006908:	4b1b      	ldr	r3, [pc, #108]	; (8006978 <HAL_ADC_MspInit+0xf8>)
 800690a:	2102      	movs	r1, #2
 800690c:	430a      	orrs	r2, r1
 800690e:	635a      	str	r2, [r3, #52]	; 0x34
 8006910:	4b19      	ldr	r3, [pc, #100]	; (8006978 <HAL_ADC_MspInit+0xf8>)
 8006912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006914:	2202      	movs	r2, #2
 8006916:	4013      	ands	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = VOLTAGE_Pin|CURRENT_Pin;
 800691c:	244c      	movs	r4, #76	; 0x4c
 800691e:	193b      	adds	r3, r7, r4
 8006920:	2205      	movs	r2, #5
 8006922:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006924:	193b      	adds	r3, r7, r4
 8006926:	2203      	movs	r2, #3
 8006928:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800692a:	193b      	adds	r3, r7, r4
 800692c:	2200      	movs	r2, #0
 800692e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006930:	193a      	adds	r2, r7, r4
 8006932:	23a0      	movs	r3, #160	; 0xa0
 8006934:	05db      	lsls	r3, r3, #23
 8006936:	0011      	movs	r1, r2
 8006938:	0018      	movs	r0, r3
 800693a:	f7fc ffbd 	bl	80038b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = INPUT_VOLTAGE_Pin;
 800693e:	193b      	adds	r3, r7, r4
 8006940:	2204      	movs	r2, #4
 8006942:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006944:	193b      	adds	r3, r7, r4
 8006946:	2203      	movs	r2, #3
 8006948:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800694a:	193b      	adds	r3, r7, r4
 800694c:	2200      	movs	r2, #0
 800694e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(INPUT_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8006950:	193b      	adds	r3, r7, r4
 8006952:	4a0a      	ldr	r2, [pc, #40]	; (800697c <HAL_ADC_MspInit+0xfc>)
 8006954:	0019      	movs	r1, r3
 8006956:	0010      	movs	r0, r2
 8006958:	f7fc ffae 	bl	80038b8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 1, 0);
 800695c:	2200      	movs	r2, #0
 800695e:	2101      	movs	r1, #1
 8006960:	200c      	movs	r0, #12
 8006962:	f7fc fc7b 	bl	800325c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8006966:	200c      	movs	r0, #12
 8006968:	f7fc fc8d 	bl	8003286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800696c:	46c0      	nop			; (mov r8, r8)
 800696e:	46bd      	mov	sp, r7
 8006970:	b019      	add	sp, #100	; 0x64
 8006972:	bd90      	pop	{r4, r7, pc}
 8006974:	40012400 	.word	0x40012400
 8006978:	40021000 	.word	0x40021000
 800697c:	50000400 	.word	0x50000400

08006980 <MX_COMP1_Init>:
COMP_HandleTypeDef hcomp1;
COMP_HandleTypeDef hcomp2;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8006984:	4b15      	ldr	r3, [pc, #84]	; (80069dc <MX_COMP1_Init+0x5c>)
 8006986:	4a16      	ldr	r2, [pc, #88]	; (80069e0 <MX_COMP1_Init+0x60>)
 8006988:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 800698a:	4b14      	ldr	r3, [pc, #80]	; (80069dc <MX_COMP1_Init+0x5c>)
 800698c:	2280      	movs	r2, #128	; 0x80
 800698e:	0092      	lsls	r2, r2, #2
 8006990:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8006992:	4b12      	ldr	r3, [pc, #72]	; (80069dc <MX_COMP1_Init+0x5c>)
 8006994:	2240      	movs	r2, #64	; 0x40
 8006996:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8006998:	4b10      	ldr	r3, [pc, #64]	; (80069dc <MX_COMP1_Init+0x5c>)
 800699a:	2200      	movs	r2, #0
 800699c:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800699e:	4b0f      	ldr	r3, [pc, #60]	; (80069dc <MX_COMP1_Init+0x5c>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_MEDIUM;
 80069a4:	4b0d      	ldr	r3, [pc, #52]	; (80069dc <MX_COMP1_Init+0x5c>)
 80069a6:	2280      	movs	r2, #128	; 0x80
 80069a8:	0292      	lsls	r2, r2, #10
 80069aa:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80069ac:	4b0b      	ldr	r3, [pc, #44]	; (80069dc <MX_COMP1_Init+0x5c>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80069b2:	4b0a      	ldr	r3, [pc, #40]	; (80069dc <MX_COMP1_Init+0x5c>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80069b8:	4b08      	ldr	r3, [pc, #32]	; (80069dc <MX_COMP1_Init+0x5c>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80069be:	4b07      	ldr	r3, [pc, #28]	; (80069dc <MX_COMP1_Init+0x5c>)
 80069c0:	2200      	movs	r2, #0
 80069c2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80069c4:	4b05      	ldr	r3, [pc, #20]	; (80069dc <MX_COMP1_Init+0x5c>)
 80069c6:	0018      	movs	r0, r3
 80069c8:	f7fc f9da 	bl	8002d80 <HAL_COMP_Init>
 80069cc:	1e03      	subs	r3, r0, #0
 80069ce:	d001      	beq.n	80069d4 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 80069d0:	f000 fc4c 	bl	800726c <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80069d4:	46c0      	nop			; (mov r8, r8)
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	46c0      	nop			; (mov r8, r8)
 80069dc:	200000ec 	.word	0x200000ec
 80069e0:	40010200 	.word	0x40010200

080069e4 <MX_COMP2_Init>:
/* COMP2 init function */
void MX_COMP2_Init(void)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80069e8:	4b15      	ldr	r3, [pc, #84]	; (8006a40 <MX_COMP2_Init+0x5c>)
 80069ea:	4a16      	ldr	r2, [pc, #88]	; (8006a44 <MX_COMP2_Init+0x60>)
 80069ec:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 80069ee:	4b14      	ldr	r3, [pc, #80]	; (8006a40 <MX_COMP2_Init+0x5c>)
 80069f0:	2280      	movs	r2, #128	; 0x80
 80069f2:	0092      	lsls	r2, r2, #2
 80069f4:	611a      	str	r2, [r3, #16]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 80069f6:	4b12      	ldr	r3, [pc, #72]	; (8006a40 <MX_COMP2_Init+0x5c>)
 80069f8:	2250      	movs	r2, #80	; 0x50
 80069fa:	615a      	str	r2, [r3, #20]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80069fc:	4b10      	ldr	r3, [pc, #64]	; (8006a40 <MX_COMP2_Init+0x5c>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8006a02:	4b0f      	ldr	r3, [pc, #60]	; (8006a40 <MX_COMP2_Init+0x5c>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_MEDIUM;
 8006a08:	4b0d      	ldr	r3, [pc, #52]	; (8006a40 <MX_COMP2_Init+0x5c>)
 8006a0a:	2280      	movs	r2, #128	; 0x80
 8006a0c:	0292      	lsls	r2, r2, #10
 8006a0e:	619a      	str	r2, [r3, #24]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8006a10:	4b0b      	ldr	r3, [pc, #44]	; (8006a40 <MX_COMP2_Init+0x5c>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	621a      	str	r2, [r3, #32]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8006a16:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <MX_COMP2_Init+0x5c>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	60da      	str	r2, [r3, #12]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8006a1c:	4b08      	ldr	r3, [pc, #32]	; (8006a40 <MX_COMP2_Init+0x5c>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8006a22:	4b07      	ldr	r3, [pc, #28]	; (8006a40 <MX_COMP2_Init+0x5c>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8006a28:	4b05      	ldr	r3, [pc, #20]	; (8006a40 <MX_COMP2_Init+0x5c>)
 8006a2a:	0018      	movs	r0, r3
 8006a2c:	f7fc f9a8 	bl	8002d80 <HAL_COMP_Init>
 8006a30:	1e03      	subs	r3, r0, #0
 8006a32:	d001      	beq.n	8006a38 <MX_COMP2_Init+0x54>
  {
    Error_Handler();
 8006a34:	f000 fc1a 	bl	800726c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8006a38:	46c0      	nop			; (mov r8, r8)
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	46c0      	nop			; (mov r8, r8)
 8006a40:	2000011c 	.word	0x2000011c
 8006a44:	40010204 	.word	0x40010204

08006a48 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8006a48:	b590      	push	{r4, r7, lr}
 8006a4a:	b08b      	sub	sp, #44	; 0x2c
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a50:	2414      	movs	r4, #20
 8006a52:	193b      	adds	r3, r7, r4
 8006a54:	0018      	movs	r0, r3
 8006a56:	2314      	movs	r3, #20
 8006a58:	001a      	movs	r2, r3
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	f001 f8bb 	bl	8007bd6 <memset>
  if(compHandle->Instance==COMP1)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a22      	ldr	r2, [pc, #136]	; (8006af0 <HAL_COMP_MspInit+0xa8>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d11c      	bne.n	8006aa4 <HAL_COMP_MspInit+0x5c>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a6a:	4b22      	ldr	r3, [pc, #136]	; (8006af4 <HAL_COMP_MspInit+0xac>)
 8006a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a6e:	4b21      	ldr	r3, [pc, #132]	; (8006af4 <HAL_COMP_MspInit+0xac>)
 8006a70:	2101      	movs	r1, #1
 8006a72:	430a      	orrs	r2, r1
 8006a74:	635a      	str	r2, [r3, #52]	; 0x34
 8006a76:	4b1f      	ldr	r3, [pc, #124]	; (8006af4 <HAL_COMP_MspInit+0xac>)
 8006a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	613b      	str	r3, [r7, #16]
 8006a80:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = VOLTAGE_CMP_Pin;
 8006a82:	193b      	adds	r3, r7, r4
 8006a84:	2202      	movs	r2, #2
 8006a86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a88:	193b      	adds	r3, r7, r4
 8006a8a:	2203      	movs	r2, #3
 8006a8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a8e:	193b      	adds	r3, r7, r4
 8006a90:	2200      	movs	r2, #0
 8006a92:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VOLTAGE_CMP_GPIO_Port, &GPIO_InitStruct);
 8006a94:	193a      	adds	r2, r7, r4
 8006a96:	23a0      	movs	r3, #160	; 0xa0
 8006a98:	05db      	lsls	r3, r3, #23
 8006a9a:	0011      	movs	r1, r2
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	f7fc ff0b 	bl	80038b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 8006aa2:	e021      	b.n	8006ae8 <HAL_COMP_MspInit+0xa0>
  else if(compHandle->Instance==COMP2)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a13      	ldr	r2, [pc, #76]	; (8006af8 <HAL_COMP_MspInit+0xb0>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d11c      	bne.n	8006ae8 <HAL_COMP_MspInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aae:	4b11      	ldr	r3, [pc, #68]	; (8006af4 <HAL_COMP_MspInit+0xac>)
 8006ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ab2:	4b10      	ldr	r3, [pc, #64]	; (8006af4 <HAL_COMP_MspInit+0xac>)
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	635a      	str	r2, [r3, #52]	; 0x34
 8006aba:	4b0e      	ldr	r3, [pc, #56]	; (8006af4 <HAL_COMP_MspInit+0xac>)
 8006abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006abe:	2201      	movs	r2, #1
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CURRENT_COMP_Pin;
 8006ac6:	2114      	movs	r1, #20
 8006ac8:	187b      	adds	r3, r7, r1
 8006aca:	2208      	movs	r2, #8
 8006acc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ace:	187b      	adds	r3, r7, r1
 8006ad0:	2203      	movs	r2, #3
 8006ad2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad4:	187b      	adds	r3, r7, r1
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(CURRENT_COMP_GPIO_Port, &GPIO_InitStruct);
 8006ada:	187a      	adds	r2, r7, r1
 8006adc:	23a0      	movs	r3, #160	; 0xa0
 8006ade:	05db      	lsls	r3, r3, #23
 8006ae0:	0011      	movs	r1, r2
 8006ae2:	0018      	movs	r0, r3
 8006ae4:	f7fc fee8 	bl	80038b8 <HAL_GPIO_Init>
}
 8006ae8:	46c0      	nop			; (mov r8, r8)
 8006aea:	46bd      	mov	sp, r7
 8006aec:	b00b      	add	sp, #44	; 0x2c
 8006aee:	bd90      	pop	{r4, r7, pc}
 8006af0:	40010200 	.word	0x40010200
 8006af4:	40021000 	.word	0x40021000
 8006af8:	40010204 	.word	0x40010204

08006afc <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b08a      	sub	sp, #40	; 0x28
 8006b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8006b02:	1d3b      	adds	r3, r7, #4
 8006b04:	0018      	movs	r0, r3
 8006b06:	2324      	movs	r3, #36	; 0x24
 8006b08:	001a      	movs	r2, r3
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	f001 f863 	bl	8007bd6 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8006b10:	4b1e      	ldr	r3, [pc, #120]	; (8006b8c <MX_DAC1_Init+0x90>)
 8006b12:	4a1f      	ldr	r2, [pc, #124]	; (8006b90 <MX_DAC1_Init+0x94>)
 8006b14:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006b16:	4b1d      	ldr	r3, [pc, #116]	; (8006b8c <MX_DAC1_Init+0x90>)
 8006b18:	0018      	movs	r0, r3
 8006b1a:	f7fc fbd1 	bl	80032c0 <HAL_DAC_Init>
 8006b1e:	1e03      	subs	r3, r0, #0
 8006b20:	d001      	beq.n	8006b26 <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 8006b22:	f000 fba3 	bl	800726c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006b26:	1d3b      	adds	r3, r7, #4
 8006b28:	2200      	movs	r2, #0
 8006b2a:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006b2c:	1d3b      	adds	r3, r7, #4
 8006b2e:	2200      	movs	r2, #0
 8006b30:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006b32:	1d3b      	adds	r3, r7, #4
 8006b34:	2200      	movs	r2, #0
 8006b36:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8006b38:	1d3b      	adds	r3, r7, #4
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006b3e:	1d3b      	adds	r3, r7, #4
 8006b40:	2200      	movs	r2, #0
 8006b42:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006b44:	1d39      	adds	r1, r7, #4
 8006b46:	4b11      	ldr	r3, [pc, #68]	; (8006b8c <MX_DAC1_Init+0x90>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	0018      	movs	r0, r3
 8006b4c:	f7fc fc58 	bl	8003400 <HAL_DAC_ConfigChannel>
 8006b50:	1e03      	subs	r3, r0, #0
 8006b52:	d001      	beq.n	8006b58 <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 8006b54:	f000 fb8a 	bl	800726c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006b58:	1d39      	adds	r1, r7, #4
 8006b5a:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <MX_DAC1_Init+0x90>)
 8006b5c:	2210      	movs	r2, #16
 8006b5e:	0018      	movs	r0, r3
 8006b60:	f7fc fc4e 	bl	8003400 <HAL_DAC_ConfigChannel>
 8006b64:	1e03      	subs	r3, r0, #0
 8006b66:	d001      	beq.n	8006b6c <MX_DAC1_Init+0x70>
  {
    Error_Handler();
 8006b68:	f000 fb80 	bl	800726c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  HAL_DACEx_SelfCalibrate(&hdac1, &sConfig, DAC_CHANNEL_1);
 8006b6c:	1d39      	adds	r1, r7, #4
 8006b6e:	4b07      	ldr	r3, [pc, #28]	; (8006b8c <MX_DAC1_Init+0x90>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	0018      	movs	r0, r3
 8006b74:	f7fc fd74 	bl	8003660 <HAL_DACEx_SelfCalibrate>
  HAL_DACEx_SelfCalibrate(&hdac1, &sConfig, DAC_CHANNEL_2);
 8006b78:	1d39      	adds	r1, r7, #4
 8006b7a:	4b04      	ldr	r3, [pc, #16]	; (8006b8c <MX_DAC1_Init+0x90>)
 8006b7c:	2210      	movs	r2, #16
 8006b7e:	0018      	movs	r0, r3
 8006b80:	f7fc fd6e 	bl	8003660 <HAL_DACEx_SelfCalibrate>
  /* USER CODE END DAC1_Init 2 */

}
 8006b84:	46c0      	nop			; (mov r8, r8)
 8006b86:	46bd      	mov	sp, r7
 8006b88:	b00a      	add	sp, #40	; 0x28
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	2000014c 	.word	0x2000014c
 8006b90:	40007400 	.word	0x40007400

08006b94 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8006b94:	b590      	push	{r4, r7, lr}
 8006b96:	b08b      	sub	sp, #44	; 0x2c
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b9c:	2414      	movs	r4, #20
 8006b9e:	193b      	adds	r3, r7, r4
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	2314      	movs	r3, #20
 8006ba4:	001a      	movs	r2, r3
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	f001 f815 	bl	8007bd6 <memset>
  if(dacHandle->Instance==DAC1)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a18      	ldr	r2, [pc, #96]	; (8006c14 <HAL_DAC_MspInit+0x80>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d129      	bne.n	8006c0a <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006bb6:	4b18      	ldr	r3, [pc, #96]	; (8006c18 <HAL_DAC_MspInit+0x84>)
 8006bb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bba:	4b17      	ldr	r3, [pc, #92]	; (8006c18 <HAL_DAC_MspInit+0x84>)
 8006bbc:	2180      	movs	r1, #128	; 0x80
 8006bbe:	0589      	lsls	r1, r1, #22
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8006bc4:	4b14      	ldr	r3, [pc, #80]	; (8006c18 <HAL_DAC_MspInit+0x84>)
 8006bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bc8:	2380      	movs	r3, #128	; 0x80
 8006bca:	059b      	lsls	r3, r3, #22
 8006bcc:	4013      	ands	r3, r2
 8006bce:	613b      	str	r3, [r7, #16]
 8006bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bd2:	4b11      	ldr	r3, [pc, #68]	; (8006c18 <HAL_DAC_MspInit+0x84>)
 8006bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bd6:	4b10      	ldr	r3, [pc, #64]	; (8006c18 <HAL_DAC_MspInit+0x84>)
 8006bd8:	2101      	movs	r1, #1
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	635a      	str	r2, [r3, #52]	; 0x34
 8006bde:	4b0e      	ldr	r3, [pc, #56]	; (8006c18 <HAL_DAC_MspInit+0x84>)
 8006be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be2:	2201      	movs	r2, #1
 8006be4:	4013      	ands	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006bea:	193b      	adds	r3, r7, r4
 8006bec:	2230      	movs	r2, #48	; 0x30
 8006bee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006bf0:	193b      	adds	r3, r7, r4
 8006bf2:	2203      	movs	r2, #3
 8006bf4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bf6:	193b      	adds	r3, r7, r4
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bfc:	193a      	adds	r2, r7, r4
 8006bfe:	23a0      	movs	r3, #160	; 0xa0
 8006c00:	05db      	lsls	r3, r3, #23
 8006c02:	0011      	movs	r1, r2
 8006c04:	0018      	movs	r0, r3
 8006c06:	f7fc fe57 	bl	80038b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8006c0a:	46c0      	nop			; (mov r8, r8)
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	b00b      	add	sp, #44	; 0x2c
 8006c10:	bd90      	pop	{r4, r7, pc}
 8006c12:	46c0      	nop			; (mov r8, r8)
 8006c14:	40007400 	.word	0x40007400
 8006c18:	40021000 	.word	0x40021000

08006c1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006c1c:	b590      	push	{r4, r7, lr}
 8006c1e:	b089      	sub	sp, #36	; 0x24
 8006c20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c22:	240c      	movs	r4, #12
 8006c24:	193b      	adds	r3, r7, r4
 8006c26:	0018      	movs	r0, r3
 8006c28:	2314      	movs	r3, #20
 8006c2a:	001a      	movs	r2, r3
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	f000 ffd2 	bl	8007bd6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c32:	4b1b      	ldr	r3, [pc, #108]	; (8006ca0 <MX_GPIO_Init+0x84>)
 8006c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c36:	4b1a      	ldr	r3, [pc, #104]	; (8006ca0 <MX_GPIO_Init+0x84>)
 8006c38:	2101      	movs	r1, #1
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	635a      	str	r2, [r3, #52]	; 0x34
 8006c3e:	4b18      	ldr	r3, [pc, #96]	; (8006ca0 <MX_GPIO_Init+0x84>)
 8006c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c42:	2201      	movs	r2, #1
 8006c44:	4013      	ands	r3, r2
 8006c46:	60bb      	str	r3, [r7, #8]
 8006c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c4a:	4b15      	ldr	r3, [pc, #84]	; (8006ca0 <MX_GPIO_Init+0x84>)
 8006c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c4e:	4b14      	ldr	r3, [pc, #80]	; (8006ca0 <MX_GPIO_Init+0x84>)
 8006c50:	2102      	movs	r1, #2
 8006c52:	430a      	orrs	r2, r1
 8006c54:	635a      	str	r2, [r3, #52]	; 0x34
 8006c56:	4b12      	ldr	r3, [pc, #72]	; (8006ca0 <MX_GPIO_Init+0x84>)
 8006c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	607b      	str	r3, [r7, #4]
 8006c60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CC_MODE_GPIO_Port, CC_MODE_Pin, GPIO_PIN_RESET);
 8006c62:	23a0      	movs	r3, #160	; 0xa0
 8006c64:	05db      	lsls	r3, r3, #23
 8006c66:	2200      	movs	r2, #0
 8006c68:	2140      	movs	r1, #64	; 0x40
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	f7fc ff88 	bl	8003b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CC_MODE_Pin;
 8006c70:	0021      	movs	r1, r4
 8006c72:	187b      	adds	r3, r7, r1
 8006c74:	2240      	movs	r2, #64	; 0x40
 8006c76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c78:	187b      	adds	r3, r7, r1
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c7e:	187b      	adds	r3, r7, r1
 8006c80:	2200      	movs	r2, #0
 8006c82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c84:	187b      	adds	r3, r7, r1
 8006c86:	2200      	movs	r2, #0
 8006c88:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CC_MODE_GPIO_Port, &GPIO_InitStruct);
 8006c8a:	187a      	adds	r2, r7, r1
 8006c8c:	23a0      	movs	r3, #160	; 0xa0
 8006c8e:	05db      	lsls	r3, r3, #23
 8006c90:	0011      	movs	r1, r2
 8006c92:	0018      	movs	r0, r3
 8006c94:	f7fc fe10 	bl	80038b8 <HAL_GPIO_Init>

}
 8006c98:	46c0      	nop			; (mov r8, r8)
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	b009      	add	sp, #36	; 0x24
 8006c9e:	bd90      	pop	{r4, r7, pc}
 8006ca0:	40021000 	.word	0x40021000

08006ca4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006ca8:	4b1b      	ldr	r3, [pc, #108]	; (8006d18 <MX_I2C1_Init+0x74>)
 8006caa:	4a1c      	ldr	r2, [pc, #112]	; (8006d1c <MX_I2C1_Init+0x78>)
 8006cac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8006cae:	4b1a      	ldr	r3, [pc, #104]	; (8006d18 <MX_I2C1_Init+0x74>)
 8006cb0:	4a1b      	ldr	r2, [pc, #108]	; (8006d20 <MX_I2C1_Init+0x7c>)
 8006cb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006cb4:	4b18      	ldr	r3, [pc, #96]	; (8006d18 <MX_I2C1_Init+0x74>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006cba:	4b17      	ldr	r3, [pc, #92]	; (8006d18 <MX_I2C1_Init+0x74>)
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006cc0:	4b15      	ldr	r3, [pc, #84]	; (8006d18 <MX_I2C1_Init+0x74>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006cc6:	4b14      	ldr	r3, [pc, #80]	; (8006d18 <MX_I2C1_Init+0x74>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006ccc:	4b12      	ldr	r3, [pc, #72]	; (8006d18 <MX_I2C1_Init+0x74>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006cd2:	4b11      	ldr	r3, [pc, #68]	; (8006d18 <MX_I2C1_Init+0x74>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006cd8:	4b0f      	ldr	r3, [pc, #60]	; (8006d18 <MX_I2C1_Init+0x74>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006cde:	4b0e      	ldr	r3, [pc, #56]	; (8006d18 <MX_I2C1_Init+0x74>)
 8006ce0:	0018      	movs	r0, r3
 8006ce2:	f7fc ff6b 	bl	8003bbc <HAL_I2C_Init>
 8006ce6:	1e03      	subs	r3, r0, #0
 8006ce8:	d001      	beq.n	8006cee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006cea:	f000 fabf 	bl	800726c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006cee:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <MX_I2C1_Init+0x74>)
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	0018      	movs	r0, r3
 8006cf4:	f7fd fbd8 	bl	80044a8 <HAL_I2CEx_ConfigAnalogFilter>
 8006cf8:	1e03      	subs	r3, r0, #0
 8006cfa:	d001      	beq.n	8006d00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006cfc:	f000 fab6 	bl	800726c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006d00:	4b05      	ldr	r3, [pc, #20]	; (8006d18 <MX_I2C1_Init+0x74>)
 8006d02:	2100      	movs	r1, #0
 8006d04:	0018      	movs	r0, r3
 8006d06:	f7fd fc1b 	bl	8004540 <HAL_I2CEx_ConfigDigitalFilter>
 8006d0a:	1e03      	subs	r3, r0, #0
 8006d0c:	d001      	beq.n	8006d12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006d0e:	f000 faad 	bl	800726c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006d12:	46c0      	nop			; (mov r8, r8)
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	20000160 	.word	0x20000160
 8006d1c:	40005400 	.word	0x40005400
 8006d20:	10707dbc 	.word	0x10707dbc

08006d24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006d24:	b590      	push	{r4, r7, lr}
 8006d26:	b097      	sub	sp, #92	; 0x5c
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d2c:	2344      	movs	r3, #68	; 0x44
 8006d2e:	18fb      	adds	r3, r7, r3
 8006d30:	0018      	movs	r0, r3
 8006d32:	2314      	movs	r3, #20
 8006d34:	001a      	movs	r2, r3
 8006d36:	2100      	movs	r1, #0
 8006d38:	f000 ff4d 	bl	8007bd6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006d3c:	2410      	movs	r4, #16
 8006d3e:	193b      	adds	r3, r7, r4
 8006d40:	0018      	movs	r0, r3
 8006d42:	2334      	movs	r3, #52	; 0x34
 8006d44:	001a      	movs	r2, r3
 8006d46:	2100      	movs	r1, #0
 8006d48:	f000 ff45 	bl	8007bd6 <memset>
  if(i2cHandle->Instance==I2C1)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a22      	ldr	r2, [pc, #136]	; (8006ddc <HAL_I2C_MspInit+0xb8>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d13d      	bne.n	8006dd2 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006d56:	193b      	adds	r3, r7, r4
 8006d58:	2220      	movs	r2, #32
 8006d5a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006d5c:	193b      	adds	r3, r7, r4
 8006d5e:	2200      	movs	r2, #0
 8006d60:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006d62:	193b      	adds	r3, r7, r4
 8006d64:	0018      	movs	r0, r3
 8006d66:	f7fe f91b 	bl	8004fa0 <HAL_RCCEx_PeriphCLKConfig>
 8006d6a:	1e03      	subs	r3, r0, #0
 8006d6c:	d001      	beq.n	8006d72 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8006d6e:	f000 fa7d 	bl	800726c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d72:	4b1b      	ldr	r3, [pc, #108]	; (8006de0 <HAL_I2C_MspInit+0xbc>)
 8006d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d76:	4b1a      	ldr	r3, [pc, #104]	; (8006de0 <HAL_I2C_MspInit+0xbc>)
 8006d78:	2102      	movs	r1, #2
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	635a      	str	r2, [r3, #52]	; 0x34
 8006d7e:	4b18      	ldr	r3, [pc, #96]	; (8006de0 <HAL_I2C_MspInit+0xbc>)
 8006d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d82:	2202      	movs	r2, #2
 8006d84:	4013      	ands	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006d8a:	2144      	movs	r1, #68	; 0x44
 8006d8c:	187b      	adds	r3, r7, r1
 8006d8e:	22c0      	movs	r2, #192	; 0xc0
 8006d90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006d92:	187b      	adds	r3, r7, r1
 8006d94:	2212      	movs	r2, #18
 8006d96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d98:	187b      	adds	r3, r7, r1
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d9e:	187b      	adds	r3, r7, r1
 8006da0:	2200      	movs	r2, #0
 8006da2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8006da4:	187b      	adds	r3, r7, r1
 8006da6:	2206      	movs	r2, #6
 8006da8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006daa:	187b      	adds	r3, r7, r1
 8006dac:	4a0d      	ldr	r2, [pc, #52]	; (8006de4 <HAL_I2C_MspInit+0xc0>)
 8006dae:	0019      	movs	r1, r3
 8006db0:	0010      	movs	r0, r2
 8006db2:	f7fc fd81 	bl	80038b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006db6:	4b0a      	ldr	r3, [pc, #40]	; (8006de0 <HAL_I2C_MspInit+0xbc>)
 8006db8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dba:	4b09      	ldr	r3, [pc, #36]	; (8006de0 <HAL_I2C_MspInit+0xbc>)
 8006dbc:	2180      	movs	r1, #128	; 0x80
 8006dbe:	0389      	lsls	r1, r1, #14
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8006dc4:	4b06      	ldr	r3, [pc, #24]	; (8006de0 <HAL_I2C_MspInit+0xbc>)
 8006dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dc8:	2380      	movs	r3, #128	; 0x80
 8006dca:	039b      	lsls	r3, r3, #14
 8006dcc:	4013      	ands	r3, r2
 8006dce:	60bb      	str	r3, [r7, #8]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006dd2:	46c0      	nop			; (mov r8, r8)
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	b017      	add	sp, #92	; 0x5c
 8006dd8:	bd90      	pop	{r4, r7, pc}
 8006dda:	46c0      	nop			; (mov r8, r8)
 8006ddc:	40005400 	.word	0x40005400
 8006de0:	40021000 	.word	0x40021000
 8006de4:	50000400 	.word	0x50000400

08006de8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8006dec:	f7fa fd34 	bl	8001858 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8006df0:	f000 f8b6 	bl	8006f60 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8006df4:	f7ff ff12 	bl	8006c1c <MX_GPIO_Init>
	MX_ADC1_Init();
 8006df8:	f7ff fca4 	bl	8006744 <MX_ADC1_Init>
	MX_TIM1_Init();
 8006dfc:	f000 fd3a 	bl	8007874 <MX_TIM1_Init>
	MX_I2C1_Init();
 8006e00:	f7ff ff50 	bl	8006ca4 <MX_I2C1_Init>
	MX_COMP1_Init();
 8006e04:	f7ff fdbc 	bl	8006980 <MX_COMP1_Init>
	MX_COMP2_Init();
 8006e08:	f7ff fdec 	bl	80069e4 <MX_COMP2_Init>
	MX_DAC1_Init();
 8006e0c:	f7ff fe76 	bl	8006afc <MX_DAC1_Init>
	/* USER CODE BEGIN 2 */

	ssd1306_Init();
 8006e10:	f000 fa6a 	bl	80072e8 <ssd1306_Init>

	HAL_ADCEx_Calibration_Start(&hadc1);
 8006e14:	4b42      	ldr	r3, [pc, #264]	; (8006f20 <main+0x138>)
 8006e16:	0018      	movs	r0, r3
 8006e18:	f7fb fdea 	bl	80029f0 <HAL_ADCEx_Calibration_Start>
	adcActualChannel = ADC_CHANNEL_0;
 8006e1c:	4b41      	ldr	r3, [pc, #260]	; (8006f24 <main+0x13c>)
 8006e1e:	2201      	movs	r2, #1
 8006e20:	601a      	str	r2, [r3, #0]
	HAL_ADC_SetChannel(&hadc1, adcActualChannel);
 8006e22:	4b40      	ldr	r3, [pc, #256]	; (8006f24 <main+0x13c>)
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	4b3e      	ldr	r3, [pc, #248]	; (8006f20 <main+0x138>)
 8006e28:	0011      	movs	r1, r2
 8006e2a:	0018      	movs	r0, r3
 8006e2c:	f000 f9fa 	bl	8007224 <HAL_ADC_SetChannel>
	HAL_ADC_Start_IT(&hadc1);
 8006e30:	4b3b      	ldr	r3, [pc, #236]	; (8006f20 <main+0x138>)
 8006e32:	0018      	movs	r0, r3
 8006e34:	f7fb f8dc 	bl	8001ff0 <HAL_ADC_Start_IT>

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8006e38:	4b3b      	ldr	r3, [pc, #236]	; (8006f28 <main+0x140>)
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f7fc fa62 	bl	8003306 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8006e42:	4b39      	ldr	r3, [pc, #228]	; (8006f28 <main+0x140>)
 8006e44:	2110      	movs	r1, #16
 8006e46:	0018      	movs	r0, r3
 8006e48:	f7fc fa5d 	bl	8003306 <HAL_DAC_Start>

	HAL_COMP_Start(&hcomp1);
 8006e4c:	4b37      	ldr	r3, [pc, #220]	; (8006f2c <main+0x144>)
 8006e4e:	0018      	movs	r0, r3
 8006e50:	f7fc f8f8 	bl	8003044 <HAL_COMP_Start>
	HAL_COMP_Start(&hcomp2);
 8006e54:	4b36      	ldr	r3, [pc, #216]	; (8006f30 <main+0x148>)
 8006e56:	0018      	movs	r0, r3
 8006e58:	f7fc f8f4 	bl	8003044 <HAL_COMP_Start>
	//boost
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
//	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 10);

//buck
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8006e5c:	4b35      	ldr	r3, [pc, #212]	; (8006f34 <main+0x14c>)
 8006e5e:	2104      	movs	r1, #4
 8006e60:	0018      	movs	r0, r3
 8006e62:	f7fe fb0d 	bl	8005480 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8006e66:	4b33      	ldr	r3, [pc, #204]	; (8006f34 <main+0x14c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	639a      	str	r2, [r3, #56]	; 0x38

	targetVoltage = 4200;
 8006e6e:	4b32      	ldr	r3, [pc, #200]	; (8006f38 <main+0x150>)
 8006e70:	4a32      	ldr	r2, [pc, #200]	; (8006f3c <main+0x154>)
 8006e72:	601a      	str	r2, [r3, #0]
	targetCurrent = 500;
 8006e74:	4b32      	ldr	r3, [pc, #200]	; (8006f40 <main+0x158>)
 8006e76:	22fa      	movs	r2, #250	; 0xfa
 8006e78:	0052      	lsls	r2, r2, #1
 8006e7a:	601a      	str	r2, [r3, #0]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
				targetVoltage / 18.5);
 8006e7c:	4b2e      	ldr	r3, [pc, #184]	; (8006f38 <main+0x150>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	0018      	movs	r0, r3
 8006e82:	f7fa fca5 	bl	80017d0 <__aeabi_ui2d>
 8006e86:	2200      	movs	r2, #0
 8006e88:	4b2e      	ldr	r3, [pc, #184]	; (8006f44 <main+0x15c>)
 8006e8a:	f7f9 fa2d 	bl	80002e8 <__aeabi_ddiv>
 8006e8e:	0002      	movs	r2, r0
 8006e90:	000b      	movs	r3, r1
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8006e92:	0010      	movs	r0, r2
 8006e94:	0019      	movs	r1, r3
 8006e96:	f7f9 fa09 	bl	80002ac <__aeabi_d2uiz>
 8006e9a:	0003      	movs	r3, r0
 8006e9c:	4822      	ldr	r0, [pc, #136]	; (8006f28 <main+0x140>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	f7fc fa86 	bl	80033b2 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R,
 8006ea6:	4b26      	ldr	r3, [pc, #152]	; (8006f40 <main+0x158>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	085b      	lsrs	r3, r3, #1
 8006eac:	481e      	ldr	r0, [pc, #120]	; (8006f28 <main+0x140>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	2110      	movs	r1, #16
 8006eb2:	f7fc fa7e 	bl	80033b2 <HAL_DAC_SetValue>
				targetCurrent / 2);

		memset(buffer, ' ', sizeof(buffer));
 8006eb6:	4b24      	ldr	r3, [pc, #144]	; (8006f48 <main+0x160>)
 8006eb8:	220f      	movs	r2, #15
 8006eba:	2120      	movs	r1, #32
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	f000 fe8a 	bl	8007bd6 <memset>
		sprintf(buffer, "%d mV     ", (int) voltage);
 8006ec2:	4b22      	ldr	r3, [pc, #136]	; (8006f4c <main+0x164>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	001a      	movs	r2, r3
 8006ec8:	4921      	ldr	r1, [pc, #132]	; (8006f50 <main+0x168>)
 8006eca:	4b1f      	ldr	r3, [pc, #124]	; (8006f48 <main+0x160>)
 8006ecc:	0018      	movs	r0, r3
 8006ece:	f000 fe4f 	bl	8007b70 <siprintf>
		ssd1306_SetCursor(0, 0);
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	f000 fbe1 	bl	800769c <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_11x18, White);
 8006eda:	4a1e      	ldr	r2, [pc, #120]	; (8006f54 <main+0x16c>)
 8006edc:	481a      	ldr	r0, [pc, #104]	; (8006f48 <main+0x160>)
 8006ede:	2301      	movs	r3, #1
 8006ee0:	6811      	ldr	r1, [r2, #0]
 8006ee2:	6852      	ldr	r2, [r2, #4]
 8006ee4:	f000 fbb0 	bl	8007648 <ssd1306_WriteString>

		memset(buffer, ' ', sizeof(buffer));
 8006ee8:	4b17      	ldr	r3, [pc, #92]	; (8006f48 <main+0x160>)
 8006eea:	220f      	movs	r2, #15
 8006eec:	2120      	movs	r1, #32
 8006eee:	0018      	movs	r0, r3
 8006ef0:	f000 fe71 	bl	8007bd6 <memset>
		sprintf(buffer, "%d mA     ", (int) current);
 8006ef4:	4b18      	ldr	r3, [pc, #96]	; (8006f58 <main+0x170>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	001a      	movs	r2, r3
 8006efa:	4918      	ldr	r1, [pc, #96]	; (8006f5c <main+0x174>)
 8006efc:	4b12      	ldr	r3, [pc, #72]	; (8006f48 <main+0x160>)
 8006efe:	0018      	movs	r0, r3
 8006f00:	f000 fe36 	bl	8007b70 <siprintf>
		ssd1306_SetCursor(0, 25);
 8006f04:	2119      	movs	r1, #25
 8006f06:	2000      	movs	r0, #0
 8006f08:	f000 fbc8 	bl	800769c <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_11x18, White);
 8006f0c:	4a11      	ldr	r2, [pc, #68]	; (8006f54 <main+0x16c>)
 8006f0e:	480e      	ldr	r0, [pc, #56]	; (8006f48 <main+0x160>)
 8006f10:	2301      	movs	r3, #1
 8006f12:	6811      	ldr	r1, [r2, #0]
 8006f14:	6852      	ldr	r2, [r2, #4]
 8006f16:	f000 fb97 	bl	8007648 <ssd1306_WriteString>

		ssd1306_UpdateScreen();
 8006f1a:	f000 fa6b 	bl	80073f4 <ssd1306_UpdateScreen>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8006f1e:	e7ad      	b.n	8006e7c <main+0x94>
 8006f20:	20000088 	.word	0x20000088
 8006f24:	200001d0 	.word	0x200001d0
 8006f28:	2000014c 	.word	0x2000014c
 8006f2c:	200000ec 	.word	0x200000ec
 8006f30:	2000011c 	.word	0x2000011c
 8006f34:	200005fc 	.word	0x200005fc
 8006f38:	200001c8 	.word	0x200001c8
 8006f3c:	00001068 	.word	0x00001068
 8006f40:	200001cc 	.word	0x200001cc
 8006f44:	40328000 	.word	0x40328000
 8006f48:	200001e0 	.word	0x200001e0
 8006f4c:	200001b4 	.word	0x200001b4
 8006f50:	080084d4 	.word	0x080084d4
 8006f54:	2000000c 	.word	0x2000000c
 8006f58:	200001b8 	.word	0x200001b8
 8006f5c:	080084e0 	.word	0x080084e0

08006f60 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8006f60:	b590      	push	{r4, r7, lr}
 8006f62:	b093      	sub	sp, #76	; 0x4c
 8006f64:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8006f66:	2410      	movs	r4, #16
 8006f68:	193b      	adds	r3, r7, r4
 8006f6a:	0018      	movs	r0, r3
 8006f6c:	2338      	movs	r3, #56	; 0x38
 8006f6e:	001a      	movs	r2, r3
 8006f70:	2100      	movs	r1, #0
 8006f72:	f000 fe30 	bl	8007bd6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8006f76:	003b      	movs	r3, r7
 8006f78:	0018      	movs	r0, r3
 8006f7a:	2310      	movs	r3, #16
 8006f7c:	001a      	movs	r2, r3
 8006f7e:	2100      	movs	r1, #0
 8006f80:	f000 fe29 	bl	8007bd6 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f84:	2380      	movs	r3, #128	; 0x80
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	0018      	movs	r0, r3
 8006f8a:	f7fd fb25 	bl	80045d8 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006f8e:	193b      	adds	r3, r7, r4
 8006f90:	2202      	movs	r2, #2
 8006f92:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006f94:	193b      	adds	r3, r7, r4
 8006f96:	2280      	movs	r2, #128	; 0x80
 8006f98:	0052      	lsls	r2, r2, #1
 8006f9a:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8006f9c:	0021      	movs	r1, r4
 8006f9e:	187b      	adds	r3, r7, r1
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006fa4:	187b      	adds	r3, r7, r1
 8006fa6:	2240      	movs	r2, #64	; 0x40
 8006fa8:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006faa:	187b      	adds	r3, r7, r1
 8006fac:	2202      	movs	r2, #2
 8006fae:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006fb0:	187b      	adds	r3, r7, r1
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8006fb6:	187b      	adds	r3, r7, r1
 8006fb8:	2200      	movs	r2, #0
 8006fba:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLN = 8;
 8006fbc:	187b      	adds	r3, r7, r1
 8006fbe:	2208      	movs	r2, #8
 8006fc0:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006fc2:	187b      	adds	r3, r7, r1
 8006fc4:	2280      	movs	r2, #128	; 0x80
 8006fc6:	0292      	lsls	r2, r2, #10
 8006fc8:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006fca:	187b      	adds	r3, r7, r1
 8006fcc:	2280      	movs	r2, #128	; 0x80
 8006fce:	0492      	lsls	r2, r2, #18
 8006fd0:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006fd2:	187b      	adds	r3, r7, r1
 8006fd4:	2280      	movs	r2, #128	; 0x80
 8006fd6:	0592      	lsls	r2, r2, #22
 8006fd8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8006fda:	187b      	adds	r3, r7, r1
 8006fdc:	0018      	movs	r0, r3
 8006fde:	f7fd fb3b 	bl	8004658 <HAL_RCC_OscConfig>
 8006fe2:	1e03      	subs	r3, r0, #0
 8006fe4:	d001      	beq.n	8006fea <SystemClock_Config+0x8a>
		Error_Handler();
 8006fe6:	f000 f941 	bl	800726c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8006fea:	003b      	movs	r3, r7
 8006fec:	2207      	movs	r2, #7
 8006fee:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006ff0:	003b      	movs	r3, r7
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006ff6:	003b      	movs	r3, r7
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006ffc:	003b      	movs	r3, r7
 8006ffe:	2200      	movs	r2, #0
 8007000:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8007002:	003b      	movs	r3, r7
 8007004:	2102      	movs	r1, #2
 8007006:	0018      	movs	r0, r3
 8007008:	f7fd fe40 	bl	8004c8c <HAL_RCC_ClockConfig>
 800700c:	1e03      	subs	r3, r0, #0
 800700e:	d001      	beq.n	8007014 <SystemClock_Config+0xb4>
		Error_Handler();
 8007010:	f000 f92c 	bl	800726c <Error_Handler>
	}
}
 8007014:	46c0      	nop			; (mov r8, r8)
 8007016:	46bd      	mov	sp, r7
 8007018:	b013      	add	sp, #76	; 0x4c
 800701a:	bd90      	pop	{r4, r7, pc}

0800701c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]

	if (adcActualChannel == ADC_CHANNEL_0) {
 8007024:	4b3f      	ldr	r3, [pc, #252]	; (8007124 <HAL_ADC_ConvCpltCallback+0x108>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d118      	bne.n	800705e <HAL_ADC_ConvCpltCallback+0x42>

		voltage = HAL_ADC_GetValue(&hadc1) * (18.5);
 800702c:	4b3e      	ldr	r3, [pc, #248]	; (8007128 <HAL_ADC_ConvCpltCallback+0x10c>)
 800702e:	0018      	movs	r0, r3
 8007030:	f7fb f856 	bl	80020e0 <HAL_ADC_GetValue>
 8007034:	0003      	movs	r3, r0
 8007036:	0018      	movs	r0, r3
 8007038:	f7fa fbca 	bl	80017d0 <__aeabi_ui2d>
 800703c:	2200      	movs	r2, #0
 800703e:	4b3b      	ldr	r3, [pc, #236]	; (800712c <HAL_ADC_ConvCpltCallback+0x110>)
 8007040:	f7f9 fd4c 	bl	8000adc <__aeabi_dmul>
 8007044:	0002      	movs	r2, r0
 8007046:	000b      	movs	r3, r1
 8007048:	0010      	movs	r0, r2
 800704a:	0019      	movs	r1, r3
 800704c:	f7f9 f92e 	bl	80002ac <__aeabi_d2uiz>
 8007050:	0002      	movs	r2, r0
 8007052:	4b37      	ldr	r3, [pc, #220]	; (8007130 <HAL_ADC_ConvCpltCallback+0x114>)
 8007054:	601a      	str	r2, [r3, #0]

		adcActualChannel = ADC_CHANNEL_2;
 8007056:	4b33      	ldr	r3, [pc, #204]	; (8007124 <HAL_ADC_ConvCpltCallback+0x108>)
 8007058:	4a36      	ldr	r2, [pc, #216]	; (8007134 <HAL_ADC_ConvCpltCallback+0x118>)
 800705a:	601a      	str	r2, [r3, #0]
 800705c:	e02d      	b.n	80070ba <HAL_ADC_ConvCpltCallback+0x9e>

	} else if (adcActualChannel == ADC_CHANNEL_2) {
 800705e:	4b31      	ldr	r3, [pc, #196]	; (8007124 <HAL_ADC_ConvCpltCallback+0x108>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a34      	ldr	r2, [pc, #208]	; (8007134 <HAL_ADC_ConvCpltCallback+0x118>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d10b      	bne.n	8007080 <HAL_ADC_ConvCpltCallback+0x64>

		current = HAL_ADC_GetValue(&hadc1) * (2);
 8007068:	4b2f      	ldr	r3, [pc, #188]	; (8007128 <HAL_ADC_ConvCpltCallback+0x10c>)
 800706a:	0018      	movs	r0, r3
 800706c:	f7fb f838 	bl	80020e0 <HAL_ADC_GetValue>
 8007070:	0003      	movs	r3, r0
 8007072:	005a      	lsls	r2, r3, #1
 8007074:	4b30      	ldr	r3, [pc, #192]	; (8007138 <HAL_ADC_ConvCpltCallback+0x11c>)
 8007076:	601a      	str	r2, [r3, #0]
		adcActualChannel = ADC_CHANNEL_10;
 8007078:	4b2a      	ldr	r3, [pc, #168]	; (8007124 <HAL_ADC_ConvCpltCallback+0x108>)
 800707a:	4a30      	ldr	r2, [pc, #192]	; (800713c <HAL_ADC_ConvCpltCallback+0x120>)
 800707c:	601a      	str	r2, [r3, #0]
 800707e:	e01c      	b.n	80070ba <HAL_ADC_ConvCpltCallback+0x9e>

	} else if (adcActualChannel == ADC_CHANNEL_10) {
 8007080:	4b28      	ldr	r3, [pc, #160]	; (8007124 <HAL_ADC_ConvCpltCallback+0x108>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a2d      	ldr	r2, [pc, #180]	; (800713c <HAL_ADC_ConvCpltCallback+0x120>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d117      	bne.n	80070ba <HAL_ADC_ConvCpltCallback+0x9e>

		inputVoltage = HAL_ADC_GetValue(&hadc1) * (8.9);
 800708a:	4b27      	ldr	r3, [pc, #156]	; (8007128 <HAL_ADC_ConvCpltCallback+0x10c>)
 800708c:	0018      	movs	r0, r3
 800708e:	f7fb f827 	bl	80020e0 <HAL_ADC_GetValue>
 8007092:	0003      	movs	r3, r0
 8007094:	0018      	movs	r0, r3
 8007096:	f7fa fb9b 	bl	80017d0 <__aeabi_ui2d>
 800709a:	4a29      	ldr	r2, [pc, #164]	; (8007140 <HAL_ADC_ConvCpltCallback+0x124>)
 800709c:	4b29      	ldr	r3, [pc, #164]	; (8007144 <HAL_ADC_ConvCpltCallback+0x128>)
 800709e:	f7f9 fd1d 	bl	8000adc <__aeabi_dmul>
 80070a2:	0002      	movs	r2, r0
 80070a4:	000b      	movs	r3, r1
 80070a6:	0010      	movs	r0, r2
 80070a8:	0019      	movs	r1, r3
 80070aa:	f7f9 f8ff 	bl	80002ac <__aeabi_d2uiz>
 80070ae:	0002      	movs	r2, r0
 80070b0:	4b25      	ldr	r3, [pc, #148]	; (8007148 <HAL_ADC_ConvCpltCallback+0x12c>)
 80070b2:	601a      	str	r2, [r3, #0]
		adcActualChannel = ADC_CHANNEL_0;
 80070b4:	4b1b      	ldr	r3, [pc, #108]	; (8007124 <HAL_ADC_ConvCpltCallback+0x108>)
 80070b6:	2201      	movs	r2, #1
 80070b8:	601a      	str	r2, [r3, #0]
	}

	if (current > (targetCurrent))
 80070ba:	4b1f      	ldr	r3, [pc, #124]	; (8007138 <HAL_ADC_ConvCpltCallback+0x11c>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	4b23      	ldr	r3, [pc, #140]	; (800714c <HAL_ADC_ConvCpltCallback+0x130>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d903      	bls.n	80070ce <HAL_ADC_ConvCpltCallback+0xb2>
		CCmode = 1;
 80070c6:	4b22      	ldr	r3, [pc, #136]	; (8007150 <HAL_ADC_ConvCpltCallback+0x134>)
 80070c8:	2201      	movs	r2, #1
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	e008      	b.n	80070e0 <HAL_ADC_ConvCpltCallback+0xc4>
	else if (voltage > (targetVoltage))
 80070ce:	4b18      	ldr	r3, [pc, #96]	; (8007130 <HAL_ADC_ConvCpltCallback+0x114>)
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	4b20      	ldr	r3, [pc, #128]	; (8007154 <HAL_ADC_ConvCpltCallback+0x138>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d902      	bls.n	80070e0 <HAL_ADC_ConvCpltCallback+0xc4>
		CCmode = 0;
 80070da:	4b1d      	ldr	r3, [pc, #116]	; (8007150 <HAL_ADC_ConvCpltCallback+0x134>)
 80070dc:	2200      	movs	r2, #0
 80070de:	601a      	str	r2, [r3, #0]

	HAL_ADC_SetChannel(&hadc1, adcActualChannel);
 80070e0:	4b10      	ldr	r3, [pc, #64]	; (8007124 <HAL_ADC_ConvCpltCallback+0x108>)
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	4b10      	ldr	r3, [pc, #64]	; (8007128 <HAL_ADC_ConvCpltCallback+0x10c>)
 80070e6:	0011      	movs	r1, r2
 80070e8:	0018      	movs	r0, r3
 80070ea:	f000 f89b 	bl	8007224 <HAL_ADC_SetChannel>

	if (CCmode)
 80070ee:	4b18      	ldr	r3, [pc, #96]	; (8007150 <HAL_ADC_ConvCpltCallback+0x134>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d007      	beq.n	8007106 <HAL_ADC_ConvCpltCallback+0xea>
		HAL_GPIO_WritePin(CC_MODE_GPIO_Port, CC_MODE_Pin, GPIO_PIN_SET);
 80070f6:	23a0      	movs	r3, #160	; 0xa0
 80070f8:	05db      	lsls	r3, r3, #23
 80070fa:	2201      	movs	r2, #1
 80070fc:	2140      	movs	r1, #64	; 0x40
 80070fe:	0018      	movs	r0, r3
 8007100:	f7fc fd3e 	bl	8003b80 <HAL_GPIO_WritePin>
 8007104:	e006      	b.n	8007114 <HAL_ADC_ConvCpltCallback+0xf8>
	else
		HAL_GPIO_WritePin(CC_MODE_GPIO_Port, CC_MODE_Pin, GPIO_PIN_RESET);
 8007106:	23a0      	movs	r3, #160	; 0xa0
 8007108:	05db      	lsls	r3, r3, #23
 800710a:	2200      	movs	r2, #0
 800710c:	2140      	movs	r1, #64	; 0x40
 800710e:	0018      	movs	r0, r3
 8007110:	f7fc fd36 	bl	8003b80 <HAL_GPIO_WritePin>

	HAL_ADC_Start_IT(&hadc1);
 8007114:	4b04      	ldr	r3, [pc, #16]	; (8007128 <HAL_ADC_ConvCpltCallback+0x10c>)
 8007116:	0018      	movs	r0, r3
 8007118:	f7fa ff6a 	bl	8001ff0 <HAL_ADC_Start_IT>

}
 800711c:	46c0      	nop			; (mov r8, r8)
 800711e:	46bd      	mov	sp, r7
 8007120:	b002      	add	sp, #8
 8007122:	bd80      	pop	{r7, pc}
 8007124:	200001d0 	.word	0x200001d0
 8007128:	20000088 	.word	0x20000088
 800712c:	40328000 	.word	0x40328000
 8007130:	200001b4 	.word	0x200001b4
 8007134:	08000004 	.word	0x08000004
 8007138:	200001b8 	.word	0x200001b8
 800713c:	28000400 	.word	0x28000400
 8007140:	cccccccd 	.word	0xcccccccd
 8007144:	4021cccc 	.word	0x4021cccc
 8007148:	200001bc 	.word	0x200001bc
 800714c:	200001cc 	.word	0x200001cc
 8007150:	200001d4 	.word	0x200001d4
 8007154:	200001c8 	.word	0x200001c8

08007158 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a26      	ldr	r2, [pc, #152]	; (8007200 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d145      	bne.n	80071f6 <HAL_TIM_PWM_PulseFinishedCallback+0x9e>

		compVoltageState = HAL_COMP_GetOutputLevel(&hcomp1);
 800716a:	4b26      	ldr	r3, [pc, #152]	; (8007204 <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 800716c:	0018      	movs	r0, r3
 800716e:	f7fb ffbb 	bl	80030e8 <HAL_COMP_GetOutputLevel>
 8007172:	0002      	movs	r2, r0
 8007174:	4b24      	ldr	r3, [pc, #144]	; (8007208 <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 8007176:	601a      	str	r2, [r3, #0]
		compCurrentState = HAL_COMP_GetOutputLevel(&hcomp2);
 8007178:	4b24      	ldr	r3, [pc, #144]	; (800720c <HAL_TIM_PWM_PulseFinishedCallback+0xb4>)
 800717a:	0018      	movs	r0, r3
 800717c:	f7fb ffb4 	bl	80030e8 <HAL_COMP_GetOutputLevel>
 8007180:	0002      	movs	r2, r0
 8007182:	4b23      	ldr	r3, [pc, #140]	; (8007210 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 8007184:	601a      	str	r2, [r3, #0]
//				&& compCurrentState == COMP_OUTPUT_LEVEL_LOW && pwm < pwmMax) {
//			pwm++;
//		} else if (pwm > pwmMin) {
//			pwm--;
//		}
		if (compCurrentState == COMP_OUTPUT_LEVEL_LOW) {
 8007186:	4b22      	ldr	r3, [pc, #136]	; (8007210 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d11f      	bne.n	80071ce <HAL_TIM_PWM_PulseFinishedCallback+0x76>
			if (compVoltageState == COMP_OUTPUT_LEVEL_LOW && pwm < pwmMax) {
 800718e:	4b1e      	ldr	r3, [pc, #120]	; (8007208 <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10b      	bne.n	80071ae <HAL_TIM_PWM_PulseFinishedCallback+0x56>
 8007196:	4b1f      	ldr	r3, [pc, #124]	; (8007214 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>)
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	4b1f      	ldr	r3, [pc, #124]	; (8007218 <HAL_TIM_PWM_PulseFinishedCallback+0xc0>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d205      	bcs.n	80071ae <HAL_TIM_PWM_PulseFinishedCallback+0x56>
				pwm++;
 80071a2:	4b1c      	ldr	r3, [pc, #112]	; (8007214 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	4b1a      	ldr	r3, [pc, #104]	; (8007214 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>)
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	e01e      	b.n	80071ec <HAL_TIM_PWM_PulseFinishedCallback+0x94>
			} else if (compVoltageState == COMP_OUTPUT_LEVEL_HIGH
 80071ae:	4b16      	ldr	r3, [pc, #88]	; (8007208 <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d11a      	bne.n	80071ec <HAL_TIM_PWM_PulseFinishedCallback+0x94>
					&& pwm > pwmMin) {
 80071b6:	4b17      	ldr	r3, [pc, #92]	; (8007214 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>)
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	4b18      	ldr	r3, [pc, #96]	; (800721c <HAL_TIM_PWM_PulseFinishedCallback+0xc4>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d914      	bls.n	80071ec <HAL_TIM_PWM_PulseFinishedCallback+0x94>
				pwm--;
 80071c2:	4b14      	ldr	r3, [pc, #80]	; (8007214 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	1e5a      	subs	r2, r3, #1
 80071c8:	4b12      	ldr	r3, [pc, #72]	; (8007214 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>)
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	e00e      	b.n	80071ec <HAL_TIM_PWM_PulseFinishedCallback+0x94>
			}
		} else if(compCurrentState == COMP_OUTPUT_LEVEL_HIGH && pwm > pwmMin){
 80071ce:	4b10      	ldr	r3, [pc, #64]	; (8007210 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d10a      	bne.n	80071ec <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 80071d6:	4b0f      	ldr	r3, [pc, #60]	; (8007214 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	4b10      	ldr	r3, [pc, #64]	; (800721c <HAL_TIM_PWM_PulseFinishedCallback+0xc4>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d904      	bls.n	80071ec <HAL_TIM_PWM_PulseFinishedCallback+0x94>
			pwm--;
 80071e2:	4b0c      	ldr	r3, [pc, #48]	; (8007214 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	1e5a      	subs	r2, r3, #1
 80071e8:	4b0a      	ldr	r3, [pc, #40]	; (8007214 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>)
 80071ea:	601a      	str	r2, [r3, #0]
		}

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm);
 80071ec:	4b0c      	ldr	r3, [pc, #48]	; (8007220 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a08      	ldr	r2, [pc, #32]	; (8007214 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>)
 80071f2:	6812      	ldr	r2, [r2, #0]
 80071f4:	639a      	str	r2, [r3, #56]	; 0x38

	}
}
 80071f6:	46c0      	nop			; (mov r8, r8)
 80071f8:	46bd      	mov	sp, r7
 80071fa:	b002      	add	sp, #8
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	46c0      	nop			; (mov r8, r8)
 8007200:	40012c00 	.word	0x40012c00
 8007204:	200000ec 	.word	0x200000ec
 8007208:	200001d8 	.word	0x200001d8
 800720c:	2000011c 	.word	0x2000011c
 8007210:	200001dc 	.word	0x200001dc
 8007214:	200001c0 	.word	0x200001c0
 8007218:	20000008 	.word	0x20000008
 800721c:	200001c4 	.word	0x200001c4
 8007220:	200005fc 	.word	0x200005fc

08007224 <HAL_ADC_SetChannel>:

void HAL_ADC_SetChannel(ADC_HandleTypeDef *hadc, uint32_t channel) {
 8007224:	b590      	push	{r4, r7, lr}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800722e:	240c      	movs	r4, #12
 8007230:	193b      	adds	r3, r7, r4
 8007232:	0018      	movs	r0, r3
 8007234:	230c      	movs	r3, #12
 8007236:	001a      	movs	r2, r3
 8007238:	2100      	movs	r1, #0
 800723a:	f000 fccc 	bl	8007bd6 <memset>

	sConfig.Channel = channel;
 800723e:	193b      	adds	r3, r7, r4
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8007244:	193b      	adds	r3, r7, r4
 8007246:	2200      	movs	r2, #0
 8007248:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800724a:	193b      	adds	r3, r7, r4
 800724c:	2200      	movs	r2, #0
 800724e:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 8007250:	193a      	adds	r2, r7, r4
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	0011      	movs	r1, r2
 8007256:	0018      	movs	r0, r3
 8007258:	f7fb f876 	bl	8002348 <HAL_ADC_ConfigChannel>
 800725c:	1e03      	subs	r3, r0, #0
 800725e:	d001      	beq.n	8007264 <HAL_ADC_SetChannel+0x40>
		Error_Handler();
 8007260:	f000 f804 	bl	800726c <Error_Handler>
	}

}
 8007264:	46c0      	nop			; (mov r8, r8)
 8007266:	46bd      	mov	sp, r7
 8007268:	b007      	add	sp, #28
 800726a:	bd90      	pop	{r4, r7, pc}

0800726c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800726c:	b580      	push	{r7, lr}
 800726e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007270:	b672      	cpsid	i
}
 8007272:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8007274:	e7fe      	b.n	8007274 <Error_Handler+0x8>

08007276 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8007276:	b580      	push	{r7, lr}
 8007278:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800727a:	46c0      	nop			; (mov r8, r8)
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af04      	add	r7, sp, #16
 8007286:	0002      	movs	r2, r0
 8007288:	1dfb      	adds	r3, r7, #7
 800728a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800728c:	4808      	ldr	r0, [pc, #32]	; (80072b0 <ssd1306_WriteCommand+0x30>)
 800728e:	2301      	movs	r3, #1
 8007290:	425b      	negs	r3, r3
 8007292:	9302      	str	r3, [sp, #8]
 8007294:	2301      	movs	r3, #1
 8007296:	9301      	str	r3, [sp, #4]
 8007298:	1dfb      	adds	r3, r7, #7
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	2301      	movs	r3, #1
 800729e:	2200      	movs	r2, #0
 80072a0:	2178      	movs	r1, #120	; 0x78
 80072a2:	f7fc fd31 	bl	8003d08 <HAL_I2C_Mem_Write>
}
 80072a6:	46c0      	nop			; (mov r8, r8)
 80072a8:	46bd      	mov	sp, r7
 80072aa:	b002      	add	sp, #8
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	46c0      	nop			; (mov r8, r8)
 80072b0:	20000160 	.word	0x20000160

080072b4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af04      	add	r7, sp, #16
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	4808      	ldr	r0, [pc, #32]	; (80072e4 <ssd1306_WriteData+0x30>)
 80072c4:	2201      	movs	r2, #1
 80072c6:	4252      	negs	r2, r2
 80072c8:	9202      	str	r2, [sp, #8]
 80072ca:	9301      	str	r3, [sp, #4]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	2301      	movs	r3, #1
 80072d2:	2240      	movs	r2, #64	; 0x40
 80072d4:	2178      	movs	r1, #120	; 0x78
 80072d6:	f7fc fd17 	bl	8003d08 <HAL_I2C_Mem_Write>
}
 80072da:	46c0      	nop			; (mov r8, r8)
 80072dc:	46bd      	mov	sp, r7
 80072de:	b002      	add	sp, #8
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	46c0      	nop			; (mov r8, r8)
 80072e4:	20000160 	.word	0x20000160

080072e8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80072ec:	f7ff ffc3 	bl	8007276 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80072f0:	2064      	movs	r0, #100	; 0x64
 80072f2:	f7fa fb37 	bl	8001964 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80072f6:	2000      	movs	r0, #0
 80072f8:	f000 fa02 	bl	8007700 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80072fc:	2020      	movs	r0, #32
 80072fe:	f7ff ffbf 	bl	8007280 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8007302:	2000      	movs	r0, #0
 8007304:	f7ff ffbc 	bl	8007280 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8007308:	20b0      	movs	r0, #176	; 0xb0
 800730a:	f7ff ffb9 	bl	8007280 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800730e:	20c8      	movs	r0, #200	; 0xc8
 8007310:	f7ff ffb6 	bl	8007280 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8007314:	2000      	movs	r0, #0
 8007316:	f7ff ffb3 	bl	8007280 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800731a:	2010      	movs	r0, #16
 800731c:	f7ff ffb0 	bl	8007280 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8007320:	2040      	movs	r0, #64	; 0x40
 8007322:	f7ff ffad 	bl	8007280 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8007326:	20ff      	movs	r0, #255	; 0xff
 8007328:	f000 f9d2 	bl	80076d0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800732c:	20a1      	movs	r0, #161	; 0xa1
 800732e:	f7ff ffa7 	bl	8007280 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8007332:	20a6      	movs	r0, #166	; 0xa6
 8007334:	f7ff ffa4 	bl	8007280 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8007338:	20a8      	movs	r0, #168	; 0xa8
 800733a:	f7ff ffa1 	bl	8007280 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800733e:	203f      	movs	r0, #63	; 0x3f
 8007340:	f7ff ff9e 	bl	8007280 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8007344:	20a4      	movs	r0, #164	; 0xa4
 8007346:	f7ff ff9b 	bl	8007280 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800734a:	20d3      	movs	r0, #211	; 0xd3
 800734c:	f7ff ff98 	bl	8007280 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8007350:	2000      	movs	r0, #0
 8007352:	f7ff ff95 	bl	8007280 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8007356:	20d5      	movs	r0, #213	; 0xd5
 8007358:	f7ff ff92 	bl	8007280 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800735c:	20f0      	movs	r0, #240	; 0xf0
 800735e:	f7ff ff8f 	bl	8007280 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8007362:	20d9      	movs	r0, #217	; 0xd9
 8007364:	f7ff ff8c 	bl	8007280 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8007368:	2022      	movs	r0, #34	; 0x22
 800736a:	f7ff ff89 	bl	8007280 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800736e:	20da      	movs	r0, #218	; 0xda
 8007370:	f7ff ff86 	bl	8007280 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8007374:	2012      	movs	r0, #18
 8007376:	f7ff ff83 	bl	8007280 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800737a:	20db      	movs	r0, #219	; 0xdb
 800737c:	f7ff ff80 	bl	8007280 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8007380:	2020      	movs	r0, #32
 8007382:	f7ff ff7d 	bl	8007280 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8007386:	208d      	movs	r0, #141	; 0x8d
 8007388:	f7ff ff7a 	bl	8007280 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800738c:	2014      	movs	r0, #20
 800738e:	f7ff ff77 	bl	8007280 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8007392:	2001      	movs	r0, #1
 8007394:	f000 f9b4 	bl	8007700 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8007398:	2000      	movs	r0, #0
 800739a:	f000 f811 	bl	80073c0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800739e:	f000 f829 	bl	80073f4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80073a2:	4b06      	ldr	r3, [pc, #24]	; (80073bc <ssd1306_Init+0xd4>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80073a8:	4b04      	ldr	r3, [pc, #16]	; (80073bc <ssd1306_Init+0xd4>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80073ae:	4b03      	ldr	r3, [pc, #12]	; (80073bc <ssd1306_Init+0xd4>)
 80073b0:	2201      	movs	r2, #1
 80073b2:	711a      	strb	r2, [r3, #4]
}
 80073b4:	46c0      	nop			; (mov r8, r8)
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	46c0      	nop			; (mov r8, r8)
 80073bc:	200005f0 	.word	0x200005f0

080073c0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	0002      	movs	r2, r0
 80073c8:	1dfb      	adds	r3, r7, #7
 80073ca:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80073cc:	1dfb      	adds	r3, r7, #7
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d101      	bne.n	80073d8 <ssd1306_Fill+0x18>
 80073d4:	2300      	movs	r3, #0
 80073d6:	e000      	b.n	80073da <ssd1306_Fill+0x1a>
 80073d8:	23ff      	movs	r3, #255	; 0xff
 80073da:	2280      	movs	r2, #128	; 0x80
 80073dc:	00d2      	lsls	r2, r2, #3
 80073de:	4804      	ldr	r0, [pc, #16]	; (80073f0 <ssd1306_Fill+0x30>)
 80073e0:	0019      	movs	r1, r3
 80073e2:	f000 fbf8 	bl	8007bd6 <memset>
}
 80073e6:	46c0      	nop			; (mov r8, r8)
 80073e8:	46bd      	mov	sp, r7
 80073ea:	b002      	add	sp, #8
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	46c0      	nop			; (mov r8, r8)
 80073f0:	200001f0 	.word	0x200001f0

080073f4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80073fa:	1dfb      	adds	r3, r7, #7
 80073fc:	2200      	movs	r2, #0
 80073fe:	701a      	strb	r2, [r3, #0]
 8007400:	e01a      	b.n	8007438 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8007402:	1dfb      	adds	r3, r7, #7
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	3b50      	subs	r3, #80	; 0x50
 8007408:	b2db      	uxtb	r3, r3
 800740a:	0018      	movs	r0, r3
 800740c:	f7ff ff38 	bl	8007280 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8007410:	2000      	movs	r0, #0
 8007412:	f7ff ff35 	bl	8007280 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8007416:	2010      	movs	r0, #16
 8007418:	f7ff ff32 	bl	8007280 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800741c:	1dfb      	adds	r3, r7, #7
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	01da      	lsls	r2, r3, #7
 8007422:	4b0a      	ldr	r3, [pc, #40]	; (800744c <ssd1306_UpdateScreen+0x58>)
 8007424:	18d3      	adds	r3, r2, r3
 8007426:	2180      	movs	r1, #128	; 0x80
 8007428:	0018      	movs	r0, r3
 800742a:	f7ff ff43 	bl	80072b4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800742e:	1dfb      	adds	r3, r7, #7
 8007430:	781a      	ldrb	r2, [r3, #0]
 8007432:	1dfb      	adds	r3, r7, #7
 8007434:	3201      	adds	r2, #1
 8007436:	701a      	strb	r2, [r3, #0]
 8007438:	1dfb      	adds	r3, r7, #7
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	2b07      	cmp	r3, #7
 800743e:	d9e0      	bls.n	8007402 <ssd1306_UpdateScreen+0xe>
    }
}
 8007440:	46c0      	nop			; (mov r8, r8)
 8007442:	46c0      	nop			; (mov r8, r8)
 8007444:	46bd      	mov	sp, r7
 8007446:	b002      	add	sp, #8
 8007448:	bd80      	pop	{r7, pc}
 800744a:	46c0      	nop			; (mov r8, r8)
 800744c:	200001f0 	.word	0x200001f0

08007450 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8007450:	b590      	push	{r4, r7, lr}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	0004      	movs	r4, r0
 8007458:	0008      	movs	r0, r1
 800745a:	0011      	movs	r1, r2
 800745c:	1dfb      	adds	r3, r7, #7
 800745e:	1c22      	adds	r2, r4, #0
 8007460:	701a      	strb	r2, [r3, #0]
 8007462:	1dbb      	adds	r3, r7, #6
 8007464:	1c02      	adds	r2, r0, #0
 8007466:	701a      	strb	r2, [r3, #0]
 8007468:	1d7b      	adds	r3, r7, #5
 800746a:	1c0a      	adds	r2, r1, #0
 800746c:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800746e:	1dfb      	adds	r3, r7, #7
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	b25b      	sxtb	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	db47      	blt.n	8007508 <ssd1306_DrawPixel+0xb8>
 8007478:	1dbb      	adds	r3, r7, #6
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b3f      	cmp	r3, #63	; 0x3f
 800747e:	d843      	bhi.n	8007508 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8007480:	1d7b      	adds	r3, r7, #5
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d11e      	bne.n	80074c6 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8007488:	1dfb      	adds	r3, r7, #7
 800748a:	781a      	ldrb	r2, [r3, #0]
 800748c:	1dbb      	adds	r3, r7, #6
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	08db      	lsrs	r3, r3, #3
 8007492:	b2d8      	uxtb	r0, r3
 8007494:	0003      	movs	r3, r0
 8007496:	01db      	lsls	r3, r3, #7
 8007498:	18d3      	adds	r3, r2, r3
 800749a:	4a1d      	ldr	r2, [pc, #116]	; (8007510 <ssd1306_DrawPixel+0xc0>)
 800749c:	5cd3      	ldrb	r3, [r2, r3]
 800749e:	b25a      	sxtb	r2, r3
 80074a0:	1dbb      	adds	r3, r7, #6
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2107      	movs	r1, #7
 80074a6:	400b      	ands	r3, r1
 80074a8:	2101      	movs	r1, #1
 80074aa:	4099      	lsls	r1, r3
 80074ac:	000b      	movs	r3, r1
 80074ae:	b25b      	sxtb	r3, r3
 80074b0:	4313      	orrs	r3, r2
 80074b2:	b259      	sxtb	r1, r3
 80074b4:	1dfb      	adds	r3, r7, #7
 80074b6:	781a      	ldrb	r2, [r3, #0]
 80074b8:	0003      	movs	r3, r0
 80074ba:	01db      	lsls	r3, r3, #7
 80074bc:	18d3      	adds	r3, r2, r3
 80074be:	b2c9      	uxtb	r1, r1
 80074c0:	4a13      	ldr	r2, [pc, #76]	; (8007510 <ssd1306_DrawPixel+0xc0>)
 80074c2:	54d1      	strb	r1, [r2, r3]
 80074c4:	e021      	b.n	800750a <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80074c6:	1dfb      	adds	r3, r7, #7
 80074c8:	781a      	ldrb	r2, [r3, #0]
 80074ca:	1dbb      	adds	r3, r7, #6
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	08db      	lsrs	r3, r3, #3
 80074d0:	b2d8      	uxtb	r0, r3
 80074d2:	0003      	movs	r3, r0
 80074d4:	01db      	lsls	r3, r3, #7
 80074d6:	18d3      	adds	r3, r2, r3
 80074d8:	4a0d      	ldr	r2, [pc, #52]	; (8007510 <ssd1306_DrawPixel+0xc0>)
 80074da:	5cd3      	ldrb	r3, [r2, r3]
 80074dc:	b25b      	sxtb	r3, r3
 80074de:	1dba      	adds	r2, r7, #6
 80074e0:	7812      	ldrb	r2, [r2, #0]
 80074e2:	2107      	movs	r1, #7
 80074e4:	400a      	ands	r2, r1
 80074e6:	2101      	movs	r1, #1
 80074e8:	4091      	lsls	r1, r2
 80074ea:	000a      	movs	r2, r1
 80074ec:	b252      	sxtb	r2, r2
 80074ee:	43d2      	mvns	r2, r2
 80074f0:	b252      	sxtb	r2, r2
 80074f2:	4013      	ands	r3, r2
 80074f4:	b259      	sxtb	r1, r3
 80074f6:	1dfb      	adds	r3, r7, #7
 80074f8:	781a      	ldrb	r2, [r3, #0]
 80074fa:	0003      	movs	r3, r0
 80074fc:	01db      	lsls	r3, r3, #7
 80074fe:	18d3      	adds	r3, r2, r3
 8007500:	b2c9      	uxtb	r1, r1
 8007502:	4a03      	ldr	r2, [pc, #12]	; (8007510 <ssd1306_DrawPixel+0xc0>)
 8007504:	54d1      	strb	r1, [r2, r3]
 8007506:	e000      	b.n	800750a <ssd1306_DrawPixel+0xba>
        return;
 8007508:	46c0      	nop			; (mov r8, r8)
    }
}
 800750a:	46bd      	mov	sp, r7
 800750c:	b003      	add	sp, #12
 800750e:	bd90      	pop	{r4, r7, pc}
 8007510:	200001f0 	.word	0x200001f0

08007514 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8007514:	b590      	push	{r4, r7, lr}
 8007516:	b089      	sub	sp, #36	; 0x24
 8007518:	af00      	add	r7, sp, #0
 800751a:	0004      	movs	r4, r0
 800751c:	1d38      	adds	r0, r7, #4
 800751e:	6001      	str	r1, [r0, #0]
 8007520:	6042      	str	r2, [r0, #4]
 8007522:	0019      	movs	r1, r3
 8007524:	200f      	movs	r0, #15
 8007526:	183b      	adds	r3, r7, r0
 8007528:	1c22      	adds	r2, r4, #0
 800752a:	701a      	strb	r2, [r3, #0]
 800752c:	230e      	movs	r3, #14
 800752e:	18fb      	adds	r3, r7, r3
 8007530:	1c0a      	adds	r2, r1, #0
 8007532:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8007534:	183b      	adds	r3, r7, r0
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	2b1f      	cmp	r3, #31
 800753a:	d903      	bls.n	8007544 <ssd1306_WriteChar+0x30>
 800753c:	183b      	adds	r3, r7, r0
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	2b7e      	cmp	r3, #126	; 0x7e
 8007542:	d901      	bls.n	8007548 <ssd1306_WriteChar+0x34>
        return 0;
 8007544:	2300      	movs	r3, #0
 8007546:	e078      	b.n	800763a <ssd1306_WriteChar+0x126>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8007548:	4b3e      	ldr	r3, [pc, #248]	; (8007644 <ssd1306_WriteChar+0x130>)
 800754a:	881b      	ldrh	r3, [r3, #0]
 800754c:	001a      	movs	r2, r3
 800754e:	1d3b      	adds	r3, r7, #4
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	18d3      	adds	r3, r2, r3
 8007554:	2b80      	cmp	r3, #128	; 0x80
 8007556:	dc07      	bgt.n	8007568 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8007558:	4b3a      	ldr	r3, [pc, #232]	; (8007644 <ssd1306_WriteChar+0x130>)
 800755a:	885b      	ldrh	r3, [r3, #2]
 800755c:	001a      	movs	r2, r3
 800755e:	1d3b      	adds	r3, r7, #4
 8007560:	785b      	ldrb	r3, [r3, #1]
 8007562:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8007564:	2b40      	cmp	r3, #64	; 0x40
 8007566:	dd01      	ble.n	800756c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8007568:	2300      	movs	r3, #0
 800756a:	e066      	b.n	800763a <ssd1306_WriteChar+0x126>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800756c:	2300      	movs	r3, #0
 800756e:	61fb      	str	r3, [r7, #28]
 8007570:	e051      	b.n	8007616 <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8007572:	1d3b      	adds	r3, r7, #4
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	230f      	movs	r3, #15
 8007578:	18fb      	adds	r3, r7, r3
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	3b20      	subs	r3, #32
 800757e:	1d39      	adds	r1, r7, #4
 8007580:	7849      	ldrb	r1, [r1, #1]
 8007582:	434b      	muls	r3, r1
 8007584:	0019      	movs	r1, r3
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	18cb      	adds	r3, r1, r3
 800758a:	005b      	lsls	r3, r3, #1
 800758c:	18d3      	adds	r3, r2, r3
 800758e:	881b      	ldrh	r3, [r3, #0]
 8007590:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8007592:	2300      	movs	r3, #0
 8007594:	61bb      	str	r3, [r7, #24]
 8007596:	e035      	b.n	8007604 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	409a      	lsls	r2, r3
 800759e:	2380      	movs	r3, #128	; 0x80
 80075a0:	021b      	lsls	r3, r3, #8
 80075a2:	4013      	ands	r3, r2
 80075a4:	d014      	beq.n	80075d0 <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80075a6:	4b27      	ldr	r3, [pc, #156]	; (8007644 <ssd1306_WriteChar+0x130>)
 80075a8:	881b      	ldrh	r3, [r3, #0]
 80075aa:	b2da      	uxtb	r2, r3
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	18d3      	adds	r3, r2, r3
 80075b2:	b2d8      	uxtb	r0, r3
 80075b4:	4b23      	ldr	r3, [pc, #140]	; (8007644 <ssd1306_WriteChar+0x130>)
 80075b6:	885b      	ldrh	r3, [r3, #2]
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	18d3      	adds	r3, r2, r3
 80075c0:	b2d9      	uxtb	r1, r3
 80075c2:	230e      	movs	r3, #14
 80075c4:	18fb      	adds	r3, r7, r3
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	001a      	movs	r2, r3
 80075ca:	f7ff ff41 	bl	8007450 <ssd1306_DrawPixel>
 80075ce:	e016      	b.n	80075fe <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80075d0:	4b1c      	ldr	r3, [pc, #112]	; (8007644 <ssd1306_WriteChar+0x130>)
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	18d3      	adds	r3, r2, r3
 80075dc:	b2d8      	uxtb	r0, r3
 80075de:	4b19      	ldr	r3, [pc, #100]	; (8007644 <ssd1306_WriteChar+0x130>)
 80075e0:	885b      	ldrh	r3, [r3, #2]
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	18d3      	adds	r3, r2, r3
 80075ea:	b2d9      	uxtb	r1, r3
 80075ec:	230e      	movs	r3, #14
 80075ee:	18fb      	adds	r3, r7, r3
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	425a      	negs	r2, r3
 80075f4:	4153      	adcs	r3, r2
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	001a      	movs	r2, r3
 80075fa:	f7ff ff29 	bl	8007450 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	3301      	adds	r3, #1
 8007602:	61bb      	str	r3, [r7, #24]
 8007604:	1d3b      	adds	r3, r7, #4
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	001a      	movs	r2, r3
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	4293      	cmp	r3, r2
 800760e:	d3c3      	bcc.n	8007598 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	3301      	adds	r3, #1
 8007614:	61fb      	str	r3, [r7, #28]
 8007616:	1d3b      	adds	r3, r7, #4
 8007618:	785b      	ldrb	r3, [r3, #1]
 800761a:	001a      	movs	r2, r3
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	4293      	cmp	r3, r2
 8007620:	d3a7      	bcc.n	8007572 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8007622:	4b08      	ldr	r3, [pc, #32]	; (8007644 <ssd1306_WriteChar+0x130>)
 8007624:	881a      	ldrh	r2, [r3, #0]
 8007626:	1d3b      	adds	r3, r7, #4
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	b29b      	uxth	r3, r3
 800762c:	18d3      	adds	r3, r2, r3
 800762e:	b29a      	uxth	r2, r3
 8007630:	4b04      	ldr	r3, [pc, #16]	; (8007644 <ssd1306_WriteChar+0x130>)
 8007632:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8007634:	230f      	movs	r3, #15
 8007636:	18fb      	adds	r3, r7, r3
 8007638:	781b      	ldrb	r3, [r3, #0]
}
 800763a:	0018      	movs	r0, r3
 800763c:	46bd      	mov	sp, r7
 800763e:	b009      	add	sp, #36	; 0x24
 8007640:	bd90      	pop	{r4, r7, pc}
 8007642:	46c0      	nop			; (mov r8, r8)
 8007644:	200005f0 	.word	0x200005f0

08007648 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	1d38      	adds	r0, r7, #4
 8007652:	6001      	str	r1, [r0, #0]
 8007654:	6042      	str	r2, [r0, #4]
 8007656:	001a      	movs	r2, r3
 8007658:	1cfb      	adds	r3, r7, #3
 800765a:	701a      	strb	r2, [r3, #0]
    while (*str) {
 800765c:	e014      	b.n	8007688 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	7818      	ldrb	r0, [r3, #0]
 8007662:	1cfb      	adds	r3, r7, #3
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	1d3a      	adds	r2, r7, #4
 8007668:	6811      	ldr	r1, [r2, #0]
 800766a:	6852      	ldr	r2, [r2, #4]
 800766c:	f7ff ff52 	bl	8007514 <ssd1306_WriteChar>
 8007670:	0003      	movs	r3, r0
 8007672:	001a      	movs	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	429a      	cmp	r2, r3
 800767a:	d002      	beq.n	8007682 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	e008      	b.n	8007694 <ssd1306_WriteString+0x4c>
        }
        str++;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3301      	adds	r3, #1
 8007686:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1e6      	bne.n	800765e <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	781b      	ldrb	r3, [r3, #0]
}
 8007694:	0018      	movs	r0, r3
 8007696:	46bd      	mov	sp, r7
 8007698:	b004      	add	sp, #16
 800769a:	bd80      	pop	{r7, pc}

0800769c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	0002      	movs	r2, r0
 80076a4:	1dfb      	adds	r3, r7, #7
 80076a6:	701a      	strb	r2, [r3, #0]
 80076a8:	1dbb      	adds	r3, r7, #6
 80076aa:	1c0a      	adds	r2, r1, #0
 80076ac:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 80076ae:	1dfb      	adds	r3, r7, #7
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	4b05      	ldr	r3, [pc, #20]	; (80076cc <ssd1306_SetCursor+0x30>)
 80076b6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80076b8:	1dbb      	adds	r3, r7, #6
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	b29a      	uxth	r2, r3
 80076be:	4b03      	ldr	r3, [pc, #12]	; (80076cc <ssd1306_SetCursor+0x30>)
 80076c0:	805a      	strh	r2, [r3, #2]
}
 80076c2:	46c0      	nop			; (mov r8, r8)
 80076c4:	46bd      	mov	sp, r7
 80076c6:	b002      	add	sp, #8
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	46c0      	nop			; (mov r8, r8)
 80076cc:	200005f0 	.word	0x200005f0

080076d0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	0002      	movs	r2, r0
 80076d8:	1dfb      	adds	r3, r7, #7
 80076da:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 80076dc:	210f      	movs	r1, #15
 80076de:	187b      	adds	r3, r7, r1
 80076e0:	2281      	movs	r2, #129	; 0x81
 80076e2:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80076e4:	187b      	adds	r3, r7, r1
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	0018      	movs	r0, r3
 80076ea:	f7ff fdc9 	bl	8007280 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80076ee:	1dfb      	adds	r3, r7, #7
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	0018      	movs	r0, r3
 80076f4:	f7ff fdc4 	bl	8007280 <ssd1306_WriteCommand>
}
 80076f8:	46c0      	nop			; (mov r8, r8)
 80076fa:	46bd      	mov	sp, r7
 80076fc:	b004      	add	sp, #16
 80076fe:	bd80      	pop	{r7, pc}

08007700 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	0002      	movs	r2, r0
 8007708:	1dfb      	adds	r3, r7, #7
 800770a:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 800770c:	1dfb      	adds	r3, r7, #7
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d007      	beq.n	8007724 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8007714:	230f      	movs	r3, #15
 8007716:	18fb      	adds	r3, r7, r3
 8007718:	22af      	movs	r2, #175	; 0xaf
 800771a:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 800771c:	4b0a      	ldr	r3, [pc, #40]	; (8007748 <ssd1306_SetDisplayOn+0x48>)
 800771e:	2201      	movs	r2, #1
 8007720:	715a      	strb	r2, [r3, #5]
 8007722:	e006      	b.n	8007732 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8007724:	230f      	movs	r3, #15
 8007726:	18fb      	adds	r3, r7, r3
 8007728:	22ae      	movs	r2, #174	; 0xae
 800772a:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 800772c:	4b06      	ldr	r3, [pc, #24]	; (8007748 <ssd1306_SetDisplayOn+0x48>)
 800772e:	2200      	movs	r2, #0
 8007730:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8007732:	230f      	movs	r3, #15
 8007734:	18fb      	adds	r3, r7, r3
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	0018      	movs	r0, r3
 800773a:	f7ff fda1 	bl	8007280 <ssd1306_WriteCommand>
}
 800773e:	46c0      	nop			; (mov r8, r8)
 8007740:	46bd      	mov	sp, r7
 8007742:	b004      	add	sp, #16
 8007744:	bd80      	pop	{r7, pc}
 8007746:	46c0      	nop			; (mov r8, r8)
 8007748:	200005f0 	.word	0x200005f0

0800774c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007752:	4b11      	ldr	r3, [pc, #68]	; (8007798 <HAL_MspInit+0x4c>)
 8007754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007756:	4b10      	ldr	r3, [pc, #64]	; (8007798 <HAL_MspInit+0x4c>)
 8007758:	2101      	movs	r1, #1
 800775a:	430a      	orrs	r2, r1
 800775c:	641a      	str	r2, [r3, #64]	; 0x40
 800775e:	4b0e      	ldr	r3, [pc, #56]	; (8007798 <HAL_MspInit+0x4c>)
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	2201      	movs	r2, #1
 8007764:	4013      	ands	r3, r2
 8007766:	607b      	str	r3, [r7, #4]
 8007768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800776a:	4b0b      	ldr	r3, [pc, #44]	; (8007798 <HAL_MspInit+0x4c>)
 800776c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800776e:	4b0a      	ldr	r3, [pc, #40]	; (8007798 <HAL_MspInit+0x4c>)
 8007770:	2180      	movs	r1, #128	; 0x80
 8007772:	0549      	lsls	r1, r1, #21
 8007774:	430a      	orrs	r2, r1
 8007776:	63da      	str	r2, [r3, #60]	; 0x3c
 8007778:	4b07      	ldr	r3, [pc, #28]	; (8007798 <HAL_MspInit+0x4c>)
 800777a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800777c:	2380      	movs	r3, #128	; 0x80
 800777e:	055b      	lsls	r3, r3, #21
 8007780:	4013      	ands	r3, r2
 8007782:	603b      	str	r3, [r7, #0]
 8007784:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8007786:	2380      	movs	r3, #128	; 0x80
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	0018      	movs	r0, r3
 800778c:	f7fa f90e 	bl	80019ac <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007790:	46c0      	nop			; (mov r8, r8)
 8007792:	46bd      	mov	sp, r7
 8007794:	b002      	add	sp, #8
 8007796:	bd80      	pop	{r7, pc}
 8007798:	40021000 	.word	0x40021000

0800779c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80077a0:	e7fe      	b.n	80077a0 <NMI_Handler+0x4>

080077a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80077a6:	e7fe      	b.n	80077a6 <HardFault_Handler+0x4>

080077a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80077ac:	46c0      	nop			; (mov r8, r8)
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80077b6:	46c0      	nop			; (mov r8, r8)
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80077c0:	f7fa f8b4 	bl	800192c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80077c4:	46c0      	nop			; (mov r8, r8)
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
	...

080077cc <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80077d0:	4b03      	ldr	r3, [pc, #12]	; (80077e0 <ADC1_COMP_IRQHandler+0x14>)
 80077d2:	0018      	movs	r0, r3
 80077d4:	f7fa fc90 	bl	80020f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80077d8:	46c0      	nop			; (mov r8, r8)
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	46c0      	nop			; (mov r8, r8)
 80077e0:	20000088 	.word	0x20000088

080077e4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80077e8:	4b03      	ldr	r3, [pc, #12]	; (80077f8 <TIM1_CC_IRQHandler+0x14>)
 80077ea:	0018      	movs	r0, r3
 80077ec:	f7fd ff78 	bl	80056e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80077f0:	46c0      	nop			; (mov r8, r8)
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	46c0      	nop			; (mov r8, r8)
 80077f8:	200005fc 	.word	0x200005fc

080077fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007804:	4a14      	ldr	r2, [pc, #80]	; (8007858 <_sbrk+0x5c>)
 8007806:	4b15      	ldr	r3, [pc, #84]	; (800785c <_sbrk+0x60>)
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007810:	4b13      	ldr	r3, [pc, #76]	; (8007860 <_sbrk+0x64>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d102      	bne.n	800781e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007818:	4b11      	ldr	r3, [pc, #68]	; (8007860 <_sbrk+0x64>)
 800781a:	4a12      	ldr	r2, [pc, #72]	; (8007864 <_sbrk+0x68>)
 800781c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800781e:	4b10      	ldr	r3, [pc, #64]	; (8007860 <_sbrk+0x64>)
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	18d3      	adds	r3, r2, r3
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	429a      	cmp	r2, r3
 800782a:	d207      	bcs.n	800783c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800782c:	f000 f9dc 	bl	8007be8 <__errno>
 8007830:	0003      	movs	r3, r0
 8007832:	220c      	movs	r2, #12
 8007834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007836:	2301      	movs	r3, #1
 8007838:	425b      	negs	r3, r3
 800783a:	e009      	b.n	8007850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800783c:	4b08      	ldr	r3, [pc, #32]	; (8007860 <_sbrk+0x64>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007842:	4b07      	ldr	r3, [pc, #28]	; (8007860 <_sbrk+0x64>)
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	18d2      	adds	r2, r2, r3
 800784a:	4b05      	ldr	r3, [pc, #20]	; (8007860 <_sbrk+0x64>)
 800784c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800784e:	68fb      	ldr	r3, [r7, #12]
}
 8007850:	0018      	movs	r0, r3
 8007852:	46bd      	mov	sp, r7
 8007854:	b006      	add	sp, #24
 8007856:	bd80      	pop	{r7, pc}
 8007858:	20009000 	.word	0x20009000
 800785c:	00000400 	.word	0x00000400
 8007860:	200005f8 	.word	0x200005f8
 8007864:	20000790 	.word	0x20000790

08007868 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800786c:	46c0      	nop			; (mov r8, r8)
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
	...

08007874 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b09c      	sub	sp, #112	; 0x70
 8007878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800787a:	2360      	movs	r3, #96	; 0x60
 800787c:	18fb      	adds	r3, r7, r3
 800787e:	0018      	movs	r0, r3
 8007880:	2310      	movs	r3, #16
 8007882:	001a      	movs	r2, r3
 8007884:	2100      	movs	r1, #0
 8007886:	f000 f9a6 	bl	8007bd6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800788a:	2354      	movs	r3, #84	; 0x54
 800788c:	18fb      	adds	r3, r7, r3
 800788e:	0018      	movs	r0, r3
 8007890:	230c      	movs	r3, #12
 8007892:	001a      	movs	r2, r3
 8007894:	2100      	movs	r1, #0
 8007896:	f000 f99e 	bl	8007bd6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800789a:	2338      	movs	r3, #56	; 0x38
 800789c:	18fb      	adds	r3, r7, r3
 800789e:	0018      	movs	r0, r3
 80078a0:	231c      	movs	r3, #28
 80078a2:	001a      	movs	r2, r3
 80078a4:	2100      	movs	r1, #0
 80078a6:	f000 f996 	bl	8007bd6 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80078aa:	1d3b      	adds	r3, r7, #4
 80078ac:	0018      	movs	r0, r3
 80078ae:	2334      	movs	r3, #52	; 0x34
 80078b0:	001a      	movs	r2, r3
 80078b2:	2100      	movs	r1, #0
 80078b4:	f000 f98f 	bl	8007bd6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80078b8:	4b57      	ldr	r3, [pc, #348]	; (8007a18 <MX_TIM1_Init+0x1a4>)
 80078ba:	4a58      	ldr	r2, [pc, #352]	; (8007a1c <MX_TIM1_Init+0x1a8>)
 80078bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80078be:	4b56      	ldr	r3, [pc, #344]	; (8007a18 <MX_TIM1_Init+0x1a4>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078c4:	4b54      	ldr	r3, [pc, #336]	; (8007a18 <MX_TIM1_Init+0x1a4>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80078ca:	4b53      	ldr	r3, [pc, #332]	; (8007a18 <MX_TIM1_Init+0x1a4>)
 80078cc:	22fa      	movs	r2, #250	; 0xfa
 80078ce:	0092      	lsls	r2, r2, #2
 80078d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078d2:	4b51      	ldr	r3, [pc, #324]	; (8007a18 <MX_TIM1_Init+0x1a4>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80078d8:	4b4f      	ldr	r3, [pc, #316]	; (8007a18 <MX_TIM1_Init+0x1a4>)
 80078da:	2200      	movs	r2, #0
 80078dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80078de:	4b4e      	ldr	r3, [pc, #312]	; (8007a18 <MX_TIM1_Init+0x1a4>)
 80078e0:	2280      	movs	r2, #128	; 0x80
 80078e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80078e4:	4b4c      	ldr	r3, [pc, #304]	; (8007a18 <MX_TIM1_Init+0x1a4>)
 80078e6:	0018      	movs	r0, r3
 80078e8:	f7fd fd12 	bl	8005310 <HAL_TIM_Base_Init>
 80078ec:	1e03      	subs	r3, r0, #0
 80078ee:	d001      	beq.n	80078f4 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80078f0:	f7ff fcbc 	bl	800726c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80078f4:	2160      	movs	r1, #96	; 0x60
 80078f6:	187b      	adds	r3, r7, r1
 80078f8:	2280      	movs	r2, #128	; 0x80
 80078fa:	0152      	lsls	r2, r2, #5
 80078fc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80078fe:	187a      	adds	r2, r7, r1
 8007900:	4b45      	ldr	r3, [pc, #276]	; (8007a18 <MX_TIM1_Init+0x1a4>)
 8007902:	0011      	movs	r1, r2
 8007904:	0018      	movs	r0, r3
 8007906:	f7fe f8f3 	bl	8005af0 <HAL_TIM_ConfigClockSource>
 800790a:	1e03      	subs	r3, r0, #0
 800790c:	d001      	beq.n	8007912 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800790e:	f7ff fcad 	bl	800726c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007912:	4b41      	ldr	r3, [pc, #260]	; (8007a18 <MX_TIM1_Init+0x1a4>)
 8007914:	0018      	movs	r0, r3
 8007916:	f7fd fd53 	bl	80053c0 <HAL_TIM_PWM_Init>
 800791a:	1e03      	subs	r3, r0, #0
 800791c:	d001      	beq.n	8007922 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 800791e:	f7ff fca5 	bl	800726c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007922:	2154      	movs	r1, #84	; 0x54
 8007924:	187b      	adds	r3, r7, r1
 8007926:	2200      	movs	r2, #0
 8007928:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800792a:	187b      	adds	r3, r7, r1
 800792c:	2200      	movs	r2, #0
 800792e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007930:	187b      	adds	r3, r7, r1
 8007932:	2200      	movs	r2, #0
 8007934:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007936:	187a      	adds	r2, r7, r1
 8007938:	4b37      	ldr	r3, [pc, #220]	; (8007a18 <MX_TIM1_Init+0x1a4>)
 800793a:	0011      	movs	r1, r2
 800793c:	0018      	movs	r0, r3
 800793e:	f7fe fddf 	bl	8006500 <HAL_TIMEx_MasterConfigSynchronization>
 8007942:	1e03      	subs	r3, r0, #0
 8007944:	d001      	beq.n	800794a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8007946:	f7ff fc91 	bl	800726c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800794a:	2138      	movs	r1, #56	; 0x38
 800794c:	187b      	adds	r3, r7, r1
 800794e:	2260      	movs	r2, #96	; 0x60
 8007950:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8007952:	187b      	adds	r3, r7, r1
 8007954:	2200      	movs	r2, #0
 8007956:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007958:	187b      	adds	r3, r7, r1
 800795a:	2200      	movs	r2, #0
 800795c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800795e:	187b      	adds	r3, r7, r1
 8007960:	2200      	movs	r2, #0
 8007962:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007964:	187b      	adds	r3, r7, r1
 8007966:	2200      	movs	r2, #0
 8007968:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800796a:	187b      	adds	r3, r7, r1
 800796c:	2200      	movs	r2, #0
 800796e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007970:	187b      	adds	r3, r7, r1
 8007972:	2200      	movs	r2, #0
 8007974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007976:	1879      	adds	r1, r7, r1
 8007978:	4b27      	ldr	r3, [pc, #156]	; (8007a18 <MX_TIM1_Init+0x1a4>)
 800797a:	2200      	movs	r2, #0
 800797c:	0018      	movs	r0, r3
 800797e:	f7fd ffb7 	bl	80058f0 <HAL_TIM_PWM_ConfigChannel>
 8007982:	1e03      	subs	r3, r0, #0
 8007984:	d001      	beq.n	800798a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8007986:	f7ff fc71 	bl	800726c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800798a:	2338      	movs	r3, #56	; 0x38
 800798c:	18f9      	adds	r1, r7, r3
 800798e:	4b22      	ldr	r3, [pc, #136]	; (8007a18 <MX_TIM1_Init+0x1a4>)
 8007990:	2204      	movs	r2, #4
 8007992:	0018      	movs	r0, r3
 8007994:	f7fd ffac 	bl	80058f0 <HAL_TIM_PWM_ConfigChannel>
 8007998:	1e03      	subs	r3, r0, #0
 800799a:	d001      	beq.n	80079a0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800799c:	f7ff fc66 	bl	800726c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80079a0:	1d3b      	adds	r3, r7, #4
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80079a6:	1d3b      	adds	r3, r7, #4
 80079a8:	2200      	movs	r2, #0
 80079aa:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80079ac:	1d3b      	adds	r3, r7, #4
 80079ae:	2200      	movs	r2, #0
 80079b0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80079b2:	1d3b      	adds	r3, r7, #4
 80079b4:	2200      	movs	r2, #0
 80079b6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80079b8:	1d3b      	adds	r3, r7, #4
 80079ba:	2200      	movs	r2, #0
 80079bc:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80079be:	1d3b      	adds	r3, r7, #4
 80079c0:	2280      	movs	r2, #128	; 0x80
 80079c2:	0192      	lsls	r2, r2, #6
 80079c4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80079c6:	1d3b      	adds	r3, r7, #4
 80079c8:	2200      	movs	r2, #0
 80079ca:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80079cc:	1d3b      	adds	r3, r7, #4
 80079ce:	2200      	movs	r2, #0
 80079d0:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80079d2:	1d3b      	adds	r3, r7, #4
 80079d4:	2200      	movs	r2, #0
 80079d6:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80079d8:	1d3b      	adds	r3, r7, #4
 80079da:	2280      	movs	r2, #128	; 0x80
 80079dc:	0492      	lsls	r2, r2, #18
 80079de:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80079e0:	1d3b      	adds	r3, r7, #4
 80079e2:	2200      	movs	r2, #0
 80079e4:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80079e6:	1d3b      	adds	r3, r7, #4
 80079e8:	2200      	movs	r2, #0
 80079ea:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80079ec:	1d3b      	adds	r3, r7, #4
 80079ee:	2200      	movs	r2, #0
 80079f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80079f2:	1d3a      	adds	r2, r7, #4
 80079f4:	4b08      	ldr	r3, [pc, #32]	; (8007a18 <MX_TIM1_Init+0x1a4>)
 80079f6:	0011      	movs	r1, r2
 80079f8:	0018      	movs	r0, r3
 80079fa:	f7fe fdef 	bl	80065dc <HAL_TIMEx_ConfigBreakDeadTime>
 80079fe:	1e03      	subs	r3, r0, #0
 8007a00:	d001      	beq.n	8007a06 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8007a02:	f7ff fc33 	bl	800726c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8007a06:	4b04      	ldr	r3, [pc, #16]	; (8007a18 <MX_TIM1_Init+0x1a4>)
 8007a08:	0018      	movs	r0, r3
 8007a0a:	f000 f849 	bl	8007aa0 <HAL_TIM_MspPostInit>

}
 8007a0e:	46c0      	nop			; (mov r8, r8)
 8007a10:	46bd      	mov	sp, r7
 8007a12:	b01c      	add	sp, #112	; 0x70
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	46c0      	nop			; (mov r8, r8)
 8007a18:	200005fc 	.word	0x200005fc
 8007a1c:	40012c00 	.word	0x40012c00

08007a20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007a20:	b590      	push	{r4, r7, lr}
 8007a22:	b091      	sub	sp, #68	; 0x44
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007a28:	240c      	movs	r4, #12
 8007a2a:	193b      	adds	r3, r7, r4
 8007a2c:	0018      	movs	r0, r3
 8007a2e:	2334      	movs	r3, #52	; 0x34
 8007a30:	001a      	movs	r2, r3
 8007a32:	2100      	movs	r1, #0
 8007a34:	f000 f8cf 	bl	8007bd6 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a16      	ldr	r2, [pc, #88]	; (8007a98 <HAL_TIM_Base_MspInit+0x78>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d125      	bne.n	8007a8e <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8007a42:	193b      	adds	r3, r7, r4
 8007a44:	2280      	movs	r2, #128	; 0x80
 8007a46:	0392      	lsls	r2, r2, #14
 8007a48:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PLL;
 8007a4a:	193b      	adds	r3, r7, r4
 8007a4c:	2280      	movs	r2, #128	; 0x80
 8007a4e:	03d2      	lsls	r2, r2, #15
 8007a50:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007a52:	193b      	adds	r3, r7, r4
 8007a54:	0018      	movs	r0, r3
 8007a56:	f7fd faa3 	bl	8004fa0 <HAL_RCCEx_PeriphCLKConfig>
 8007a5a:	1e03      	subs	r3, r0, #0
 8007a5c:	d001      	beq.n	8007a62 <HAL_TIM_Base_MspInit+0x42>
    {
      Error_Handler();
 8007a5e:	f7ff fc05 	bl	800726c <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007a62:	4b0e      	ldr	r3, [pc, #56]	; (8007a9c <HAL_TIM_Base_MspInit+0x7c>)
 8007a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a66:	4b0d      	ldr	r3, [pc, #52]	; (8007a9c <HAL_TIM_Base_MspInit+0x7c>)
 8007a68:	2180      	movs	r1, #128	; 0x80
 8007a6a:	0109      	lsls	r1, r1, #4
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	641a      	str	r2, [r3, #64]	; 0x40
 8007a70:	4b0a      	ldr	r3, [pc, #40]	; (8007a9c <HAL_TIM_Base_MspInit+0x7c>)
 8007a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a74:	2380      	movs	r3, #128	; 0x80
 8007a76:	011b      	lsls	r3, r3, #4
 8007a78:	4013      	ands	r3, r2
 8007a7a:	60bb      	str	r3, [r7, #8]
 8007a7c:	68bb      	ldr	r3, [r7, #8]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2100      	movs	r1, #0
 8007a82:	200e      	movs	r0, #14
 8007a84:	f7fb fbea 	bl	800325c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8007a88:	200e      	movs	r0, #14
 8007a8a:	f7fb fbfc 	bl	8003286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8007a8e:	46c0      	nop			; (mov r8, r8)
 8007a90:	46bd      	mov	sp, r7
 8007a92:	b011      	add	sp, #68	; 0x44
 8007a94:	bd90      	pop	{r4, r7, pc}
 8007a96:	46c0      	nop			; (mov r8, r8)
 8007a98:	40012c00 	.word	0x40012c00
 8007a9c:	40021000 	.word	0x40021000

08007aa0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007aa0:	b590      	push	{r4, r7, lr}
 8007aa2:	b089      	sub	sp, #36	; 0x24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007aa8:	240c      	movs	r4, #12
 8007aaa:	193b      	adds	r3, r7, r4
 8007aac:	0018      	movs	r0, r3
 8007aae:	2314      	movs	r3, #20
 8007ab0:	001a      	movs	r2, r3
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	f000 f88f 	bl	8007bd6 <memset>
  if(timHandle->Instance==TIM1)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a15      	ldr	r2, [pc, #84]	; (8007b14 <HAL_TIM_MspPostInit+0x74>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d123      	bne.n	8007b0a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ac2:	4b15      	ldr	r3, [pc, #84]	; (8007b18 <HAL_TIM_MspPostInit+0x78>)
 8007ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ac6:	4b14      	ldr	r3, [pc, #80]	; (8007b18 <HAL_TIM_MspPostInit+0x78>)
 8007ac8:	2101      	movs	r1, #1
 8007aca:	430a      	orrs	r2, r1
 8007acc:	635a      	str	r2, [r3, #52]	; 0x34
 8007ace:	4b12      	ldr	r3, [pc, #72]	; (8007b18 <HAL_TIM_MspPostInit+0x78>)
 8007ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	60bb      	str	r3, [r7, #8]
 8007ad8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LOW_SW_CH1_Pin|HIGH_SW_CH2_Pin;
 8007ada:	193b      	adds	r3, r7, r4
 8007adc:	22c0      	movs	r2, #192	; 0xc0
 8007ade:	0092      	lsls	r2, r2, #2
 8007ae0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ae2:	0021      	movs	r1, r4
 8007ae4:	187b      	adds	r3, r7, r1
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aea:	187b      	adds	r3, r7, r1
 8007aec:	2200      	movs	r2, #0
 8007aee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007af0:	187b      	adds	r3, r7, r1
 8007af2:	2200      	movs	r2, #0
 8007af4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8007af6:	187b      	adds	r3, r7, r1
 8007af8:	2202      	movs	r2, #2
 8007afa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007afc:	187a      	adds	r2, r7, r1
 8007afe:	23a0      	movs	r3, #160	; 0xa0
 8007b00:	05db      	lsls	r3, r3, #23
 8007b02:	0011      	movs	r1, r2
 8007b04:	0018      	movs	r0, r3
 8007b06:	f7fb fed7 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8007b0a:	46c0      	nop			; (mov r8, r8)
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	b009      	add	sp, #36	; 0x24
 8007b10:	bd90      	pop	{r4, r7, pc}
 8007b12:	46c0      	nop			; (mov r8, r8)
 8007b14:	40012c00 	.word	0x40012c00
 8007b18:	40021000 	.word	0x40021000

08007b1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007b1c:	480d      	ldr	r0, [pc, #52]	; (8007b54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007b1e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007b20:	f7ff fea2 	bl	8007868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007b24:	480c      	ldr	r0, [pc, #48]	; (8007b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8007b26:	490d      	ldr	r1, [pc, #52]	; (8007b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8007b28:	4a0d      	ldr	r2, [pc, #52]	; (8007b60 <LoopForever+0xe>)
  movs r3, #0
 8007b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007b2c:	e002      	b.n	8007b34 <LoopCopyDataInit>

08007b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007b32:	3304      	adds	r3, #4

08007b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007b38:	d3f9      	bcc.n	8007b2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007b3a:	4a0a      	ldr	r2, [pc, #40]	; (8007b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007b3c:	4c0a      	ldr	r4, [pc, #40]	; (8007b68 <LoopForever+0x16>)
  movs r3, #0
 8007b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007b40:	e001      	b.n	8007b46 <LoopFillZerobss>

08007b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007b44:	3204      	adds	r2, #4

08007b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007b48:	d3fb      	bcc.n	8007b42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007b4a:	f000 f853 	bl	8007bf4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8007b4e:	f7ff f94b 	bl	8006de8 <main>

08007b52 <LoopForever>:

LoopForever:
  b LoopForever
 8007b52:	e7fe      	b.n	8007b52 <LoopForever>
  ldr   r0, =_estack
 8007b54:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8007b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007b5c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8007b60:	08009358 	.word	0x08009358
  ldr r2, =_sbss
 8007b64:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8007b68:	20000790 	.word	0x20000790

08007b6c <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007b6c:	e7fe      	b.n	8007b6c <CEC_IRQHandler>
	...

08007b70 <siprintf>:
 8007b70:	b40e      	push	{r1, r2, r3}
 8007b72:	b500      	push	{lr}
 8007b74:	490b      	ldr	r1, [pc, #44]	; (8007ba4 <siprintf+0x34>)
 8007b76:	b09c      	sub	sp, #112	; 0x70
 8007b78:	ab1d      	add	r3, sp, #116	; 0x74
 8007b7a:	9002      	str	r0, [sp, #8]
 8007b7c:	9006      	str	r0, [sp, #24]
 8007b7e:	9107      	str	r1, [sp, #28]
 8007b80:	9104      	str	r1, [sp, #16]
 8007b82:	4809      	ldr	r0, [pc, #36]	; (8007ba8 <siprintf+0x38>)
 8007b84:	4909      	ldr	r1, [pc, #36]	; (8007bac <siprintf+0x3c>)
 8007b86:	cb04      	ldmia	r3!, {r2}
 8007b88:	9105      	str	r1, [sp, #20]
 8007b8a:	6800      	ldr	r0, [r0, #0]
 8007b8c:	a902      	add	r1, sp, #8
 8007b8e:	9301      	str	r3, [sp, #4]
 8007b90:	f000 f9c0 	bl	8007f14 <_svfiprintf_r>
 8007b94:	2200      	movs	r2, #0
 8007b96:	9b02      	ldr	r3, [sp, #8]
 8007b98:	701a      	strb	r2, [r3, #0]
 8007b9a:	b01c      	add	sp, #112	; 0x70
 8007b9c:	bc08      	pop	{r3}
 8007b9e:	b003      	add	sp, #12
 8007ba0:	4718      	bx	r3
 8007ba2:	46c0      	nop			; (mov r8, r8)
 8007ba4:	7fffffff 	.word	0x7fffffff
 8007ba8:	20000064 	.word	0x20000064
 8007bac:	ffff0208 	.word	0xffff0208

08007bb0 <memmove>:
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	4288      	cmp	r0, r1
 8007bb4:	d902      	bls.n	8007bbc <memmove+0xc>
 8007bb6:	188b      	adds	r3, r1, r2
 8007bb8:	4298      	cmp	r0, r3
 8007bba:	d303      	bcc.n	8007bc4 <memmove+0x14>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	e007      	b.n	8007bd0 <memmove+0x20>
 8007bc0:	5c8b      	ldrb	r3, [r1, r2]
 8007bc2:	5483      	strb	r3, [r0, r2]
 8007bc4:	3a01      	subs	r2, #1
 8007bc6:	d2fb      	bcs.n	8007bc0 <memmove+0x10>
 8007bc8:	bd10      	pop	{r4, pc}
 8007bca:	5ccc      	ldrb	r4, [r1, r3]
 8007bcc:	54c4      	strb	r4, [r0, r3]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d1fa      	bne.n	8007bca <memmove+0x1a>
 8007bd4:	e7f8      	b.n	8007bc8 <memmove+0x18>

08007bd6 <memset>:
 8007bd6:	0003      	movs	r3, r0
 8007bd8:	1882      	adds	r2, r0, r2
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d100      	bne.n	8007be0 <memset+0xa>
 8007bde:	4770      	bx	lr
 8007be0:	7019      	strb	r1, [r3, #0]
 8007be2:	3301      	adds	r3, #1
 8007be4:	e7f9      	b.n	8007bda <memset+0x4>
	...

08007be8 <__errno>:
 8007be8:	4b01      	ldr	r3, [pc, #4]	; (8007bf0 <__errno+0x8>)
 8007bea:	6818      	ldr	r0, [r3, #0]
 8007bec:	4770      	bx	lr
 8007bee:	46c0      	nop			; (mov r8, r8)
 8007bf0:	20000064 	.word	0x20000064

08007bf4 <__libc_init_array>:
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	2600      	movs	r6, #0
 8007bf8:	4c0c      	ldr	r4, [pc, #48]	; (8007c2c <__libc_init_array+0x38>)
 8007bfa:	4d0d      	ldr	r5, [pc, #52]	; (8007c30 <__libc_init_array+0x3c>)
 8007bfc:	1b64      	subs	r4, r4, r5
 8007bfe:	10a4      	asrs	r4, r4, #2
 8007c00:	42a6      	cmp	r6, r4
 8007c02:	d109      	bne.n	8007c18 <__libc_init_array+0x24>
 8007c04:	2600      	movs	r6, #0
 8007c06:	f000 fc59 	bl	80084bc <_init>
 8007c0a:	4c0a      	ldr	r4, [pc, #40]	; (8007c34 <__libc_init_array+0x40>)
 8007c0c:	4d0a      	ldr	r5, [pc, #40]	; (8007c38 <__libc_init_array+0x44>)
 8007c0e:	1b64      	subs	r4, r4, r5
 8007c10:	10a4      	asrs	r4, r4, #2
 8007c12:	42a6      	cmp	r6, r4
 8007c14:	d105      	bne.n	8007c22 <__libc_init_array+0x2e>
 8007c16:	bd70      	pop	{r4, r5, r6, pc}
 8007c18:	00b3      	lsls	r3, r6, #2
 8007c1a:	58eb      	ldr	r3, [r5, r3]
 8007c1c:	4798      	blx	r3
 8007c1e:	3601      	adds	r6, #1
 8007c20:	e7ee      	b.n	8007c00 <__libc_init_array+0xc>
 8007c22:	00b3      	lsls	r3, r6, #2
 8007c24:	58eb      	ldr	r3, [r5, r3]
 8007c26:	4798      	blx	r3
 8007c28:	3601      	adds	r6, #1
 8007c2a:	e7f2      	b.n	8007c12 <__libc_init_array+0x1e>
 8007c2c:	08009350 	.word	0x08009350
 8007c30:	08009350 	.word	0x08009350
 8007c34:	08009354 	.word	0x08009354
 8007c38:	08009350 	.word	0x08009350

08007c3c <__retarget_lock_acquire_recursive>:
 8007c3c:	4770      	bx	lr

08007c3e <__retarget_lock_release_recursive>:
 8007c3e:	4770      	bx	lr

08007c40 <memcpy>:
 8007c40:	2300      	movs	r3, #0
 8007c42:	b510      	push	{r4, lr}
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d100      	bne.n	8007c4a <memcpy+0xa>
 8007c48:	bd10      	pop	{r4, pc}
 8007c4a:	5ccc      	ldrb	r4, [r1, r3]
 8007c4c:	54c4      	strb	r4, [r0, r3]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	e7f8      	b.n	8007c44 <memcpy+0x4>
	...

08007c54 <_free_r>:
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	0005      	movs	r5, r0
 8007c58:	2900      	cmp	r1, #0
 8007c5a:	d010      	beq.n	8007c7e <_free_r+0x2a>
 8007c5c:	1f0c      	subs	r4, r1, #4
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	da00      	bge.n	8007c66 <_free_r+0x12>
 8007c64:	18e4      	adds	r4, r4, r3
 8007c66:	0028      	movs	r0, r5
 8007c68:	f000 f8e2 	bl	8007e30 <__malloc_lock>
 8007c6c:	4a1d      	ldr	r2, [pc, #116]	; (8007ce4 <_free_r+0x90>)
 8007c6e:	6813      	ldr	r3, [r2, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d105      	bne.n	8007c80 <_free_r+0x2c>
 8007c74:	6063      	str	r3, [r4, #4]
 8007c76:	6014      	str	r4, [r2, #0]
 8007c78:	0028      	movs	r0, r5
 8007c7a:	f000 f8e1 	bl	8007e40 <__malloc_unlock>
 8007c7e:	bd70      	pop	{r4, r5, r6, pc}
 8007c80:	42a3      	cmp	r3, r4
 8007c82:	d908      	bls.n	8007c96 <_free_r+0x42>
 8007c84:	6820      	ldr	r0, [r4, #0]
 8007c86:	1821      	adds	r1, r4, r0
 8007c88:	428b      	cmp	r3, r1
 8007c8a:	d1f3      	bne.n	8007c74 <_free_r+0x20>
 8007c8c:	6819      	ldr	r1, [r3, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	1809      	adds	r1, r1, r0
 8007c92:	6021      	str	r1, [r4, #0]
 8007c94:	e7ee      	b.n	8007c74 <_free_r+0x20>
 8007c96:	001a      	movs	r2, r3
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <_free_r+0x4e>
 8007c9e:	42a3      	cmp	r3, r4
 8007ca0:	d9f9      	bls.n	8007c96 <_free_r+0x42>
 8007ca2:	6811      	ldr	r1, [r2, #0]
 8007ca4:	1850      	adds	r0, r2, r1
 8007ca6:	42a0      	cmp	r0, r4
 8007ca8:	d10b      	bne.n	8007cc2 <_free_r+0x6e>
 8007caa:	6820      	ldr	r0, [r4, #0]
 8007cac:	1809      	adds	r1, r1, r0
 8007cae:	1850      	adds	r0, r2, r1
 8007cb0:	6011      	str	r1, [r2, #0]
 8007cb2:	4283      	cmp	r3, r0
 8007cb4:	d1e0      	bne.n	8007c78 <_free_r+0x24>
 8007cb6:	6818      	ldr	r0, [r3, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	1841      	adds	r1, r0, r1
 8007cbc:	6011      	str	r1, [r2, #0]
 8007cbe:	6053      	str	r3, [r2, #4]
 8007cc0:	e7da      	b.n	8007c78 <_free_r+0x24>
 8007cc2:	42a0      	cmp	r0, r4
 8007cc4:	d902      	bls.n	8007ccc <_free_r+0x78>
 8007cc6:	230c      	movs	r3, #12
 8007cc8:	602b      	str	r3, [r5, #0]
 8007cca:	e7d5      	b.n	8007c78 <_free_r+0x24>
 8007ccc:	6820      	ldr	r0, [r4, #0]
 8007cce:	1821      	adds	r1, r4, r0
 8007cd0:	428b      	cmp	r3, r1
 8007cd2:	d103      	bne.n	8007cdc <_free_r+0x88>
 8007cd4:	6819      	ldr	r1, [r3, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	1809      	adds	r1, r1, r0
 8007cda:	6021      	str	r1, [r4, #0]
 8007cdc:	6063      	str	r3, [r4, #4]
 8007cde:	6054      	str	r4, [r2, #4]
 8007ce0:	e7ca      	b.n	8007c78 <_free_r+0x24>
 8007ce2:	46c0      	nop			; (mov r8, r8)
 8007ce4:	20000788 	.word	0x20000788

08007ce8 <sbrk_aligned>:
 8007ce8:	b570      	push	{r4, r5, r6, lr}
 8007cea:	4e0f      	ldr	r6, [pc, #60]	; (8007d28 <sbrk_aligned+0x40>)
 8007cec:	000d      	movs	r5, r1
 8007cee:	6831      	ldr	r1, [r6, #0]
 8007cf0:	0004      	movs	r4, r0
 8007cf2:	2900      	cmp	r1, #0
 8007cf4:	d102      	bne.n	8007cfc <sbrk_aligned+0x14>
 8007cf6:	f000 fb8d 	bl	8008414 <_sbrk_r>
 8007cfa:	6030      	str	r0, [r6, #0]
 8007cfc:	0029      	movs	r1, r5
 8007cfe:	0020      	movs	r0, r4
 8007d00:	f000 fb88 	bl	8008414 <_sbrk_r>
 8007d04:	1c43      	adds	r3, r0, #1
 8007d06:	d00a      	beq.n	8007d1e <sbrk_aligned+0x36>
 8007d08:	2303      	movs	r3, #3
 8007d0a:	1cc5      	adds	r5, r0, #3
 8007d0c:	439d      	bics	r5, r3
 8007d0e:	42a8      	cmp	r0, r5
 8007d10:	d007      	beq.n	8007d22 <sbrk_aligned+0x3a>
 8007d12:	1a29      	subs	r1, r5, r0
 8007d14:	0020      	movs	r0, r4
 8007d16:	f000 fb7d 	bl	8008414 <_sbrk_r>
 8007d1a:	3001      	adds	r0, #1
 8007d1c:	d101      	bne.n	8007d22 <sbrk_aligned+0x3a>
 8007d1e:	2501      	movs	r5, #1
 8007d20:	426d      	negs	r5, r5
 8007d22:	0028      	movs	r0, r5
 8007d24:	bd70      	pop	{r4, r5, r6, pc}
 8007d26:	46c0      	nop			; (mov r8, r8)
 8007d28:	2000078c 	.word	0x2000078c

08007d2c <_malloc_r>:
 8007d2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d2e:	2203      	movs	r2, #3
 8007d30:	1ccb      	adds	r3, r1, #3
 8007d32:	4393      	bics	r3, r2
 8007d34:	3308      	adds	r3, #8
 8007d36:	0006      	movs	r6, r0
 8007d38:	001f      	movs	r7, r3
 8007d3a:	2b0c      	cmp	r3, #12
 8007d3c:	d238      	bcs.n	8007db0 <_malloc_r+0x84>
 8007d3e:	270c      	movs	r7, #12
 8007d40:	42b9      	cmp	r1, r7
 8007d42:	d837      	bhi.n	8007db4 <_malloc_r+0x88>
 8007d44:	0030      	movs	r0, r6
 8007d46:	f000 f873 	bl	8007e30 <__malloc_lock>
 8007d4a:	4b38      	ldr	r3, [pc, #224]	; (8007e2c <_malloc_r+0x100>)
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	001c      	movs	r4, r3
 8007d52:	2c00      	cmp	r4, #0
 8007d54:	d133      	bne.n	8007dbe <_malloc_r+0x92>
 8007d56:	0039      	movs	r1, r7
 8007d58:	0030      	movs	r0, r6
 8007d5a:	f7ff ffc5 	bl	8007ce8 <sbrk_aligned>
 8007d5e:	0004      	movs	r4, r0
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	d15e      	bne.n	8007e22 <_malloc_r+0xf6>
 8007d64:	9b00      	ldr	r3, [sp, #0]
 8007d66:	681c      	ldr	r4, [r3, #0]
 8007d68:	0025      	movs	r5, r4
 8007d6a:	2d00      	cmp	r5, #0
 8007d6c:	d14e      	bne.n	8007e0c <_malloc_r+0xe0>
 8007d6e:	2c00      	cmp	r4, #0
 8007d70:	d051      	beq.n	8007e16 <_malloc_r+0xea>
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	0029      	movs	r1, r5
 8007d76:	18e3      	adds	r3, r4, r3
 8007d78:	0030      	movs	r0, r6
 8007d7a:	9301      	str	r3, [sp, #4]
 8007d7c:	f000 fb4a 	bl	8008414 <_sbrk_r>
 8007d80:	9b01      	ldr	r3, [sp, #4]
 8007d82:	4283      	cmp	r3, r0
 8007d84:	d147      	bne.n	8007e16 <_malloc_r+0xea>
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	0030      	movs	r0, r6
 8007d8a:	1aff      	subs	r7, r7, r3
 8007d8c:	0039      	movs	r1, r7
 8007d8e:	f7ff ffab 	bl	8007ce8 <sbrk_aligned>
 8007d92:	3001      	adds	r0, #1
 8007d94:	d03f      	beq.n	8007e16 <_malloc_r+0xea>
 8007d96:	6823      	ldr	r3, [r4, #0]
 8007d98:	19db      	adds	r3, r3, r7
 8007d9a:	6023      	str	r3, [r4, #0]
 8007d9c:	9b00      	ldr	r3, [sp, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d040      	beq.n	8007e26 <_malloc_r+0xfa>
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	42a2      	cmp	r2, r4
 8007da8:	d133      	bne.n	8007e12 <_malloc_r+0xe6>
 8007daa:	2200      	movs	r2, #0
 8007dac:	605a      	str	r2, [r3, #4]
 8007dae:	e014      	b.n	8007dda <_malloc_r+0xae>
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	dac5      	bge.n	8007d40 <_malloc_r+0x14>
 8007db4:	230c      	movs	r3, #12
 8007db6:	2500      	movs	r5, #0
 8007db8:	6033      	str	r3, [r6, #0]
 8007dba:	0028      	movs	r0, r5
 8007dbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007dbe:	6821      	ldr	r1, [r4, #0]
 8007dc0:	1bc9      	subs	r1, r1, r7
 8007dc2:	d420      	bmi.n	8007e06 <_malloc_r+0xda>
 8007dc4:	290b      	cmp	r1, #11
 8007dc6:	d918      	bls.n	8007dfa <_malloc_r+0xce>
 8007dc8:	19e2      	adds	r2, r4, r7
 8007dca:	6027      	str	r7, [r4, #0]
 8007dcc:	42a3      	cmp	r3, r4
 8007dce:	d112      	bne.n	8007df6 <_malloc_r+0xca>
 8007dd0:	9b00      	ldr	r3, [sp, #0]
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	6863      	ldr	r3, [r4, #4]
 8007dd6:	6011      	str	r1, [r2, #0]
 8007dd8:	6053      	str	r3, [r2, #4]
 8007dda:	0030      	movs	r0, r6
 8007ddc:	0025      	movs	r5, r4
 8007dde:	f000 f82f 	bl	8007e40 <__malloc_unlock>
 8007de2:	2207      	movs	r2, #7
 8007de4:	350b      	adds	r5, #11
 8007de6:	1d23      	adds	r3, r4, #4
 8007de8:	4395      	bics	r5, r2
 8007dea:	1aea      	subs	r2, r5, r3
 8007dec:	429d      	cmp	r5, r3
 8007dee:	d0e4      	beq.n	8007dba <_malloc_r+0x8e>
 8007df0:	1b5b      	subs	r3, r3, r5
 8007df2:	50a3      	str	r3, [r4, r2]
 8007df4:	e7e1      	b.n	8007dba <_malloc_r+0x8e>
 8007df6:	605a      	str	r2, [r3, #4]
 8007df8:	e7ec      	b.n	8007dd4 <_malloc_r+0xa8>
 8007dfa:	6862      	ldr	r2, [r4, #4]
 8007dfc:	42a3      	cmp	r3, r4
 8007dfe:	d1d5      	bne.n	8007dac <_malloc_r+0x80>
 8007e00:	9b00      	ldr	r3, [sp, #0]
 8007e02:	601a      	str	r2, [r3, #0]
 8007e04:	e7e9      	b.n	8007dda <_malloc_r+0xae>
 8007e06:	0023      	movs	r3, r4
 8007e08:	6864      	ldr	r4, [r4, #4]
 8007e0a:	e7a2      	b.n	8007d52 <_malloc_r+0x26>
 8007e0c:	002c      	movs	r4, r5
 8007e0e:	686d      	ldr	r5, [r5, #4]
 8007e10:	e7ab      	b.n	8007d6a <_malloc_r+0x3e>
 8007e12:	0013      	movs	r3, r2
 8007e14:	e7c4      	b.n	8007da0 <_malloc_r+0x74>
 8007e16:	230c      	movs	r3, #12
 8007e18:	0030      	movs	r0, r6
 8007e1a:	6033      	str	r3, [r6, #0]
 8007e1c:	f000 f810 	bl	8007e40 <__malloc_unlock>
 8007e20:	e7cb      	b.n	8007dba <_malloc_r+0x8e>
 8007e22:	6027      	str	r7, [r4, #0]
 8007e24:	e7d9      	b.n	8007dda <_malloc_r+0xae>
 8007e26:	605b      	str	r3, [r3, #4]
 8007e28:	deff      	udf	#255	; 0xff
 8007e2a:	46c0      	nop			; (mov r8, r8)
 8007e2c:	20000788 	.word	0x20000788

08007e30 <__malloc_lock>:
 8007e30:	b510      	push	{r4, lr}
 8007e32:	4802      	ldr	r0, [pc, #8]	; (8007e3c <__malloc_lock+0xc>)
 8007e34:	f7ff ff02 	bl	8007c3c <__retarget_lock_acquire_recursive>
 8007e38:	bd10      	pop	{r4, pc}
 8007e3a:	46c0      	nop			; (mov r8, r8)
 8007e3c:	20000784 	.word	0x20000784

08007e40 <__malloc_unlock>:
 8007e40:	b510      	push	{r4, lr}
 8007e42:	4802      	ldr	r0, [pc, #8]	; (8007e4c <__malloc_unlock+0xc>)
 8007e44:	f7ff fefb 	bl	8007c3e <__retarget_lock_release_recursive>
 8007e48:	bd10      	pop	{r4, pc}
 8007e4a:	46c0      	nop			; (mov r8, r8)
 8007e4c:	20000784 	.word	0x20000784

08007e50 <__ssputs_r>:
 8007e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e52:	b085      	sub	sp, #20
 8007e54:	9301      	str	r3, [sp, #4]
 8007e56:	9203      	str	r2, [sp, #12]
 8007e58:	688e      	ldr	r6, [r1, #8]
 8007e5a:	9a01      	ldr	r2, [sp, #4]
 8007e5c:	0007      	movs	r7, r0
 8007e5e:	000c      	movs	r4, r1
 8007e60:	680b      	ldr	r3, [r1, #0]
 8007e62:	4296      	cmp	r6, r2
 8007e64:	d831      	bhi.n	8007eca <__ssputs_r+0x7a>
 8007e66:	898a      	ldrh	r2, [r1, #12]
 8007e68:	2190      	movs	r1, #144	; 0x90
 8007e6a:	00c9      	lsls	r1, r1, #3
 8007e6c:	420a      	tst	r2, r1
 8007e6e:	d029      	beq.n	8007ec4 <__ssputs_r+0x74>
 8007e70:	2003      	movs	r0, #3
 8007e72:	6921      	ldr	r1, [r4, #16]
 8007e74:	1a5b      	subs	r3, r3, r1
 8007e76:	9302      	str	r3, [sp, #8]
 8007e78:	6963      	ldr	r3, [r4, #20]
 8007e7a:	4343      	muls	r3, r0
 8007e7c:	0fdd      	lsrs	r5, r3, #31
 8007e7e:	18ed      	adds	r5, r5, r3
 8007e80:	9b01      	ldr	r3, [sp, #4]
 8007e82:	9802      	ldr	r0, [sp, #8]
 8007e84:	3301      	adds	r3, #1
 8007e86:	181b      	adds	r3, r3, r0
 8007e88:	106d      	asrs	r5, r5, #1
 8007e8a:	42ab      	cmp	r3, r5
 8007e8c:	d900      	bls.n	8007e90 <__ssputs_r+0x40>
 8007e8e:	001d      	movs	r5, r3
 8007e90:	0552      	lsls	r2, r2, #21
 8007e92:	d529      	bpl.n	8007ee8 <__ssputs_r+0x98>
 8007e94:	0029      	movs	r1, r5
 8007e96:	0038      	movs	r0, r7
 8007e98:	f7ff ff48 	bl	8007d2c <_malloc_r>
 8007e9c:	1e06      	subs	r6, r0, #0
 8007e9e:	d02d      	beq.n	8007efc <__ssputs_r+0xac>
 8007ea0:	9a02      	ldr	r2, [sp, #8]
 8007ea2:	6921      	ldr	r1, [r4, #16]
 8007ea4:	f7ff fecc 	bl	8007c40 <memcpy>
 8007ea8:	89a2      	ldrh	r2, [r4, #12]
 8007eaa:	4b19      	ldr	r3, [pc, #100]	; (8007f10 <__ssputs_r+0xc0>)
 8007eac:	401a      	ands	r2, r3
 8007eae:	2380      	movs	r3, #128	; 0x80
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	81a3      	strh	r3, [r4, #12]
 8007eb4:	9b02      	ldr	r3, [sp, #8]
 8007eb6:	6126      	str	r6, [r4, #16]
 8007eb8:	18f6      	adds	r6, r6, r3
 8007eba:	6026      	str	r6, [r4, #0]
 8007ebc:	6165      	str	r5, [r4, #20]
 8007ebe:	9e01      	ldr	r6, [sp, #4]
 8007ec0:	1aed      	subs	r5, r5, r3
 8007ec2:	60a5      	str	r5, [r4, #8]
 8007ec4:	9b01      	ldr	r3, [sp, #4]
 8007ec6:	429e      	cmp	r6, r3
 8007ec8:	d900      	bls.n	8007ecc <__ssputs_r+0x7c>
 8007eca:	9e01      	ldr	r6, [sp, #4]
 8007ecc:	0032      	movs	r2, r6
 8007ece:	9903      	ldr	r1, [sp, #12]
 8007ed0:	6820      	ldr	r0, [r4, #0]
 8007ed2:	f7ff fe6d 	bl	8007bb0 <memmove>
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	68a3      	ldr	r3, [r4, #8]
 8007eda:	1b9b      	subs	r3, r3, r6
 8007edc:	60a3      	str	r3, [r4, #8]
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	199b      	adds	r3, r3, r6
 8007ee2:	6023      	str	r3, [r4, #0]
 8007ee4:	b005      	add	sp, #20
 8007ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ee8:	002a      	movs	r2, r5
 8007eea:	0038      	movs	r0, r7
 8007eec:	f000 faaf 	bl	800844e <_realloc_r>
 8007ef0:	1e06      	subs	r6, r0, #0
 8007ef2:	d1df      	bne.n	8007eb4 <__ssputs_r+0x64>
 8007ef4:	0038      	movs	r0, r7
 8007ef6:	6921      	ldr	r1, [r4, #16]
 8007ef8:	f7ff feac 	bl	8007c54 <_free_r>
 8007efc:	230c      	movs	r3, #12
 8007efe:	2001      	movs	r0, #1
 8007f00:	603b      	str	r3, [r7, #0]
 8007f02:	89a2      	ldrh	r2, [r4, #12]
 8007f04:	3334      	adds	r3, #52	; 0x34
 8007f06:	4313      	orrs	r3, r2
 8007f08:	81a3      	strh	r3, [r4, #12]
 8007f0a:	4240      	negs	r0, r0
 8007f0c:	e7ea      	b.n	8007ee4 <__ssputs_r+0x94>
 8007f0e:	46c0      	nop			; (mov r8, r8)
 8007f10:	fffffb7f 	.word	0xfffffb7f

08007f14 <_svfiprintf_r>:
 8007f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f16:	b0a1      	sub	sp, #132	; 0x84
 8007f18:	9003      	str	r0, [sp, #12]
 8007f1a:	001d      	movs	r5, r3
 8007f1c:	898b      	ldrh	r3, [r1, #12]
 8007f1e:	000f      	movs	r7, r1
 8007f20:	0016      	movs	r6, r2
 8007f22:	061b      	lsls	r3, r3, #24
 8007f24:	d511      	bpl.n	8007f4a <_svfiprintf_r+0x36>
 8007f26:	690b      	ldr	r3, [r1, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10e      	bne.n	8007f4a <_svfiprintf_r+0x36>
 8007f2c:	2140      	movs	r1, #64	; 0x40
 8007f2e:	f7ff fefd 	bl	8007d2c <_malloc_r>
 8007f32:	6038      	str	r0, [r7, #0]
 8007f34:	6138      	str	r0, [r7, #16]
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d105      	bne.n	8007f46 <_svfiprintf_r+0x32>
 8007f3a:	230c      	movs	r3, #12
 8007f3c:	9a03      	ldr	r2, [sp, #12]
 8007f3e:	3801      	subs	r0, #1
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	b021      	add	sp, #132	; 0x84
 8007f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f46:	2340      	movs	r3, #64	; 0x40
 8007f48:	617b      	str	r3, [r7, #20]
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	ac08      	add	r4, sp, #32
 8007f4e:	6163      	str	r3, [r4, #20]
 8007f50:	3320      	adds	r3, #32
 8007f52:	7663      	strb	r3, [r4, #25]
 8007f54:	3310      	adds	r3, #16
 8007f56:	76a3      	strb	r3, [r4, #26]
 8007f58:	9507      	str	r5, [sp, #28]
 8007f5a:	0035      	movs	r5, r6
 8007f5c:	782b      	ldrb	r3, [r5, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <_svfiprintf_r+0x52>
 8007f62:	2b25      	cmp	r3, #37	; 0x25
 8007f64:	d148      	bne.n	8007ff8 <_svfiprintf_r+0xe4>
 8007f66:	1bab      	subs	r3, r5, r6
 8007f68:	9305      	str	r3, [sp, #20]
 8007f6a:	42b5      	cmp	r5, r6
 8007f6c:	d00b      	beq.n	8007f86 <_svfiprintf_r+0x72>
 8007f6e:	0032      	movs	r2, r6
 8007f70:	0039      	movs	r1, r7
 8007f72:	9803      	ldr	r0, [sp, #12]
 8007f74:	f7ff ff6c 	bl	8007e50 <__ssputs_r>
 8007f78:	3001      	adds	r0, #1
 8007f7a:	d100      	bne.n	8007f7e <_svfiprintf_r+0x6a>
 8007f7c:	e0af      	b.n	80080de <_svfiprintf_r+0x1ca>
 8007f7e:	6963      	ldr	r3, [r4, #20]
 8007f80:	9a05      	ldr	r2, [sp, #20]
 8007f82:	189b      	adds	r3, r3, r2
 8007f84:	6163      	str	r3, [r4, #20]
 8007f86:	782b      	ldrb	r3, [r5, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d100      	bne.n	8007f8e <_svfiprintf_r+0x7a>
 8007f8c:	e0a7      	b.n	80080de <_svfiprintf_r+0x1ca>
 8007f8e:	2201      	movs	r2, #1
 8007f90:	2300      	movs	r3, #0
 8007f92:	4252      	negs	r2, r2
 8007f94:	6062      	str	r2, [r4, #4]
 8007f96:	a904      	add	r1, sp, #16
 8007f98:	3254      	adds	r2, #84	; 0x54
 8007f9a:	1852      	adds	r2, r2, r1
 8007f9c:	1c6e      	adds	r6, r5, #1
 8007f9e:	6023      	str	r3, [r4, #0]
 8007fa0:	60e3      	str	r3, [r4, #12]
 8007fa2:	60a3      	str	r3, [r4, #8]
 8007fa4:	7013      	strb	r3, [r2, #0]
 8007fa6:	65a3      	str	r3, [r4, #88]	; 0x58
 8007fa8:	4b55      	ldr	r3, [pc, #340]	; (8008100 <_svfiprintf_r+0x1ec>)
 8007faa:	2205      	movs	r2, #5
 8007fac:	0018      	movs	r0, r3
 8007fae:	7831      	ldrb	r1, [r6, #0]
 8007fb0:	9305      	str	r3, [sp, #20]
 8007fb2:	f000 fa41 	bl	8008438 <memchr>
 8007fb6:	1c75      	adds	r5, r6, #1
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	d11f      	bne.n	8007ffc <_svfiprintf_r+0xe8>
 8007fbc:	6822      	ldr	r2, [r4, #0]
 8007fbe:	06d3      	lsls	r3, r2, #27
 8007fc0:	d504      	bpl.n	8007fcc <_svfiprintf_r+0xb8>
 8007fc2:	2353      	movs	r3, #83	; 0x53
 8007fc4:	a904      	add	r1, sp, #16
 8007fc6:	185b      	adds	r3, r3, r1
 8007fc8:	2120      	movs	r1, #32
 8007fca:	7019      	strb	r1, [r3, #0]
 8007fcc:	0713      	lsls	r3, r2, #28
 8007fce:	d504      	bpl.n	8007fda <_svfiprintf_r+0xc6>
 8007fd0:	2353      	movs	r3, #83	; 0x53
 8007fd2:	a904      	add	r1, sp, #16
 8007fd4:	185b      	adds	r3, r3, r1
 8007fd6:	212b      	movs	r1, #43	; 0x2b
 8007fd8:	7019      	strb	r1, [r3, #0]
 8007fda:	7833      	ldrb	r3, [r6, #0]
 8007fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8007fde:	d016      	beq.n	800800e <_svfiprintf_r+0xfa>
 8007fe0:	0035      	movs	r5, r6
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	200a      	movs	r0, #10
 8007fe6:	68e3      	ldr	r3, [r4, #12]
 8007fe8:	782a      	ldrb	r2, [r5, #0]
 8007fea:	1c6e      	adds	r6, r5, #1
 8007fec:	3a30      	subs	r2, #48	; 0x30
 8007fee:	2a09      	cmp	r2, #9
 8007ff0:	d94e      	bls.n	8008090 <_svfiprintf_r+0x17c>
 8007ff2:	2900      	cmp	r1, #0
 8007ff4:	d111      	bne.n	800801a <_svfiprintf_r+0x106>
 8007ff6:	e017      	b.n	8008028 <_svfiprintf_r+0x114>
 8007ff8:	3501      	adds	r5, #1
 8007ffa:	e7af      	b.n	8007f5c <_svfiprintf_r+0x48>
 8007ffc:	9b05      	ldr	r3, [sp, #20]
 8007ffe:	6822      	ldr	r2, [r4, #0]
 8008000:	1ac0      	subs	r0, r0, r3
 8008002:	2301      	movs	r3, #1
 8008004:	4083      	lsls	r3, r0
 8008006:	4313      	orrs	r3, r2
 8008008:	002e      	movs	r6, r5
 800800a:	6023      	str	r3, [r4, #0]
 800800c:	e7cc      	b.n	8007fa8 <_svfiprintf_r+0x94>
 800800e:	9b07      	ldr	r3, [sp, #28]
 8008010:	1d19      	adds	r1, r3, #4
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	9107      	str	r1, [sp, #28]
 8008016:	2b00      	cmp	r3, #0
 8008018:	db01      	blt.n	800801e <_svfiprintf_r+0x10a>
 800801a:	930b      	str	r3, [sp, #44]	; 0x2c
 800801c:	e004      	b.n	8008028 <_svfiprintf_r+0x114>
 800801e:	425b      	negs	r3, r3
 8008020:	60e3      	str	r3, [r4, #12]
 8008022:	2302      	movs	r3, #2
 8008024:	4313      	orrs	r3, r2
 8008026:	6023      	str	r3, [r4, #0]
 8008028:	782b      	ldrb	r3, [r5, #0]
 800802a:	2b2e      	cmp	r3, #46	; 0x2e
 800802c:	d10a      	bne.n	8008044 <_svfiprintf_r+0x130>
 800802e:	786b      	ldrb	r3, [r5, #1]
 8008030:	2b2a      	cmp	r3, #42	; 0x2a
 8008032:	d135      	bne.n	80080a0 <_svfiprintf_r+0x18c>
 8008034:	9b07      	ldr	r3, [sp, #28]
 8008036:	3502      	adds	r5, #2
 8008038:	1d1a      	adds	r2, r3, #4
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	9207      	str	r2, [sp, #28]
 800803e:	2b00      	cmp	r3, #0
 8008040:	db2b      	blt.n	800809a <_svfiprintf_r+0x186>
 8008042:	9309      	str	r3, [sp, #36]	; 0x24
 8008044:	4e2f      	ldr	r6, [pc, #188]	; (8008104 <_svfiprintf_r+0x1f0>)
 8008046:	2203      	movs	r2, #3
 8008048:	0030      	movs	r0, r6
 800804a:	7829      	ldrb	r1, [r5, #0]
 800804c:	f000 f9f4 	bl	8008438 <memchr>
 8008050:	2800      	cmp	r0, #0
 8008052:	d006      	beq.n	8008062 <_svfiprintf_r+0x14e>
 8008054:	2340      	movs	r3, #64	; 0x40
 8008056:	1b80      	subs	r0, r0, r6
 8008058:	4083      	lsls	r3, r0
 800805a:	6822      	ldr	r2, [r4, #0]
 800805c:	3501      	adds	r5, #1
 800805e:	4313      	orrs	r3, r2
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	7829      	ldrb	r1, [r5, #0]
 8008064:	2206      	movs	r2, #6
 8008066:	4828      	ldr	r0, [pc, #160]	; (8008108 <_svfiprintf_r+0x1f4>)
 8008068:	1c6e      	adds	r6, r5, #1
 800806a:	7621      	strb	r1, [r4, #24]
 800806c:	f000 f9e4 	bl	8008438 <memchr>
 8008070:	2800      	cmp	r0, #0
 8008072:	d03c      	beq.n	80080ee <_svfiprintf_r+0x1da>
 8008074:	4b25      	ldr	r3, [pc, #148]	; (800810c <_svfiprintf_r+0x1f8>)
 8008076:	2b00      	cmp	r3, #0
 8008078:	d125      	bne.n	80080c6 <_svfiprintf_r+0x1b2>
 800807a:	2207      	movs	r2, #7
 800807c:	9b07      	ldr	r3, [sp, #28]
 800807e:	3307      	adds	r3, #7
 8008080:	4393      	bics	r3, r2
 8008082:	3308      	adds	r3, #8
 8008084:	9307      	str	r3, [sp, #28]
 8008086:	6963      	ldr	r3, [r4, #20]
 8008088:	9a04      	ldr	r2, [sp, #16]
 800808a:	189b      	adds	r3, r3, r2
 800808c:	6163      	str	r3, [r4, #20]
 800808e:	e764      	b.n	8007f5a <_svfiprintf_r+0x46>
 8008090:	4343      	muls	r3, r0
 8008092:	0035      	movs	r5, r6
 8008094:	2101      	movs	r1, #1
 8008096:	189b      	adds	r3, r3, r2
 8008098:	e7a6      	b.n	8007fe8 <_svfiprintf_r+0xd4>
 800809a:	2301      	movs	r3, #1
 800809c:	425b      	negs	r3, r3
 800809e:	e7d0      	b.n	8008042 <_svfiprintf_r+0x12e>
 80080a0:	2300      	movs	r3, #0
 80080a2:	200a      	movs	r0, #10
 80080a4:	001a      	movs	r2, r3
 80080a6:	3501      	adds	r5, #1
 80080a8:	6063      	str	r3, [r4, #4]
 80080aa:	7829      	ldrb	r1, [r5, #0]
 80080ac:	1c6e      	adds	r6, r5, #1
 80080ae:	3930      	subs	r1, #48	; 0x30
 80080b0:	2909      	cmp	r1, #9
 80080b2:	d903      	bls.n	80080bc <_svfiprintf_r+0x1a8>
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d0c5      	beq.n	8008044 <_svfiprintf_r+0x130>
 80080b8:	9209      	str	r2, [sp, #36]	; 0x24
 80080ba:	e7c3      	b.n	8008044 <_svfiprintf_r+0x130>
 80080bc:	4342      	muls	r2, r0
 80080be:	0035      	movs	r5, r6
 80080c0:	2301      	movs	r3, #1
 80080c2:	1852      	adds	r2, r2, r1
 80080c4:	e7f1      	b.n	80080aa <_svfiprintf_r+0x196>
 80080c6:	aa07      	add	r2, sp, #28
 80080c8:	9200      	str	r2, [sp, #0]
 80080ca:	0021      	movs	r1, r4
 80080cc:	003a      	movs	r2, r7
 80080ce:	4b10      	ldr	r3, [pc, #64]	; (8008110 <_svfiprintf_r+0x1fc>)
 80080d0:	9803      	ldr	r0, [sp, #12]
 80080d2:	e000      	b.n	80080d6 <_svfiprintf_r+0x1c2>
 80080d4:	bf00      	nop
 80080d6:	9004      	str	r0, [sp, #16]
 80080d8:	9b04      	ldr	r3, [sp, #16]
 80080da:	3301      	adds	r3, #1
 80080dc:	d1d3      	bne.n	8008086 <_svfiprintf_r+0x172>
 80080de:	89bb      	ldrh	r3, [r7, #12]
 80080e0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80080e2:	065b      	lsls	r3, r3, #25
 80080e4:	d400      	bmi.n	80080e8 <_svfiprintf_r+0x1d4>
 80080e6:	e72c      	b.n	8007f42 <_svfiprintf_r+0x2e>
 80080e8:	2001      	movs	r0, #1
 80080ea:	4240      	negs	r0, r0
 80080ec:	e729      	b.n	8007f42 <_svfiprintf_r+0x2e>
 80080ee:	aa07      	add	r2, sp, #28
 80080f0:	9200      	str	r2, [sp, #0]
 80080f2:	0021      	movs	r1, r4
 80080f4:	003a      	movs	r2, r7
 80080f6:	4b06      	ldr	r3, [pc, #24]	; (8008110 <_svfiprintf_r+0x1fc>)
 80080f8:	9803      	ldr	r0, [sp, #12]
 80080fa:	f000 f87b 	bl	80081f4 <_printf_i>
 80080fe:	e7ea      	b.n	80080d6 <_svfiprintf_r+0x1c2>
 8008100:	0800931c 	.word	0x0800931c
 8008104:	08009322 	.word	0x08009322
 8008108:	08009326 	.word	0x08009326
 800810c:	00000000 	.word	0x00000000
 8008110:	08007e51 	.word	0x08007e51

08008114 <_printf_common>:
 8008114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008116:	0016      	movs	r6, r2
 8008118:	9301      	str	r3, [sp, #4]
 800811a:	688a      	ldr	r2, [r1, #8]
 800811c:	690b      	ldr	r3, [r1, #16]
 800811e:	000c      	movs	r4, r1
 8008120:	9000      	str	r0, [sp, #0]
 8008122:	4293      	cmp	r3, r2
 8008124:	da00      	bge.n	8008128 <_printf_common+0x14>
 8008126:	0013      	movs	r3, r2
 8008128:	0022      	movs	r2, r4
 800812a:	6033      	str	r3, [r6, #0]
 800812c:	3243      	adds	r2, #67	; 0x43
 800812e:	7812      	ldrb	r2, [r2, #0]
 8008130:	2a00      	cmp	r2, #0
 8008132:	d001      	beq.n	8008138 <_printf_common+0x24>
 8008134:	3301      	adds	r3, #1
 8008136:	6033      	str	r3, [r6, #0]
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	069b      	lsls	r3, r3, #26
 800813c:	d502      	bpl.n	8008144 <_printf_common+0x30>
 800813e:	6833      	ldr	r3, [r6, #0]
 8008140:	3302      	adds	r3, #2
 8008142:	6033      	str	r3, [r6, #0]
 8008144:	6822      	ldr	r2, [r4, #0]
 8008146:	2306      	movs	r3, #6
 8008148:	0015      	movs	r5, r2
 800814a:	401d      	ands	r5, r3
 800814c:	421a      	tst	r2, r3
 800814e:	d027      	beq.n	80081a0 <_printf_common+0x8c>
 8008150:	0023      	movs	r3, r4
 8008152:	3343      	adds	r3, #67	; 0x43
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	1e5a      	subs	r2, r3, #1
 8008158:	4193      	sbcs	r3, r2
 800815a:	6822      	ldr	r2, [r4, #0]
 800815c:	0692      	lsls	r2, r2, #26
 800815e:	d430      	bmi.n	80081c2 <_printf_common+0xae>
 8008160:	0022      	movs	r2, r4
 8008162:	9901      	ldr	r1, [sp, #4]
 8008164:	9800      	ldr	r0, [sp, #0]
 8008166:	9d08      	ldr	r5, [sp, #32]
 8008168:	3243      	adds	r2, #67	; 0x43
 800816a:	47a8      	blx	r5
 800816c:	3001      	adds	r0, #1
 800816e:	d025      	beq.n	80081bc <_printf_common+0xa8>
 8008170:	2206      	movs	r2, #6
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	2500      	movs	r5, #0
 8008176:	4013      	ands	r3, r2
 8008178:	2b04      	cmp	r3, #4
 800817a:	d105      	bne.n	8008188 <_printf_common+0x74>
 800817c:	6833      	ldr	r3, [r6, #0]
 800817e:	68e5      	ldr	r5, [r4, #12]
 8008180:	1aed      	subs	r5, r5, r3
 8008182:	43eb      	mvns	r3, r5
 8008184:	17db      	asrs	r3, r3, #31
 8008186:	401d      	ands	r5, r3
 8008188:	68a3      	ldr	r3, [r4, #8]
 800818a:	6922      	ldr	r2, [r4, #16]
 800818c:	4293      	cmp	r3, r2
 800818e:	dd01      	ble.n	8008194 <_printf_common+0x80>
 8008190:	1a9b      	subs	r3, r3, r2
 8008192:	18ed      	adds	r5, r5, r3
 8008194:	2600      	movs	r6, #0
 8008196:	42b5      	cmp	r5, r6
 8008198:	d120      	bne.n	80081dc <_printf_common+0xc8>
 800819a:	2000      	movs	r0, #0
 800819c:	e010      	b.n	80081c0 <_printf_common+0xac>
 800819e:	3501      	adds	r5, #1
 80081a0:	68e3      	ldr	r3, [r4, #12]
 80081a2:	6832      	ldr	r2, [r6, #0]
 80081a4:	1a9b      	subs	r3, r3, r2
 80081a6:	42ab      	cmp	r3, r5
 80081a8:	ddd2      	ble.n	8008150 <_printf_common+0x3c>
 80081aa:	0022      	movs	r2, r4
 80081ac:	2301      	movs	r3, #1
 80081ae:	9901      	ldr	r1, [sp, #4]
 80081b0:	9800      	ldr	r0, [sp, #0]
 80081b2:	9f08      	ldr	r7, [sp, #32]
 80081b4:	3219      	adds	r2, #25
 80081b6:	47b8      	blx	r7
 80081b8:	3001      	adds	r0, #1
 80081ba:	d1f0      	bne.n	800819e <_printf_common+0x8a>
 80081bc:	2001      	movs	r0, #1
 80081be:	4240      	negs	r0, r0
 80081c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80081c2:	2030      	movs	r0, #48	; 0x30
 80081c4:	18e1      	adds	r1, r4, r3
 80081c6:	3143      	adds	r1, #67	; 0x43
 80081c8:	7008      	strb	r0, [r1, #0]
 80081ca:	0021      	movs	r1, r4
 80081cc:	1c5a      	adds	r2, r3, #1
 80081ce:	3145      	adds	r1, #69	; 0x45
 80081d0:	7809      	ldrb	r1, [r1, #0]
 80081d2:	18a2      	adds	r2, r4, r2
 80081d4:	3243      	adds	r2, #67	; 0x43
 80081d6:	3302      	adds	r3, #2
 80081d8:	7011      	strb	r1, [r2, #0]
 80081da:	e7c1      	b.n	8008160 <_printf_common+0x4c>
 80081dc:	0022      	movs	r2, r4
 80081de:	2301      	movs	r3, #1
 80081e0:	9901      	ldr	r1, [sp, #4]
 80081e2:	9800      	ldr	r0, [sp, #0]
 80081e4:	9f08      	ldr	r7, [sp, #32]
 80081e6:	321a      	adds	r2, #26
 80081e8:	47b8      	blx	r7
 80081ea:	3001      	adds	r0, #1
 80081ec:	d0e6      	beq.n	80081bc <_printf_common+0xa8>
 80081ee:	3601      	adds	r6, #1
 80081f0:	e7d1      	b.n	8008196 <_printf_common+0x82>
	...

080081f4 <_printf_i>:
 80081f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081f6:	b08b      	sub	sp, #44	; 0x2c
 80081f8:	9206      	str	r2, [sp, #24]
 80081fa:	000a      	movs	r2, r1
 80081fc:	3243      	adds	r2, #67	; 0x43
 80081fe:	9307      	str	r3, [sp, #28]
 8008200:	9005      	str	r0, [sp, #20]
 8008202:	9204      	str	r2, [sp, #16]
 8008204:	7e0a      	ldrb	r2, [r1, #24]
 8008206:	000c      	movs	r4, r1
 8008208:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800820a:	2a78      	cmp	r2, #120	; 0x78
 800820c:	d809      	bhi.n	8008222 <_printf_i+0x2e>
 800820e:	2a62      	cmp	r2, #98	; 0x62
 8008210:	d80b      	bhi.n	800822a <_printf_i+0x36>
 8008212:	2a00      	cmp	r2, #0
 8008214:	d100      	bne.n	8008218 <_printf_i+0x24>
 8008216:	e0be      	b.n	8008396 <_printf_i+0x1a2>
 8008218:	497c      	ldr	r1, [pc, #496]	; (800840c <_printf_i+0x218>)
 800821a:	9103      	str	r1, [sp, #12]
 800821c:	2a58      	cmp	r2, #88	; 0x58
 800821e:	d100      	bne.n	8008222 <_printf_i+0x2e>
 8008220:	e093      	b.n	800834a <_printf_i+0x156>
 8008222:	0026      	movs	r6, r4
 8008224:	3642      	adds	r6, #66	; 0x42
 8008226:	7032      	strb	r2, [r6, #0]
 8008228:	e022      	b.n	8008270 <_printf_i+0x7c>
 800822a:	0010      	movs	r0, r2
 800822c:	3863      	subs	r0, #99	; 0x63
 800822e:	2815      	cmp	r0, #21
 8008230:	d8f7      	bhi.n	8008222 <_printf_i+0x2e>
 8008232:	f7f7 ff67 	bl	8000104 <__gnu_thumb1_case_shi>
 8008236:	0016      	.short	0x0016
 8008238:	fff6001f 	.word	0xfff6001f
 800823c:	fff6fff6 	.word	0xfff6fff6
 8008240:	001ffff6 	.word	0x001ffff6
 8008244:	fff6fff6 	.word	0xfff6fff6
 8008248:	fff6fff6 	.word	0xfff6fff6
 800824c:	003600a3 	.word	0x003600a3
 8008250:	fff60083 	.word	0xfff60083
 8008254:	00b4fff6 	.word	0x00b4fff6
 8008258:	0036fff6 	.word	0x0036fff6
 800825c:	fff6fff6 	.word	0xfff6fff6
 8008260:	0087      	.short	0x0087
 8008262:	0026      	movs	r6, r4
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	3642      	adds	r6, #66	; 0x42
 8008268:	1d11      	adds	r1, r2, #4
 800826a:	6019      	str	r1, [r3, #0]
 800826c:	6813      	ldr	r3, [r2, #0]
 800826e:	7033      	strb	r3, [r6, #0]
 8008270:	2301      	movs	r3, #1
 8008272:	e0a2      	b.n	80083ba <_printf_i+0x1c6>
 8008274:	6818      	ldr	r0, [r3, #0]
 8008276:	6809      	ldr	r1, [r1, #0]
 8008278:	1d02      	adds	r2, r0, #4
 800827a:	060d      	lsls	r5, r1, #24
 800827c:	d50b      	bpl.n	8008296 <_printf_i+0xa2>
 800827e:	6805      	ldr	r5, [r0, #0]
 8008280:	601a      	str	r2, [r3, #0]
 8008282:	2d00      	cmp	r5, #0
 8008284:	da03      	bge.n	800828e <_printf_i+0x9a>
 8008286:	232d      	movs	r3, #45	; 0x2d
 8008288:	9a04      	ldr	r2, [sp, #16]
 800828a:	426d      	negs	r5, r5
 800828c:	7013      	strb	r3, [r2, #0]
 800828e:	4b5f      	ldr	r3, [pc, #380]	; (800840c <_printf_i+0x218>)
 8008290:	270a      	movs	r7, #10
 8008292:	9303      	str	r3, [sp, #12]
 8008294:	e01b      	b.n	80082ce <_printf_i+0xda>
 8008296:	6805      	ldr	r5, [r0, #0]
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	0649      	lsls	r1, r1, #25
 800829c:	d5f1      	bpl.n	8008282 <_printf_i+0x8e>
 800829e:	b22d      	sxth	r5, r5
 80082a0:	e7ef      	b.n	8008282 <_printf_i+0x8e>
 80082a2:	680d      	ldr	r5, [r1, #0]
 80082a4:	6819      	ldr	r1, [r3, #0]
 80082a6:	1d08      	adds	r0, r1, #4
 80082a8:	6018      	str	r0, [r3, #0]
 80082aa:	062e      	lsls	r6, r5, #24
 80082ac:	d501      	bpl.n	80082b2 <_printf_i+0xbe>
 80082ae:	680d      	ldr	r5, [r1, #0]
 80082b0:	e003      	b.n	80082ba <_printf_i+0xc6>
 80082b2:	066d      	lsls	r5, r5, #25
 80082b4:	d5fb      	bpl.n	80082ae <_printf_i+0xba>
 80082b6:	680d      	ldr	r5, [r1, #0]
 80082b8:	b2ad      	uxth	r5, r5
 80082ba:	4b54      	ldr	r3, [pc, #336]	; (800840c <_printf_i+0x218>)
 80082bc:	2708      	movs	r7, #8
 80082be:	9303      	str	r3, [sp, #12]
 80082c0:	2a6f      	cmp	r2, #111	; 0x6f
 80082c2:	d000      	beq.n	80082c6 <_printf_i+0xd2>
 80082c4:	3702      	adds	r7, #2
 80082c6:	0023      	movs	r3, r4
 80082c8:	2200      	movs	r2, #0
 80082ca:	3343      	adds	r3, #67	; 0x43
 80082cc:	701a      	strb	r2, [r3, #0]
 80082ce:	6863      	ldr	r3, [r4, #4]
 80082d0:	60a3      	str	r3, [r4, #8]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	db03      	blt.n	80082de <_printf_i+0xea>
 80082d6:	2104      	movs	r1, #4
 80082d8:	6822      	ldr	r2, [r4, #0]
 80082da:	438a      	bics	r2, r1
 80082dc:	6022      	str	r2, [r4, #0]
 80082de:	2d00      	cmp	r5, #0
 80082e0:	d102      	bne.n	80082e8 <_printf_i+0xf4>
 80082e2:	9e04      	ldr	r6, [sp, #16]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00c      	beq.n	8008302 <_printf_i+0x10e>
 80082e8:	9e04      	ldr	r6, [sp, #16]
 80082ea:	0028      	movs	r0, r5
 80082ec:	0039      	movs	r1, r7
 80082ee:	f7f7 ff99 	bl	8000224 <__aeabi_uidivmod>
 80082f2:	9b03      	ldr	r3, [sp, #12]
 80082f4:	3e01      	subs	r6, #1
 80082f6:	5c5b      	ldrb	r3, [r3, r1]
 80082f8:	7033      	strb	r3, [r6, #0]
 80082fa:	002b      	movs	r3, r5
 80082fc:	0005      	movs	r5, r0
 80082fe:	429f      	cmp	r7, r3
 8008300:	d9f3      	bls.n	80082ea <_printf_i+0xf6>
 8008302:	2f08      	cmp	r7, #8
 8008304:	d109      	bne.n	800831a <_printf_i+0x126>
 8008306:	6823      	ldr	r3, [r4, #0]
 8008308:	07db      	lsls	r3, r3, #31
 800830a:	d506      	bpl.n	800831a <_printf_i+0x126>
 800830c:	6862      	ldr	r2, [r4, #4]
 800830e:	6923      	ldr	r3, [r4, #16]
 8008310:	429a      	cmp	r2, r3
 8008312:	dc02      	bgt.n	800831a <_printf_i+0x126>
 8008314:	2330      	movs	r3, #48	; 0x30
 8008316:	3e01      	subs	r6, #1
 8008318:	7033      	strb	r3, [r6, #0]
 800831a:	9b04      	ldr	r3, [sp, #16]
 800831c:	1b9b      	subs	r3, r3, r6
 800831e:	6123      	str	r3, [r4, #16]
 8008320:	9b07      	ldr	r3, [sp, #28]
 8008322:	0021      	movs	r1, r4
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	9805      	ldr	r0, [sp, #20]
 8008328:	9b06      	ldr	r3, [sp, #24]
 800832a:	aa09      	add	r2, sp, #36	; 0x24
 800832c:	f7ff fef2 	bl	8008114 <_printf_common>
 8008330:	3001      	adds	r0, #1
 8008332:	d147      	bne.n	80083c4 <_printf_i+0x1d0>
 8008334:	2001      	movs	r0, #1
 8008336:	4240      	negs	r0, r0
 8008338:	b00b      	add	sp, #44	; 0x2c
 800833a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800833c:	2220      	movs	r2, #32
 800833e:	6809      	ldr	r1, [r1, #0]
 8008340:	430a      	orrs	r2, r1
 8008342:	6022      	str	r2, [r4, #0]
 8008344:	2278      	movs	r2, #120	; 0x78
 8008346:	4932      	ldr	r1, [pc, #200]	; (8008410 <_printf_i+0x21c>)
 8008348:	9103      	str	r1, [sp, #12]
 800834a:	0021      	movs	r1, r4
 800834c:	3145      	adds	r1, #69	; 0x45
 800834e:	700a      	strb	r2, [r1, #0]
 8008350:	6819      	ldr	r1, [r3, #0]
 8008352:	6822      	ldr	r2, [r4, #0]
 8008354:	c920      	ldmia	r1!, {r5}
 8008356:	0610      	lsls	r0, r2, #24
 8008358:	d402      	bmi.n	8008360 <_printf_i+0x16c>
 800835a:	0650      	lsls	r0, r2, #25
 800835c:	d500      	bpl.n	8008360 <_printf_i+0x16c>
 800835e:	b2ad      	uxth	r5, r5
 8008360:	6019      	str	r1, [r3, #0]
 8008362:	07d3      	lsls	r3, r2, #31
 8008364:	d502      	bpl.n	800836c <_printf_i+0x178>
 8008366:	2320      	movs	r3, #32
 8008368:	4313      	orrs	r3, r2
 800836a:	6023      	str	r3, [r4, #0]
 800836c:	2710      	movs	r7, #16
 800836e:	2d00      	cmp	r5, #0
 8008370:	d1a9      	bne.n	80082c6 <_printf_i+0xd2>
 8008372:	2220      	movs	r2, #32
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	4393      	bics	r3, r2
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	e7a4      	b.n	80082c6 <_printf_i+0xd2>
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	680d      	ldr	r5, [r1, #0]
 8008380:	1d10      	adds	r0, r2, #4
 8008382:	6949      	ldr	r1, [r1, #20]
 8008384:	6018      	str	r0, [r3, #0]
 8008386:	6813      	ldr	r3, [r2, #0]
 8008388:	062e      	lsls	r6, r5, #24
 800838a:	d501      	bpl.n	8008390 <_printf_i+0x19c>
 800838c:	6019      	str	r1, [r3, #0]
 800838e:	e002      	b.n	8008396 <_printf_i+0x1a2>
 8008390:	066d      	lsls	r5, r5, #25
 8008392:	d5fb      	bpl.n	800838c <_printf_i+0x198>
 8008394:	8019      	strh	r1, [r3, #0]
 8008396:	2300      	movs	r3, #0
 8008398:	9e04      	ldr	r6, [sp, #16]
 800839a:	6123      	str	r3, [r4, #16]
 800839c:	e7c0      	b.n	8008320 <_printf_i+0x12c>
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	1d11      	adds	r1, r2, #4
 80083a2:	6019      	str	r1, [r3, #0]
 80083a4:	6816      	ldr	r6, [r2, #0]
 80083a6:	2100      	movs	r1, #0
 80083a8:	0030      	movs	r0, r6
 80083aa:	6862      	ldr	r2, [r4, #4]
 80083ac:	f000 f844 	bl	8008438 <memchr>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	d001      	beq.n	80083b8 <_printf_i+0x1c4>
 80083b4:	1b80      	subs	r0, r0, r6
 80083b6:	6060      	str	r0, [r4, #4]
 80083b8:	6863      	ldr	r3, [r4, #4]
 80083ba:	6123      	str	r3, [r4, #16]
 80083bc:	2300      	movs	r3, #0
 80083be:	9a04      	ldr	r2, [sp, #16]
 80083c0:	7013      	strb	r3, [r2, #0]
 80083c2:	e7ad      	b.n	8008320 <_printf_i+0x12c>
 80083c4:	0032      	movs	r2, r6
 80083c6:	6923      	ldr	r3, [r4, #16]
 80083c8:	9906      	ldr	r1, [sp, #24]
 80083ca:	9805      	ldr	r0, [sp, #20]
 80083cc:	9d07      	ldr	r5, [sp, #28]
 80083ce:	47a8      	blx	r5
 80083d0:	3001      	adds	r0, #1
 80083d2:	d0af      	beq.n	8008334 <_printf_i+0x140>
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	079b      	lsls	r3, r3, #30
 80083d8:	d415      	bmi.n	8008406 <_printf_i+0x212>
 80083da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083dc:	68e0      	ldr	r0, [r4, #12]
 80083de:	4298      	cmp	r0, r3
 80083e0:	daaa      	bge.n	8008338 <_printf_i+0x144>
 80083e2:	0018      	movs	r0, r3
 80083e4:	e7a8      	b.n	8008338 <_printf_i+0x144>
 80083e6:	0022      	movs	r2, r4
 80083e8:	2301      	movs	r3, #1
 80083ea:	9906      	ldr	r1, [sp, #24]
 80083ec:	9805      	ldr	r0, [sp, #20]
 80083ee:	9e07      	ldr	r6, [sp, #28]
 80083f0:	3219      	adds	r2, #25
 80083f2:	47b0      	blx	r6
 80083f4:	3001      	adds	r0, #1
 80083f6:	d09d      	beq.n	8008334 <_printf_i+0x140>
 80083f8:	3501      	adds	r5, #1
 80083fa:	68e3      	ldr	r3, [r4, #12]
 80083fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083fe:	1a9b      	subs	r3, r3, r2
 8008400:	42ab      	cmp	r3, r5
 8008402:	dcf0      	bgt.n	80083e6 <_printf_i+0x1f2>
 8008404:	e7e9      	b.n	80083da <_printf_i+0x1e6>
 8008406:	2500      	movs	r5, #0
 8008408:	e7f7      	b.n	80083fa <_printf_i+0x206>
 800840a:	46c0      	nop			; (mov r8, r8)
 800840c:	0800932d 	.word	0x0800932d
 8008410:	0800933e 	.word	0x0800933e

08008414 <_sbrk_r>:
 8008414:	2300      	movs	r3, #0
 8008416:	b570      	push	{r4, r5, r6, lr}
 8008418:	4d06      	ldr	r5, [pc, #24]	; (8008434 <_sbrk_r+0x20>)
 800841a:	0004      	movs	r4, r0
 800841c:	0008      	movs	r0, r1
 800841e:	602b      	str	r3, [r5, #0]
 8008420:	f7ff f9ec 	bl	80077fc <_sbrk>
 8008424:	1c43      	adds	r3, r0, #1
 8008426:	d103      	bne.n	8008430 <_sbrk_r+0x1c>
 8008428:	682b      	ldr	r3, [r5, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d000      	beq.n	8008430 <_sbrk_r+0x1c>
 800842e:	6023      	str	r3, [r4, #0]
 8008430:	bd70      	pop	{r4, r5, r6, pc}
 8008432:	46c0      	nop			; (mov r8, r8)
 8008434:	20000780 	.word	0x20000780

08008438 <memchr>:
 8008438:	b2c9      	uxtb	r1, r1
 800843a:	1882      	adds	r2, r0, r2
 800843c:	4290      	cmp	r0, r2
 800843e:	d101      	bne.n	8008444 <memchr+0xc>
 8008440:	2000      	movs	r0, #0
 8008442:	4770      	bx	lr
 8008444:	7803      	ldrb	r3, [r0, #0]
 8008446:	428b      	cmp	r3, r1
 8008448:	d0fb      	beq.n	8008442 <memchr+0xa>
 800844a:	3001      	adds	r0, #1
 800844c:	e7f6      	b.n	800843c <memchr+0x4>

0800844e <_realloc_r>:
 800844e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008450:	0007      	movs	r7, r0
 8008452:	000e      	movs	r6, r1
 8008454:	0014      	movs	r4, r2
 8008456:	2900      	cmp	r1, #0
 8008458:	d105      	bne.n	8008466 <_realloc_r+0x18>
 800845a:	0011      	movs	r1, r2
 800845c:	f7ff fc66 	bl	8007d2c <_malloc_r>
 8008460:	0005      	movs	r5, r0
 8008462:	0028      	movs	r0, r5
 8008464:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008466:	2a00      	cmp	r2, #0
 8008468:	d103      	bne.n	8008472 <_realloc_r+0x24>
 800846a:	f7ff fbf3 	bl	8007c54 <_free_r>
 800846e:	0025      	movs	r5, r4
 8008470:	e7f7      	b.n	8008462 <_realloc_r+0x14>
 8008472:	f000 f81b 	bl	80084ac <_malloc_usable_size_r>
 8008476:	9001      	str	r0, [sp, #4]
 8008478:	4284      	cmp	r4, r0
 800847a:	d803      	bhi.n	8008484 <_realloc_r+0x36>
 800847c:	0035      	movs	r5, r6
 800847e:	0843      	lsrs	r3, r0, #1
 8008480:	42a3      	cmp	r3, r4
 8008482:	d3ee      	bcc.n	8008462 <_realloc_r+0x14>
 8008484:	0021      	movs	r1, r4
 8008486:	0038      	movs	r0, r7
 8008488:	f7ff fc50 	bl	8007d2c <_malloc_r>
 800848c:	1e05      	subs	r5, r0, #0
 800848e:	d0e8      	beq.n	8008462 <_realloc_r+0x14>
 8008490:	9b01      	ldr	r3, [sp, #4]
 8008492:	0022      	movs	r2, r4
 8008494:	429c      	cmp	r4, r3
 8008496:	d900      	bls.n	800849a <_realloc_r+0x4c>
 8008498:	001a      	movs	r2, r3
 800849a:	0031      	movs	r1, r6
 800849c:	0028      	movs	r0, r5
 800849e:	f7ff fbcf 	bl	8007c40 <memcpy>
 80084a2:	0031      	movs	r1, r6
 80084a4:	0038      	movs	r0, r7
 80084a6:	f7ff fbd5 	bl	8007c54 <_free_r>
 80084aa:	e7da      	b.n	8008462 <_realloc_r+0x14>

080084ac <_malloc_usable_size_r>:
 80084ac:	1f0b      	subs	r3, r1, #4
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	1f18      	subs	r0, r3, #4
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	da01      	bge.n	80084ba <_malloc_usable_size_r+0xe>
 80084b6:	580b      	ldr	r3, [r1, r0]
 80084b8:	18c0      	adds	r0, r0, r3
 80084ba:	4770      	bx	lr

080084bc <_init>:
 80084bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084be:	46c0      	nop			; (mov r8, r8)
 80084c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c2:	bc08      	pop	{r3}
 80084c4:	469e      	mov	lr, r3
 80084c6:	4770      	bx	lr

080084c8 <_fini>:
 80084c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ca:	46c0      	nop			; (mov r8, r8)
 80084cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ce:	bc08      	pop	{r3}
 80084d0:	469e      	mov	lr, r3
 80084d2:	4770      	bx	lr
