
pulsar-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042b8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004374  08004374  00014374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004408  08004408  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004408  08004408  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004408  08004408  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004408  08004408  00014408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800440c  0800440c  0001440c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  0800441c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  0800441c  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bf49  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d89  00000000  00000000  0002bfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  0002dd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a3b  00000000  00000000  0002ea90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001850e  00000000  00000000  0002f4cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d49c  00000000  00000000  000479d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1536  00000000  00000000  00054e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031a8  00000000  00000000  000f63ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f9554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800435c 	.word	0x0800435c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800435c 	.word	0x0800435c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_d2uiz>:
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	2200      	movs	r2, #0
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__aeabi_d2uiz+0x38>)
 8000222:	0004      	movs	r4, r0
 8000224:	000d      	movs	r5, r1
 8000226:	f000 feeb 	bl	8001000 <__aeabi_dcmpge>
 800022a:	2800      	cmp	r0, #0
 800022c:	d104      	bne.n	8000238 <__aeabi_d2uiz+0x1c>
 800022e:	0020      	movs	r0, r4
 8000230:	0029      	movs	r1, r5
 8000232:	f000 fe55 	bl	8000ee0 <__aeabi_d2iz>
 8000236:	bd70      	pop	{r4, r5, r6, pc}
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <__aeabi_d2uiz+0x38>)
 800023a:	2200      	movs	r2, #0
 800023c:	0020      	movs	r0, r4
 800023e:	0029      	movs	r1, r5
 8000240:	f000 facc 	bl	80007dc <__aeabi_dsub>
 8000244:	f000 fe4c 	bl	8000ee0 <__aeabi_d2iz>
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	061b      	lsls	r3, r3, #24
 800024c:	469c      	mov	ip, r3
 800024e:	4460      	add	r0, ip
 8000250:	e7f1      	b.n	8000236 <__aeabi_d2uiz+0x1a>
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	41e00000 	.word	0x41e00000

08000258 <__aeabi_dmul>:
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025a:	4645      	mov	r5, r8
 800025c:	46de      	mov	lr, fp
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	b5e0      	push	{r5, r6, r7, lr}
 8000264:	001f      	movs	r7, r3
 8000266:	030b      	lsls	r3, r1, #12
 8000268:	0b1b      	lsrs	r3, r3, #12
 800026a:	469b      	mov	fp, r3
 800026c:	004d      	lsls	r5, r1, #1
 800026e:	0fcb      	lsrs	r3, r1, #31
 8000270:	0004      	movs	r4, r0
 8000272:	4691      	mov	r9, r2
 8000274:	4698      	mov	r8, r3
 8000276:	b087      	sub	sp, #28
 8000278:	0d6d      	lsrs	r5, r5, #21
 800027a:	d100      	bne.n	800027e <__aeabi_dmul+0x26>
 800027c:	e1cd      	b.n	800061a <__aeabi_dmul+0x3c2>
 800027e:	4bce      	ldr	r3, [pc, #824]	; (80005b8 <__aeabi_dmul+0x360>)
 8000280:	429d      	cmp	r5, r3
 8000282:	d100      	bne.n	8000286 <__aeabi_dmul+0x2e>
 8000284:	e1e9      	b.n	800065a <__aeabi_dmul+0x402>
 8000286:	465a      	mov	r2, fp
 8000288:	0f43      	lsrs	r3, r0, #29
 800028a:	00d2      	lsls	r2, r2, #3
 800028c:	4313      	orrs	r3, r2
 800028e:	2280      	movs	r2, #128	; 0x80
 8000290:	0412      	lsls	r2, r2, #16
 8000292:	431a      	orrs	r2, r3
 8000294:	00c3      	lsls	r3, r0, #3
 8000296:	469a      	mov	sl, r3
 8000298:	4bc8      	ldr	r3, [pc, #800]	; (80005bc <__aeabi_dmul+0x364>)
 800029a:	4693      	mov	fp, r2
 800029c:	469c      	mov	ip, r3
 800029e:	2300      	movs	r3, #0
 80002a0:	2600      	movs	r6, #0
 80002a2:	4465      	add	r5, ip
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	033c      	lsls	r4, r7, #12
 80002a8:	007b      	lsls	r3, r7, #1
 80002aa:	4648      	mov	r0, r9
 80002ac:	0b24      	lsrs	r4, r4, #12
 80002ae:	0d5b      	lsrs	r3, r3, #21
 80002b0:	0fff      	lsrs	r7, r7, #31
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d100      	bne.n	80002b8 <__aeabi_dmul+0x60>
 80002b6:	e189      	b.n	80005cc <__aeabi_dmul+0x374>
 80002b8:	4abf      	ldr	r2, [pc, #764]	; (80005b8 <__aeabi_dmul+0x360>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d019      	beq.n	80002f2 <__aeabi_dmul+0x9a>
 80002be:	0f42      	lsrs	r2, r0, #29
 80002c0:	00e4      	lsls	r4, r4, #3
 80002c2:	4322      	orrs	r2, r4
 80002c4:	2480      	movs	r4, #128	; 0x80
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	4314      	orrs	r4, r2
 80002ca:	4abc      	ldr	r2, [pc, #752]	; (80005bc <__aeabi_dmul+0x364>)
 80002cc:	2100      	movs	r1, #0
 80002ce:	4694      	mov	ip, r2
 80002d0:	4642      	mov	r2, r8
 80002d2:	4463      	add	r3, ip
 80002d4:	195b      	adds	r3, r3, r5
 80002d6:	9301      	str	r3, [sp, #4]
 80002d8:	9b01      	ldr	r3, [sp, #4]
 80002da:	407a      	eors	r2, r7
 80002dc:	3301      	adds	r3, #1
 80002de:	00c0      	lsls	r0, r0, #3
 80002e0:	b2d2      	uxtb	r2, r2
 80002e2:	9302      	str	r3, [sp, #8]
 80002e4:	2e0a      	cmp	r6, #10
 80002e6:	dd1c      	ble.n	8000322 <__aeabi_dmul+0xca>
 80002e8:	003a      	movs	r2, r7
 80002ea:	2e0b      	cmp	r6, #11
 80002ec:	d05e      	beq.n	80003ac <__aeabi_dmul+0x154>
 80002ee:	4647      	mov	r7, r8
 80002f0:	e056      	b.n	80003a0 <__aeabi_dmul+0x148>
 80002f2:	4649      	mov	r1, r9
 80002f4:	4bb0      	ldr	r3, [pc, #704]	; (80005b8 <__aeabi_dmul+0x360>)
 80002f6:	4321      	orrs	r1, r4
 80002f8:	18eb      	adds	r3, r5, r3
 80002fa:	9301      	str	r3, [sp, #4]
 80002fc:	2900      	cmp	r1, #0
 80002fe:	d12a      	bne.n	8000356 <__aeabi_dmul+0xfe>
 8000300:	2080      	movs	r0, #128	; 0x80
 8000302:	2202      	movs	r2, #2
 8000304:	0100      	lsls	r0, r0, #4
 8000306:	002b      	movs	r3, r5
 8000308:	4684      	mov	ip, r0
 800030a:	4316      	orrs	r6, r2
 800030c:	4642      	mov	r2, r8
 800030e:	4463      	add	r3, ip
 8000310:	407a      	eors	r2, r7
 8000312:	b2d2      	uxtb	r2, r2
 8000314:	9302      	str	r3, [sp, #8]
 8000316:	2e0a      	cmp	r6, #10
 8000318:	dd00      	ble.n	800031c <__aeabi_dmul+0xc4>
 800031a:	e231      	b.n	8000780 <__aeabi_dmul+0x528>
 800031c:	2000      	movs	r0, #0
 800031e:	2400      	movs	r4, #0
 8000320:	2102      	movs	r1, #2
 8000322:	2e02      	cmp	r6, #2
 8000324:	dc26      	bgt.n	8000374 <__aeabi_dmul+0x11c>
 8000326:	3e01      	subs	r6, #1
 8000328:	2e01      	cmp	r6, #1
 800032a:	d852      	bhi.n	80003d2 <__aeabi_dmul+0x17a>
 800032c:	2902      	cmp	r1, #2
 800032e:	d04c      	beq.n	80003ca <__aeabi_dmul+0x172>
 8000330:	2901      	cmp	r1, #1
 8000332:	d000      	beq.n	8000336 <__aeabi_dmul+0xde>
 8000334:	e118      	b.n	8000568 <__aeabi_dmul+0x310>
 8000336:	2300      	movs	r3, #0
 8000338:	2400      	movs	r4, #0
 800033a:	2500      	movs	r5, #0
 800033c:	051b      	lsls	r3, r3, #20
 800033e:	4323      	orrs	r3, r4
 8000340:	07d2      	lsls	r2, r2, #31
 8000342:	4313      	orrs	r3, r2
 8000344:	0028      	movs	r0, r5
 8000346:	0019      	movs	r1, r3
 8000348:	b007      	add	sp, #28
 800034a:	bcf0      	pop	{r4, r5, r6, r7}
 800034c:	46bb      	mov	fp, r7
 800034e:	46b2      	mov	sl, r6
 8000350:	46a9      	mov	r9, r5
 8000352:	46a0      	mov	r8, r4
 8000354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000356:	2180      	movs	r1, #128	; 0x80
 8000358:	2203      	movs	r2, #3
 800035a:	0109      	lsls	r1, r1, #4
 800035c:	002b      	movs	r3, r5
 800035e:	468c      	mov	ip, r1
 8000360:	4316      	orrs	r6, r2
 8000362:	4642      	mov	r2, r8
 8000364:	4463      	add	r3, ip
 8000366:	407a      	eors	r2, r7
 8000368:	b2d2      	uxtb	r2, r2
 800036a:	9302      	str	r3, [sp, #8]
 800036c:	2e0a      	cmp	r6, #10
 800036e:	dd00      	ble.n	8000372 <__aeabi_dmul+0x11a>
 8000370:	e228      	b.n	80007c4 <__aeabi_dmul+0x56c>
 8000372:	2103      	movs	r1, #3
 8000374:	2501      	movs	r5, #1
 8000376:	40b5      	lsls	r5, r6
 8000378:	46ac      	mov	ip, r5
 800037a:	26a6      	movs	r6, #166	; 0xa6
 800037c:	4663      	mov	r3, ip
 800037e:	00f6      	lsls	r6, r6, #3
 8000380:	4035      	ands	r5, r6
 8000382:	4233      	tst	r3, r6
 8000384:	d10b      	bne.n	800039e <__aeabi_dmul+0x146>
 8000386:	2690      	movs	r6, #144	; 0x90
 8000388:	00b6      	lsls	r6, r6, #2
 800038a:	4233      	tst	r3, r6
 800038c:	d118      	bne.n	80003c0 <__aeabi_dmul+0x168>
 800038e:	3eb9      	subs	r6, #185	; 0xb9
 8000390:	3eff      	subs	r6, #255	; 0xff
 8000392:	421e      	tst	r6, r3
 8000394:	d01d      	beq.n	80003d2 <__aeabi_dmul+0x17a>
 8000396:	46a3      	mov	fp, r4
 8000398:	4682      	mov	sl, r0
 800039a:	9100      	str	r1, [sp, #0]
 800039c:	e000      	b.n	80003a0 <__aeabi_dmul+0x148>
 800039e:	0017      	movs	r7, r2
 80003a0:	9900      	ldr	r1, [sp, #0]
 80003a2:	003a      	movs	r2, r7
 80003a4:	2902      	cmp	r1, #2
 80003a6:	d010      	beq.n	80003ca <__aeabi_dmul+0x172>
 80003a8:	465c      	mov	r4, fp
 80003aa:	4650      	mov	r0, sl
 80003ac:	2903      	cmp	r1, #3
 80003ae:	d1bf      	bne.n	8000330 <__aeabi_dmul+0xd8>
 80003b0:	2380      	movs	r3, #128	; 0x80
 80003b2:	031b      	lsls	r3, r3, #12
 80003b4:	431c      	orrs	r4, r3
 80003b6:	0324      	lsls	r4, r4, #12
 80003b8:	0005      	movs	r5, r0
 80003ba:	4b7f      	ldr	r3, [pc, #508]	; (80005b8 <__aeabi_dmul+0x360>)
 80003bc:	0b24      	lsrs	r4, r4, #12
 80003be:	e7bd      	b.n	800033c <__aeabi_dmul+0xe4>
 80003c0:	2480      	movs	r4, #128	; 0x80
 80003c2:	2200      	movs	r2, #0
 80003c4:	4b7c      	ldr	r3, [pc, #496]	; (80005b8 <__aeabi_dmul+0x360>)
 80003c6:	0324      	lsls	r4, r4, #12
 80003c8:	e7b8      	b.n	800033c <__aeabi_dmul+0xe4>
 80003ca:	2400      	movs	r4, #0
 80003cc:	2500      	movs	r5, #0
 80003ce:	4b7a      	ldr	r3, [pc, #488]	; (80005b8 <__aeabi_dmul+0x360>)
 80003d0:	e7b4      	b.n	800033c <__aeabi_dmul+0xe4>
 80003d2:	4653      	mov	r3, sl
 80003d4:	041e      	lsls	r6, r3, #16
 80003d6:	0c36      	lsrs	r6, r6, #16
 80003d8:	0c1f      	lsrs	r7, r3, #16
 80003da:	0033      	movs	r3, r6
 80003dc:	0c01      	lsrs	r1, r0, #16
 80003de:	0400      	lsls	r0, r0, #16
 80003e0:	0c00      	lsrs	r0, r0, #16
 80003e2:	4343      	muls	r3, r0
 80003e4:	4698      	mov	r8, r3
 80003e6:	0003      	movs	r3, r0
 80003e8:	437b      	muls	r3, r7
 80003ea:	4699      	mov	r9, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	434b      	muls	r3, r1
 80003f0:	469c      	mov	ip, r3
 80003f2:	4643      	mov	r3, r8
 80003f4:	000d      	movs	r5, r1
 80003f6:	0c1b      	lsrs	r3, r3, #16
 80003f8:	469a      	mov	sl, r3
 80003fa:	437d      	muls	r5, r7
 80003fc:	44cc      	add	ip, r9
 80003fe:	44d4      	add	ip, sl
 8000400:	9500      	str	r5, [sp, #0]
 8000402:	45e1      	cmp	r9, ip
 8000404:	d904      	bls.n	8000410 <__aeabi_dmul+0x1b8>
 8000406:	2380      	movs	r3, #128	; 0x80
 8000408:	025b      	lsls	r3, r3, #9
 800040a:	4699      	mov	r9, r3
 800040c:	444d      	add	r5, r9
 800040e:	9500      	str	r5, [sp, #0]
 8000410:	4663      	mov	r3, ip
 8000412:	0c1b      	lsrs	r3, r3, #16
 8000414:	001d      	movs	r5, r3
 8000416:	4663      	mov	r3, ip
 8000418:	041b      	lsls	r3, r3, #16
 800041a:	469c      	mov	ip, r3
 800041c:	4643      	mov	r3, r8
 800041e:	041b      	lsls	r3, r3, #16
 8000420:	0c1b      	lsrs	r3, r3, #16
 8000422:	4698      	mov	r8, r3
 8000424:	4663      	mov	r3, ip
 8000426:	4443      	add	r3, r8
 8000428:	9303      	str	r3, [sp, #12]
 800042a:	0c23      	lsrs	r3, r4, #16
 800042c:	4698      	mov	r8, r3
 800042e:	0033      	movs	r3, r6
 8000430:	0424      	lsls	r4, r4, #16
 8000432:	0c24      	lsrs	r4, r4, #16
 8000434:	4363      	muls	r3, r4
 8000436:	469c      	mov	ip, r3
 8000438:	0023      	movs	r3, r4
 800043a:	437b      	muls	r3, r7
 800043c:	4699      	mov	r9, r3
 800043e:	4643      	mov	r3, r8
 8000440:	435e      	muls	r6, r3
 8000442:	435f      	muls	r7, r3
 8000444:	444e      	add	r6, r9
 8000446:	4663      	mov	r3, ip
 8000448:	46b2      	mov	sl, r6
 800044a:	0c1e      	lsrs	r6, r3, #16
 800044c:	4456      	add	r6, sl
 800044e:	45b1      	cmp	r9, r6
 8000450:	d903      	bls.n	800045a <__aeabi_dmul+0x202>
 8000452:	2380      	movs	r3, #128	; 0x80
 8000454:	025b      	lsls	r3, r3, #9
 8000456:	4699      	mov	r9, r3
 8000458:	444f      	add	r7, r9
 800045a:	0c33      	lsrs	r3, r6, #16
 800045c:	4699      	mov	r9, r3
 800045e:	003b      	movs	r3, r7
 8000460:	444b      	add	r3, r9
 8000462:	9305      	str	r3, [sp, #20]
 8000464:	4663      	mov	r3, ip
 8000466:	46ac      	mov	ip, r5
 8000468:	041f      	lsls	r7, r3, #16
 800046a:	0c3f      	lsrs	r7, r7, #16
 800046c:	0436      	lsls	r6, r6, #16
 800046e:	19f6      	adds	r6, r6, r7
 8000470:	44b4      	add	ip, r6
 8000472:	4663      	mov	r3, ip
 8000474:	9304      	str	r3, [sp, #16]
 8000476:	465b      	mov	r3, fp
 8000478:	0c1b      	lsrs	r3, r3, #16
 800047a:	469c      	mov	ip, r3
 800047c:	465b      	mov	r3, fp
 800047e:	041f      	lsls	r7, r3, #16
 8000480:	0c3f      	lsrs	r7, r7, #16
 8000482:	003b      	movs	r3, r7
 8000484:	4343      	muls	r3, r0
 8000486:	4699      	mov	r9, r3
 8000488:	4663      	mov	r3, ip
 800048a:	4343      	muls	r3, r0
 800048c:	469a      	mov	sl, r3
 800048e:	464b      	mov	r3, r9
 8000490:	4660      	mov	r0, ip
 8000492:	0c1b      	lsrs	r3, r3, #16
 8000494:	469b      	mov	fp, r3
 8000496:	4348      	muls	r0, r1
 8000498:	4379      	muls	r1, r7
 800049a:	4451      	add	r1, sl
 800049c:	4459      	add	r1, fp
 800049e:	458a      	cmp	sl, r1
 80004a0:	d903      	bls.n	80004aa <__aeabi_dmul+0x252>
 80004a2:	2380      	movs	r3, #128	; 0x80
 80004a4:	025b      	lsls	r3, r3, #9
 80004a6:	469a      	mov	sl, r3
 80004a8:	4450      	add	r0, sl
 80004aa:	0c0b      	lsrs	r3, r1, #16
 80004ac:	469a      	mov	sl, r3
 80004ae:	464b      	mov	r3, r9
 80004b0:	041b      	lsls	r3, r3, #16
 80004b2:	0c1b      	lsrs	r3, r3, #16
 80004b4:	4699      	mov	r9, r3
 80004b6:	003b      	movs	r3, r7
 80004b8:	4363      	muls	r3, r4
 80004ba:	0409      	lsls	r1, r1, #16
 80004bc:	4645      	mov	r5, r8
 80004be:	4449      	add	r1, r9
 80004c0:	4699      	mov	r9, r3
 80004c2:	4663      	mov	r3, ip
 80004c4:	435c      	muls	r4, r3
 80004c6:	436b      	muls	r3, r5
 80004c8:	469c      	mov	ip, r3
 80004ca:	464b      	mov	r3, r9
 80004cc:	0c1b      	lsrs	r3, r3, #16
 80004ce:	4698      	mov	r8, r3
 80004d0:	436f      	muls	r7, r5
 80004d2:	193f      	adds	r7, r7, r4
 80004d4:	4447      	add	r7, r8
 80004d6:	4450      	add	r0, sl
 80004d8:	42bc      	cmp	r4, r7
 80004da:	d903      	bls.n	80004e4 <__aeabi_dmul+0x28c>
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	025b      	lsls	r3, r3, #9
 80004e0:	4698      	mov	r8, r3
 80004e2:	44c4      	add	ip, r8
 80004e4:	9b04      	ldr	r3, [sp, #16]
 80004e6:	9d00      	ldr	r5, [sp, #0]
 80004e8:	4698      	mov	r8, r3
 80004ea:	4445      	add	r5, r8
 80004ec:	42b5      	cmp	r5, r6
 80004ee:	41b6      	sbcs	r6, r6
 80004f0:	4273      	negs	r3, r6
 80004f2:	4698      	mov	r8, r3
 80004f4:	464b      	mov	r3, r9
 80004f6:	041e      	lsls	r6, r3, #16
 80004f8:	9b05      	ldr	r3, [sp, #20]
 80004fa:	043c      	lsls	r4, r7, #16
 80004fc:	4699      	mov	r9, r3
 80004fe:	0c36      	lsrs	r6, r6, #16
 8000500:	19a4      	adds	r4, r4, r6
 8000502:	444c      	add	r4, r9
 8000504:	46a1      	mov	r9, r4
 8000506:	4683      	mov	fp, r0
 8000508:	186e      	adds	r6, r5, r1
 800050a:	44c1      	add	r9, r8
 800050c:	428e      	cmp	r6, r1
 800050e:	4189      	sbcs	r1, r1
 8000510:	44cb      	add	fp, r9
 8000512:	465d      	mov	r5, fp
 8000514:	4249      	negs	r1, r1
 8000516:	186d      	adds	r5, r5, r1
 8000518:	429c      	cmp	r4, r3
 800051a:	41a4      	sbcs	r4, r4
 800051c:	45c1      	cmp	r9, r8
 800051e:	419b      	sbcs	r3, r3
 8000520:	4583      	cmp	fp, r0
 8000522:	4180      	sbcs	r0, r0
 8000524:	428d      	cmp	r5, r1
 8000526:	4189      	sbcs	r1, r1
 8000528:	425b      	negs	r3, r3
 800052a:	4264      	negs	r4, r4
 800052c:	431c      	orrs	r4, r3
 800052e:	4240      	negs	r0, r0
 8000530:	9b03      	ldr	r3, [sp, #12]
 8000532:	4249      	negs	r1, r1
 8000534:	4301      	orrs	r1, r0
 8000536:	0270      	lsls	r0, r6, #9
 8000538:	0c3f      	lsrs	r7, r7, #16
 800053a:	4318      	orrs	r0, r3
 800053c:	19e4      	adds	r4, r4, r7
 800053e:	1e47      	subs	r7, r0, #1
 8000540:	41b8      	sbcs	r0, r7
 8000542:	1864      	adds	r4, r4, r1
 8000544:	4464      	add	r4, ip
 8000546:	0df6      	lsrs	r6, r6, #23
 8000548:	0261      	lsls	r1, r4, #9
 800054a:	4330      	orrs	r0, r6
 800054c:	0dec      	lsrs	r4, r5, #23
 800054e:	026e      	lsls	r6, r5, #9
 8000550:	430c      	orrs	r4, r1
 8000552:	4330      	orrs	r0, r6
 8000554:	01c9      	lsls	r1, r1, #7
 8000556:	d400      	bmi.n	800055a <__aeabi_dmul+0x302>
 8000558:	e0f1      	b.n	800073e <__aeabi_dmul+0x4e6>
 800055a:	2101      	movs	r1, #1
 800055c:	0843      	lsrs	r3, r0, #1
 800055e:	4001      	ands	r1, r0
 8000560:	430b      	orrs	r3, r1
 8000562:	07e0      	lsls	r0, r4, #31
 8000564:	4318      	orrs	r0, r3
 8000566:	0864      	lsrs	r4, r4, #1
 8000568:	4915      	ldr	r1, [pc, #84]	; (80005c0 <__aeabi_dmul+0x368>)
 800056a:	9b02      	ldr	r3, [sp, #8]
 800056c:	468c      	mov	ip, r1
 800056e:	4463      	add	r3, ip
 8000570:	2b00      	cmp	r3, #0
 8000572:	dc00      	bgt.n	8000576 <__aeabi_dmul+0x31e>
 8000574:	e097      	b.n	80006a6 <__aeabi_dmul+0x44e>
 8000576:	0741      	lsls	r1, r0, #29
 8000578:	d009      	beq.n	800058e <__aeabi_dmul+0x336>
 800057a:	210f      	movs	r1, #15
 800057c:	4001      	ands	r1, r0
 800057e:	2904      	cmp	r1, #4
 8000580:	d005      	beq.n	800058e <__aeabi_dmul+0x336>
 8000582:	1d01      	adds	r1, r0, #4
 8000584:	4281      	cmp	r1, r0
 8000586:	4180      	sbcs	r0, r0
 8000588:	4240      	negs	r0, r0
 800058a:	1824      	adds	r4, r4, r0
 800058c:	0008      	movs	r0, r1
 800058e:	01e1      	lsls	r1, r4, #7
 8000590:	d506      	bpl.n	80005a0 <__aeabi_dmul+0x348>
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	00c9      	lsls	r1, r1, #3
 8000596:	468c      	mov	ip, r1
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <__aeabi_dmul+0x36c>)
 800059a:	401c      	ands	r4, r3
 800059c:	9b02      	ldr	r3, [sp, #8]
 800059e:	4463      	add	r3, ip
 80005a0:	4909      	ldr	r1, [pc, #36]	; (80005c8 <__aeabi_dmul+0x370>)
 80005a2:	428b      	cmp	r3, r1
 80005a4:	dd00      	ble.n	80005a8 <__aeabi_dmul+0x350>
 80005a6:	e710      	b.n	80003ca <__aeabi_dmul+0x172>
 80005a8:	0761      	lsls	r1, r4, #29
 80005aa:	08c5      	lsrs	r5, r0, #3
 80005ac:	0264      	lsls	r4, r4, #9
 80005ae:	055b      	lsls	r3, r3, #21
 80005b0:	430d      	orrs	r5, r1
 80005b2:	0b24      	lsrs	r4, r4, #12
 80005b4:	0d5b      	lsrs	r3, r3, #21
 80005b6:	e6c1      	b.n	800033c <__aeabi_dmul+0xe4>
 80005b8:	000007ff 	.word	0x000007ff
 80005bc:	fffffc01 	.word	0xfffffc01
 80005c0:	000003ff 	.word	0x000003ff
 80005c4:	feffffff 	.word	0xfeffffff
 80005c8:	000007fe 	.word	0x000007fe
 80005cc:	464b      	mov	r3, r9
 80005ce:	4323      	orrs	r3, r4
 80005d0:	d059      	beq.n	8000686 <__aeabi_dmul+0x42e>
 80005d2:	2c00      	cmp	r4, #0
 80005d4:	d100      	bne.n	80005d8 <__aeabi_dmul+0x380>
 80005d6:	e0a3      	b.n	8000720 <__aeabi_dmul+0x4c8>
 80005d8:	0020      	movs	r0, r4
 80005da:	f000 fd1b 	bl	8001014 <__clzsi2>
 80005de:	0001      	movs	r1, r0
 80005e0:	0003      	movs	r3, r0
 80005e2:	390b      	subs	r1, #11
 80005e4:	221d      	movs	r2, #29
 80005e6:	1a52      	subs	r2, r2, r1
 80005e8:	4649      	mov	r1, r9
 80005ea:	0018      	movs	r0, r3
 80005ec:	40d1      	lsrs	r1, r2
 80005ee:	464a      	mov	r2, r9
 80005f0:	3808      	subs	r0, #8
 80005f2:	4082      	lsls	r2, r0
 80005f4:	4084      	lsls	r4, r0
 80005f6:	0010      	movs	r0, r2
 80005f8:	430c      	orrs	r4, r1
 80005fa:	4a74      	ldr	r2, [pc, #464]	; (80007cc <__aeabi_dmul+0x574>)
 80005fc:	1aeb      	subs	r3, r5, r3
 80005fe:	4694      	mov	ip, r2
 8000600:	4642      	mov	r2, r8
 8000602:	4463      	add	r3, ip
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	9b01      	ldr	r3, [sp, #4]
 8000608:	407a      	eors	r2, r7
 800060a:	3301      	adds	r3, #1
 800060c:	2100      	movs	r1, #0
 800060e:	b2d2      	uxtb	r2, r2
 8000610:	9302      	str	r3, [sp, #8]
 8000612:	2e0a      	cmp	r6, #10
 8000614:	dd00      	ble.n	8000618 <__aeabi_dmul+0x3c0>
 8000616:	e667      	b.n	80002e8 <__aeabi_dmul+0x90>
 8000618:	e683      	b.n	8000322 <__aeabi_dmul+0xca>
 800061a:	465b      	mov	r3, fp
 800061c:	4303      	orrs	r3, r0
 800061e:	469a      	mov	sl, r3
 8000620:	d02a      	beq.n	8000678 <__aeabi_dmul+0x420>
 8000622:	465b      	mov	r3, fp
 8000624:	2b00      	cmp	r3, #0
 8000626:	d06d      	beq.n	8000704 <__aeabi_dmul+0x4ac>
 8000628:	4658      	mov	r0, fp
 800062a:	f000 fcf3 	bl	8001014 <__clzsi2>
 800062e:	0001      	movs	r1, r0
 8000630:	0003      	movs	r3, r0
 8000632:	390b      	subs	r1, #11
 8000634:	221d      	movs	r2, #29
 8000636:	1a52      	subs	r2, r2, r1
 8000638:	0021      	movs	r1, r4
 800063a:	0018      	movs	r0, r3
 800063c:	465d      	mov	r5, fp
 800063e:	40d1      	lsrs	r1, r2
 8000640:	3808      	subs	r0, #8
 8000642:	4085      	lsls	r5, r0
 8000644:	000a      	movs	r2, r1
 8000646:	4084      	lsls	r4, r0
 8000648:	432a      	orrs	r2, r5
 800064a:	4693      	mov	fp, r2
 800064c:	46a2      	mov	sl, r4
 800064e:	4d5f      	ldr	r5, [pc, #380]	; (80007cc <__aeabi_dmul+0x574>)
 8000650:	2600      	movs	r6, #0
 8000652:	1aed      	subs	r5, r5, r3
 8000654:	2300      	movs	r3, #0
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	e625      	b.n	80002a6 <__aeabi_dmul+0x4e>
 800065a:	465b      	mov	r3, fp
 800065c:	4303      	orrs	r3, r0
 800065e:	469a      	mov	sl, r3
 8000660:	d105      	bne.n	800066e <__aeabi_dmul+0x416>
 8000662:	2300      	movs	r3, #0
 8000664:	469b      	mov	fp, r3
 8000666:	3302      	adds	r3, #2
 8000668:	2608      	movs	r6, #8
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	e61b      	b.n	80002a6 <__aeabi_dmul+0x4e>
 800066e:	2303      	movs	r3, #3
 8000670:	4682      	mov	sl, r0
 8000672:	260c      	movs	r6, #12
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	e616      	b.n	80002a6 <__aeabi_dmul+0x4e>
 8000678:	2300      	movs	r3, #0
 800067a:	469b      	mov	fp, r3
 800067c:	3301      	adds	r3, #1
 800067e:	2604      	movs	r6, #4
 8000680:	2500      	movs	r5, #0
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	e60f      	b.n	80002a6 <__aeabi_dmul+0x4e>
 8000686:	4642      	mov	r2, r8
 8000688:	3301      	adds	r3, #1
 800068a:	9501      	str	r5, [sp, #4]
 800068c:	431e      	orrs	r6, r3
 800068e:	9b01      	ldr	r3, [sp, #4]
 8000690:	407a      	eors	r2, r7
 8000692:	3301      	adds	r3, #1
 8000694:	2400      	movs	r4, #0
 8000696:	2000      	movs	r0, #0
 8000698:	2101      	movs	r1, #1
 800069a:	b2d2      	uxtb	r2, r2
 800069c:	9302      	str	r3, [sp, #8]
 800069e:	2e0a      	cmp	r6, #10
 80006a0:	dd00      	ble.n	80006a4 <__aeabi_dmul+0x44c>
 80006a2:	e621      	b.n	80002e8 <__aeabi_dmul+0x90>
 80006a4:	e63d      	b.n	8000322 <__aeabi_dmul+0xca>
 80006a6:	2101      	movs	r1, #1
 80006a8:	1ac9      	subs	r1, r1, r3
 80006aa:	2938      	cmp	r1, #56	; 0x38
 80006ac:	dd00      	ble.n	80006b0 <__aeabi_dmul+0x458>
 80006ae:	e642      	b.n	8000336 <__aeabi_dmul+0xde>
 80006b0:	291f      	cmp	r1, #31
 80006b2:	dd47      	ble.n	8000744 <__aeabi_dmul+0x4ec>
 80006b4:	261f      	movs	r6, #31
 80006b6:	0025      	movs	r5, r4
 80006b8:	4276      	negs	r6, r6
 80006ba:	1af3      	subs	r3, r6, r3
 80006bc:	40dd      	lsrs	r5, r3
 80006be:	002b      	movs	r3, r5
 80006c0:	2920      	cmp	r1, #32
 80006c2:	d005      	beq.n	80006d0 <__aeabi_dmul+0x478>
 80006c4:	4942      	ldr	r1, [pc, #264]	; (80007d0 <__aeabi_dmul+0x578>)
 80006c6:	9d02      	ldr	r5, [sp, #8]
 80006c8:	468c      	mov	ip, r1
 80006ca:	4465      	add	r5, ip
 80006cc:	40ac      	lsls	r4, r5
 80006ce:	4320      	orrs	r0, r4
 80006d0:	1e41      	subs	r1, r0, #1
 80006d2:	4188      	sbcs	r0, r1
 80006d4:	4318      	orrs	r0, r3
 80006d6:	2307      	movs	r3, #7
 80006d8:	001d      	movs	r5, r3
 80006da:	2400      	movs	r4, #0
 80006dc:	4005      	ands	r5, r0
 80006de:	4203      	tst	r3, r0
 80006e0:	d04a      	beq.n	8000778 <__aeabi_dmul+0x520>
 80006e2:	230f      	movs	r3, #15
 80006e4:	2400      	movs	r4, #0
 80006e6:	4003      	ands	r3, r0
 80006e8:	2b04      	cmp	r3, #4
 80006ea:	d042      	beq.n	8000772 <__aeabi_dmul+0x51a>
 80006ec:	1d03      	adds	r3, r0, #4
 80006ee:	4283      	cmp	r3, r0
 80006f0:	4180      	sbcs	r0, r0
 80006f2:	4240      	negs	r0, r0
 80006f4:	1824      	adds	r4, r4, r0
 80006f6:	0018      	movs	r0, r3
 80006f8:	0223      	lsls	r3, r4, #8
 80006fa:	d53a      	bpl.n	8000772 <__aeabi_dmul+0x51a>
 80006fc:	2301      	movs	r3, #1
 80006fe:	2400      	movs	r4, #0
 8000700:	2500      	movs	r5, #0
 8000702:	e61b      	b.n	800033c <__aeabi_dmul+0xe4>
 8000704:	f000 fc86 	bl	8001014 <__clzsi2>
 8000708:	0001      	movs	r1, r0
 800070a:	0003      	movs	r3, r0
 800070c:	3115      	adds	r1, #21
 800070e:	3320      	adds	r3, #32
 8000710:	291c      	cmp	r1, #28
 8000712:	dd8f      	ble.n	8000634 <__aeabi_dmul+0x3dc>
 8000714:	3808      	subs	r0, #8
 8000716:	2200      	movs	r2, #0
 8000718:	4084      	lsls	r4, r0
 800071a:	4692      	mov	sl, r2
 800071c:	46a3      	mov	fp, r4
 800071e:	e796      	b.n	800064e <__aeabi_dmul+0x3f6>
 8000720:	f000 fc78 	bl	8001014 <__clzsi2>
 8000724:	0001      	movs	r1, r0
 8000726:	0003      	movs	r3, r0
 8000728:	3115      	adds	r1, #21
 800072a:	3320      	adds	r3, #32
 800072c:	291c      	cmp	r1, #28
 800072e:	dc00      	bgt.n	8000732 <__aeabi_dmul+0x4da>
 8000730:	e758      	b.n	80005e4 <__aeabi_dmul+0x38c>
 8000732:	0002      	movs	r2, r0
 8000734:	464c      	mov	r4, r9
 8000736:	3a08      	subs	r2, #8
 8000738:	2000      	movs	r0, #0
 800073a:	4094      	lsls	r4, r2
 800073c:	e75d      	b.n	80005fa <__aeabi_dmul+0x3a2>
 800073e:	9b01      	ldr	r3, [sp, #4]
 8000740:	9302      	str	r3, [sp, #8]
 8000742:	e711      	b.n	8000568 <__aeabi_dmul+0x310>
 8000744:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <__aeabi_dmul+0x57c>)
 8000746:	0026      	movs	r6, r4
 8000748:	469c      	mov	ip, r3
 800074a:	0003      	movs	r3, r0
 800074c:	9d02      	ldr	r5, [sp, #8]
 800074e:	40cb      	lsrs	r3, r1
 8000750:	4465      	add	r5, ip
 8000752:	40ae      	lsls	r6, r5
 8000754:	431e      	orrs	r6, r3
 8000756:	0003      	movs	r3, r0
 8000758:	40ab      	lsls	r3, r5
 800075a:	1e58      	subs	r0, r3, #1
 800075c:	4183      	sbcs	r3, r0
 800075e:	0030      	movs	r0, r6
 8000760:	4318      	orrs	r0, r3
 8000762:	40cc      	lsrs	r4, r1
 8000764:	0743      	lsls	r3, r0, #29
 8000766:	d0c7      	beq.n	80006f8 <__aeabi_dmul+0x4a0>
 8000768:	230f      	movs	r3, #15
 800076a:	4003      	ands	r3, r0
 800076c:	2b04      	cmp	r3, #4
 800076e:	d1bd      	bne.n	80006ec <__aeabi_dmul+0x494>
 8000770:	e7c2      	b.n	80006f8 <__aeabi_dmul+0x4a0>
 8000772:	0765      	lsls	r5, r4, #29
 8000774:	0264      	lsls	r4, r4, #9
 8000776:	0b24      	lsrs	r4, r4, #12
 8000778:	08c0      	lsrs	r0, r0, #3
 800077a:	2300      	movs	r3, #0
 800077c:	4305      	orrs	r5, r0
 800077e:	e5dd      	b.n	800033c <__aeabi_dmul+0xe4>
 8000780:	2500      	movs	r5, #0
 8000782:	2302      	movs	r3, #2
 8000784:	2e0f      	cmp	r6, #15
 8000786:	d10c      	bne.n	80007a2 <__aeabi_dmul+0x54a>
 8000788:	2480      	movs	r4, #128	; 0x80
 800078a:	465b      	mov	r3, fp
 800078c:	0324      	lsls	r4, r4, #12
 800078e:	4223      	tst	r3, r4
 8000790:	d00e      	beq.n	80007b0 <__aeabi_dmul+0x558>
 8000792:	4221      	tst	r1, r4
 8000794:	d10c      	bne.n	80007b0 <__aeabi_dmul+0x558>
 8000796:	430c      	orrs	r4, r1
 8000798:	0324      	lsls	r4, r4, #12
 800079a:	003a      	movs	r2, r7
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <__aeabi_dmul+0x580>)
 800079e:	0b24      	lsrs	r4, r4, #12
 80007a0:	e5cc      	b.n	800033c <__aeabi_dmul+0xe4>
 80007a2:	2e0b      	cmp	r6, #11
 80007a4:	d000      	beq.n	80007a8 <__aeabi_dmul+0x550>
 80007a6:	e5a2      	b.n	80002ee <__aeabi_dmul+0x96>
 80007a8:	468b      	mov	fp, r1
 80007aa:	46aa      	mov	sl, r5
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	e5f7      	b.n	80003a0 <__aeabi_dmul+0x148>
 80007b0:	2480      	movs	r4, #128	; 0x80
 80007b2:	465b      	mov	r3, fp
 80007b4:	0324      	lsls	r4, r4, #12
 80007b6:	431c      	orrs	r4, r3
 80007b8:	0324      	lsls	r4, r4, #12
 80007ba:	4642      	mov	r2, r8
 80007bc:	4655      	mov	r5, sl
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <__aeabi_dmul+0x580>)
 80007c0:	0b24      	lsrs	r4, r4, #12
 80007c2:	e5bb      	b.n	800033c <__aeabi_dmul+0xe4>
 80007c4:	464d      	mov	r5, r9
 80007c6:	0021      	movs	r1, r4
 80007c8:	2303      	movs	r3, #3
 80007ca:	e7db      	b.n	8000784 <__aeabi_dmul+0x52c>
 80007cc:	fffffc0d 	.word	0xfffffc0d
 80007d0:	0000043e 	.word	0x0000043e
 80007d4:	0000041e 	.word	0x0000041e
 80007d8:	000007ff 	.word	0x000007ff

080007dc <__aeabi_dsub>:
 80007dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007de:	4657      	mov	r7, sl
 80007e0:	464e      	mov	r6, r9
 80007e2:	4645      	mov	r5, r8
 80007e4:	46de      	mov	lr, fp
 80007e6:	b5e0      	push	{r5, r6, r7, lr}
 80007e8:	000d      	movs	r5, r1
 80007ea:	0004      	movs	r4, r0
 80007ec:	0019      	movs	r1, r3
 80007ee:	0010      	movs	r0, r2
 80007f0:	032b      	lsls	r3, r5, #12
 80007f2:	0a5b      	lsrs	r3, r3, #9
 80007f4:	0f62      	lsrs	r2, r4, #29
 80007f6:	431a      	orrs	r2, r3
 80007f8:	00e3      	lsls	r3, r4, #3
 80007fa:	030c      	lsls	r4, r1, #12
 80007fc:	0a64      	lsrs	r4, r4, #9
 80007fe:	0f47      	lsrs	r7, r0, #29
 8000800:	4327      	orrs	r7, r4
 8000802:	4cd0      	ldr	r4, [pc, #832]	; (8000b44 <__aeabi_dsub+0x368>)
 8000804:	006e      	lsls	r6, r5, #1
 8000806:	4691      	mov	r9, r2
 8000808:	b083      	sub	sp, #12
 800080a:	004a      	lsls	r2, r1, #1
 800080c:	00c0      	lsls	r0, r0, #3
 800080e:	4698      	mov	r8, r3
 8000810:	46a2      	mov	sl, r4
 8000812:	0d76      	lsrs	r6, r6, #21
 8000814:	0fed      	lsrs	r5, r5, #31
 8000816:	0d52      	lsrs	r2, r2, #21
 8000818:	0fc9      	lsrs	r1, r1, #31
 800081a:	9001      	str	r0, [sp, #4]
 800081c:	42a2      	cmp	r2, r4
 800081e:	d100      	bne.n	8000822 <__aeabi_dsub+0x46>
 8000820:	e0b9      	b.n	8000996 <__aeabi_dsub+0x1ba>
 8000822:	2401      	movs	r4, #1
 8000824:	4061      	eors	r1, r4
 8000826:	468b      	mov	fp, r1
 8000828:	428d      	cmp	r5, r1
 800082a:	d100      	bne.n	800082e <__aeabi_dsub+0x52>
 800082c:	e08d      	b.n	800094a <__aeabi_dsub+0x16e>
 800082e:	1ab4      	subs	r4, r6, r2
 8000830:	46a4      	mov	ip, r4
 8000832:	2c00      	cmp	r4, #0
 8000834:	dc00      	bgt.n	8000838 <__aeabi_dsub+0x5c>
 8000836:	e0b7      	b.n	80009a8 <__aeabi_dsub+0x1cc>
 8000838:	2a00      	cmp	r2, #0
 800083a:	d100      	bne.n	800083e <__aeabi_dsub+0x62>
 800083c:	e0cb      	b.n	80009d6 <__aeabi_dsub+0x1fa>
 800083e:	4ac1      	ldr	r2, [pc, #772]	; (8000b44 <__aeabi_dsub+0x368>)
 8000840:	4296      	cmp	r6, r2
 8000842:	d100      	bne.n	8000846 <__aeabi_dsub+0x6a>
 8000844:	e186      	b.n	8000b54 <__aeabi_dsub+0x378>
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	0412      	lsls	r2, r2, #16
 800084a:	4317      	orrs	r7, r2
 800084c:	4662      	mov	r2, ip
 800084e:	2a38      	cmp	r2, #56	; 0x38
 8000850:	dd00      	ble.n	8000854 <__aeabi_dsub+0x78>
 8000852:	e1a4      	b.n	8000b9e <__aeabi_dsub+0x3c2>
 8000854:	2a1f      	cmp	r2, #31
 8000856:	dd00      	ble.n	800085a <__aeabi_dsub+0x7e>
 8000858:	e21d      	b.n	8000c96 <__aeabi_dsub+0x4ba>
 800085a:	4661      	mov	r1, ip
 800085c:	2220      	movs	r2, #32
 800085e:	003c      	movs	r4, r7
 8000860:	1a52      	subs	r2, r2, r1
 8000862:	0001      	movs	r1, r0
 8000864:	4090      	lsls	r0, r2
 8000866:	4094      	lsls	r4, r2
 8000868:	1e42      	subs	r2, r0, #1
 800086a:	4190      	sbcs	r0, r2
 800086c:	4662      	mov	r2, ip
 800086e:	46a0      	mov	r8, r4
 8000870:	4664      	mov	r4, ip
 8000872:	40d7      	lsrs	r7, r2
 8000874:	464a      	mov	r2, r9
 8000876:	40e1      	lsrs	r1, r4
 8000878:	4644      	mov	r4, r8
 800087a:	1bd2      	subs	r2, r2, r7
 800087c:	4691      	mov	r9, r2
 800087e:	430c      	orrs	r4, r1
 8000880:	4304      	orrs	r4, r0
 8000882:	1b1c      	subs	r4, r3, r4
 8000884:	42a3      	cmp	r3, r4
 8000886:	4192      	sbcs	r2, r2
 8000888:	464b      	mov	r3, r9
 800088a:	4252      	negs	r2, r2
 800088c:	1a9b      	subs	r3, r3, r2
 800088e:	469a      	mov	sl, r3
 8000890:	4653      	mov	r3, sl
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	d400      	bmi.n	8000898 <__aeabi_dsub+0xbc>
 8000896:	e12b      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000898:	4653      	mov	r3, sl
 800089a:	025a      	lsls	r2, r3, #9
 800089c:	0a53      	lsrs	r3, r2, #9
 800089e:	469a      	mov	sl, r3
 80008a0:	4653      	mov	r3, sl
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dsub+0xcc>
 80008a6:	e166      	b.n	8000b76 <__aeabi_dsub+0x39a>
 80008a8:	4650      	mov	r0, sl
 80008aa:	f000 fbb3 	bl	8001014 <__clzsi2>
 80008ae:	0003      	movs	r3, r0
 80008b0:	3b08      	subs	r3, #8
 80008b2:	2220      	movs	r2, #32
 80008b4:	0020      	movs	r0, r4
 80008b6:	1ad2      	subs	r2, r2, r3
 80008b8:	4651      	mov	r1, sl
 80008ba:	40d0      	lsrs	r0, r2
 80008bc:	4099      	lsls	r1, r3
 80008be:	0002      	movs	r2, r0
 80008c0:	409c      	lsls	r4, r3
 80008c2:	430a      	orrs	r2, r1
 80008c4:	429e      	cmp	r6, r3
 80008c6:	dd00      	ble.n	80008ca <__aeabi_dsub+0xee>
 80008c8:	e164      	b.n	8000b94 <__aeabi_dsub+0x3b8>
 80008ca:	1b9b      	subs	r3, r3, r6
 80008cc:	1c59      	adds	r1, r3, #1
 80008ce:	291f      	cmp	r1, #31
 80008d0:	dd00      	ble.n	80008d4 <__aeabi_dsub+0xf8>
 80008d2:	e0fe      	b.n	8000ad2 <__aeabi_dsub+0x2f6>
 80008d4:	2320      	movs	r3, #32
 80008d6:	0010      	movs	r0, r2
 80008d8:	0026      	movs	r6, r4
 80008da:	1a5b      	subs	r3, r3, r1
 80008dc:	409c      	lsls	r4, r3
 80008de:	4098      	lsls	r0, r3
 80008e0:	40ce      	lsrs	r6, r1
 80008e2:	40ca      	lsrs	r2, r1
 80008e4:	1e63      	subs	r3, r4, #1
 80008e6:	419c      	sbcs	r4, r3
 80008e8:	4330      	orrs	r0, r6
 80008ea:	4692      	mov	sl, r2
 80008ec:	2600      	movs	r6, #0
 80008ee:	4304      	orrs	r4, r0
 80008f0:	0763      	lsls	r3, r4, #29
 80008f2:	d009      	beq.n	8000908 <__aeabi_dsub+0x12c>
 80008f4:	230f      	movs	r3, #15
 80008f6:	4023      	ands	r3, r4
 80008f8:	2b04      	cmp	r3, #4
 80008fa:	d005      	beq.n	8000908 <__aeabi_dsub+0x12c>
 80008fc:	1d23      	adds	r3, r4, #4
 80008fe:	42a3      	cmp	r3, r4
 8000900:	41a4      	sbcs	r4, r4
 8000902:	4264      	negs	r4, r4
 8000904:	44a2      	add	sl, r4
 8000906:	001c      	movs	r4, r3
 8000908:	4653      	mov	r3, sl
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	d400      	bmi.n	8000910 <__aeabi_dsub+0x134>
 800090e:	e0f2      	b.n	8000af6 <__aeabi_dsub+0x31a>
 8000910:	4b8c      	ldr	r3, [pc, #560]	; (8000b44 <__aeabi_dsub+0x368>)
 8000912:	3601      	adds	r6, #1
 8000914:	429e      	cmp	r6, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dsub+0x13e>
 8000918:	e10f      	b.n	8000b3a <__aeabi_dsub+0x35e>
 800091a:	4653      	mov	r3, sl
 800091c:	498a      	ldr	r1, [pc, #552]	; (8000b48 <__aeabi_dsub+0x36c>)
 800091e:	08e4      	lsrs	r4, r4, #3
 8000920:	400b      	ands	r3, r1
 8000922:	0019      	movs	r1, r3
 8000924:	075b      	lsls	r3, r3, #29
 8000926:	4323      	orrs	r3, r4
 8000928:	0572      	lsls	r2, r6, #21
 800092a:	024c      	lsls	r4, r1, #9
 800092c:	0b24      	lsrs	r4, r4, #12
 800092e:	0d52      	lsrs	r2, r2, #21
 8000930:	0512      	lsls	r2, r2, #20
 8000932:	4322      	orrs	r2, r4
 8000934:	07ed      	lsls	r5, r5, #31
 8000936:	432a      	orrs	r2, r5
 8000938:	0018      	movs	r0, r3
 800093a:	0011      	movs	r1, r2
 800093c:	b003      	add	sp, #12
 800093e:	bcf0      	pop	{r4, r5, r6, r7}
 8000940:	46bb      	mov	fp, r7
 8000942:	46b2      	mov	sl, r6
 8000944:	46a9      	mov	r9, r5
 8000946:	46a0      	mov	r8, r4
 8000948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094a:	1ab4      	subs	r4, r6, r2
 800094c:	46a4      	mov	ip, r4
 800094e:	2c00      	cmp	r4, #0
 8000950:	dd59      	ble.n	8000a06 <__aeabi_dsub+0x22a>
 8000952:	2a00      	cmp	r2, #0
 8000954:	d100      	bne.n	8000958 <__aeabi_dsub+0x17c>
 8000956:	e0b0      	b.n	8000aba <__aeabi_dsub+0x2de>
 8000958:	4556      	cmp	r6, sl
 800095a:	d100      	bne.n	800095e <__aeabi_dsub+0x182>
 800095c:	e0fa      	b.n	8000b54 <__aeabi_dsub+0x378>
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	0412      	lsls	r2, r2, #16
 8000962:	4317      	orrs	r7, r2
 8000964:	4662      	mov	r2, ip
 8000966:	2a38      	cmp	r2, #56	; 0x38
 8000968:	dd00      	ble.n	800096c <__aeabi_dsub+0x190>
 800096a:	e0d4      	b.n	8000b16 <__aeabi_dsub+0x33a>
 800096c:	2a1f      	cmp	r2, #31
 800096e:	dc00      	bgt.n	8000972 <__aeabi_dsub+0x196>
 8000970:	e1c0      	b.n	8000cf4 <__aeabi_dsub+0x518>
 8000972:	0039      	movs	r1, r7
 8000974:	3a20      	subs	r2, #32
 8000976:	40d1      	lsrs	r1, r2
 8000978:	4662      	mov	r2, ip
 800097a:	2a20      	cmp	r2, #32
 800097c:	d006      	beq.n	800098c <__aeabi_dsub+0x1b0>
 800097e:	4664      	mov	r4, ip
 8000980:	2240      	movs	r2, #64	; 0x40
 8000982:	1b12      	subs	r2, r2, r4
 8000984:	003c      	movs	r4, r7
 8000986:	4094      	lsls	r4, r2
 8000988:	4304      	orrs	r4, r0
 800098a:	9401      	str	r4, [sp, #4]
 800098c:	9c01      	ldr	r4, [sp, #4]
 800098e:	1e62      	subs	r2, r4, #1
 8000990:	4194      	sbcs	r4, r2
 8000992:	430c      	orrs	r4, r1
 8000994:	e0c3      	b.n	8000b1e <__aeabi_dsub+0x342>
 8000996:	003c      	movs	r4, r7
 8000998:	4304      	orrs	r4, r0
 800099a:	d02b      	beq.n	80009f4 <__aeabi_dsub+0x218>
 800099c:	468b      	mov	fp, r1
 800099e:	428d      	cmp	r5, r1
 80009a0:	d02e      	beq.n	8000a00 <__aeabi_dsub+0x224>
 80009a2:	4c6a      	ldr	r4, [pc, #424]	; (8000b4c <__aeabi_dsub+0x370>)
 80009a4:	46a4      	mov	ip, r4
 80009a6:	44b4      	add	ip, r6
 80009a8:	4664      	mov	r4, ip
 80009aa:	2c00      	cmp	r4, #0
 80009ac:	d05f      	beq.n	8000a6e <__aeabi_dsub+0x292>
 80009ae:	1b94      	subs	r4, r2, r6
 80009b0:	46a4      	mov	ip, r4
 80009b2:	2e00      	cmp	r6, #0
 80009b4:	d000      	beq.n	80009b8 <__aeabi_dsub+0x1dc>
 80009b6:	e120      	b.n	8000bfa <__aeabi_dsub+0x41e>
 80009b8:	464c      	mov	r4, r9
 80009ba:	431c      	orrs	r4, r3
 80009bc:	d100      	bne.n	80009c0 <__aeabi_dsub+0x1e4>
 80009be:	e1c7      	b.n	8000d50 <__aeabi_dsub+0x574>
 80009c0:	4661      	mov	r1, ip
 80009c2:	1e4c      	subs	r4, r1, #1
 80009c4:	2901      	cmp	r1, #1
 80009c6:	d100      	bne.n	80009ca <__aeabi_dsub+0x1ee>
 80009c8:	e223      	b.n	8000e12 <__aeabi_dsub+0x636>
 80009ca:	4d5e      	ldr	r5, [pc, #376]	; (8000b44 <__aeabi_dsub+0x368>)
 80009cc:	45ac      	cmp	ip, r5
 80009ce:	d100      	bne.n	80009d2 <__aeabi_dsub+0x1f6>
 80009d0:	e1d8      	b.n	8000d84 <__aeabi_dsub+0x5a8>
 80009d2:	46a4      	mov	ip, r4
 80009d4:	e11a      	b.n	8000c0c <__aeabi_dsub+0x430>
 80009d6:	003a      	movs	r2, r7
 80009d8:	4302      	orrs	r2, r0
 80009da:	d100      	bne.n	80009de <__aeabi_dsub+0x202>
 80009dc:	e0e4      	b.n	8000ba8 <__aeabi_dsub+0x3cc>
 80009de:	0022      	movs	r2, r4
 80009e0:	3a01      	subs	r2, #1
 80009e2:	2c01      	cmp	r4, #1
 80009e4:	d100      	bne.n	80009e8 <__aeabi_dsub+0x20c>
 80009e6:	e1c3      	b.n	8000d70 <__aeabi_dsub+0x594>
 80009e8:	4956      	ldr	r1, [pc, #344]	; (8000b44 <__aeabi_dsub+0x368>)
 80009ea:	428c      	cmp	r4, r1
 80009ec:	d100      	bne.n	80009f0 <__aeabi_dsub+0x214>
 80009ee:	e0b1      	b.n	8000b54 <__aeabi_dsub+0x378>
 80009f0:	4694      	mov	ip, r2
 80009f2:	e72b      	b.n	800084c <__aeabi_dsub+0x70>
 80009f4:	2401      	movs	r4, #1
 80009f6:	4061      	eors	r1, r4
 80009f8:	468b      	mov	fp, r1
 80009fa:	428d      	cmp	r5, r1
 80009fc:	d000      	beq.n	8000a00 <__aeabi_dsub+0x224>
 80009fe:	e716      	b.n	800082e <__aeabi_dsub+0x52>
 8000a00:	4952      	ldr	r1, [pc, #328]	; (8000b4c <__aeabi_dsub+0x370>)
 8000a02:	468c      	mov	ip, r1
 8000a04:	44b4      	add	ip, r6
 8000a06:	4664      	mov	r4, ip
 8000a08:	2c00      	cmp	r4, #0
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_dsub+0x232>
 8000a0c:	e0d3      	b.n	8000bb6 <__aeabi_dsub+0x3da>
 8000a0e:	1b91      	subs	r1, r2, r6
 8000a10:	468c      	mov	ip, r1
 8000a12:	2e00      	cmp	r6, #0
 8000a14:	d100      	bne.n	8000a18 <__aeabi_dsub+0x23c>
 8000a16:	e15e      	b.n	8000cd6 <__aeabi_dsub+0x4fa>
 8000a18:	494a      	ldr	r1, [pc, #296]	; (8000b44 <__aeabi_dsub+0x368>)
 8000a1a:	428a      	cmp	r2, r1
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_dsub+0x244>
 8000a1e:	e1be      	b.n	8000d9e <__aeabi_dsub+0x5c2>
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	464c      	mov	r4, r9
 8000a24:	0409      	lsls	r1, r1, #16
 8000a26:	430c      	orrs	r4, r1
 8000a28:	46a1      	mov	r9, r4
 8000a2a:	4661      	mov	r1, ip
 8000a2c:	2938      	cmp	r1, #56	; 0x38
 8000a2e:	dd00      	ble.n	8000a32 <__aeabi_dsub+0x256>
 8000a30:	e1ba      	b.n	8000da8 <__aeabi_dsub+0x5cc>
 8000a32:	291f      	cmp	r1, #31
 8000a34:	dd00      	ble.n	8000a38 <__aeabi_dsub+0x25c>
 8000a36:	e227      	b.n	8000e88 <__aeabi_dsub+0x6ac>
 8000a38:	2420      	movs	r4, #32
 8000a3a:	1a64      	subs	r4, r4, r1
 8000a3c:	4649      	mov	r1, r9
 8000a3e:	40a1      	lsls	r1, r4
 8000a40:	001e      	movs	r6, r3
 8000a42:	4688      	mov	r8, r1
 8000a44:	4661      	mov	r1, ip
 8000a46:	40a3      	lsls	r3, r4
 8000a48:	40ce      	lsrs	r6, r1
 8000a4a:	4641      	mov	r1, r8
 8000a4c:	1e5c      	subs	r4, r3, #1
 8000a4e:	41a3      	sbcs	r3, r4
 8000a50:	4331      	orrs	r1, r6
 8000a52:	4319      	orrs	r1, r3
 8000a54:	000c      	movs	r4, r1
 8000a56:	4663      	mov	r3, ip
 8000a58:	4649      	mov	r1, r9
 8000a5a:	40d9      	lsrs	r1, r3
 8000a5c:	187f      	adds	r7, r7, r1
 8000a5e:	1824      	adds	r4, r4, r0
 8000a60:	4284      	cmp	r4, r0
 8000a62:	419b      	sbcs	r3, r3
 8000a64:	425b      	negs	r3, r3
 8000a66:	469a      	mov	sl, r3
 8000a68:	0016      	movs	r6, r2
 8000a6a:	44ba      	add	sl, r7
 8000a6c:	e05d      	b.n	8000b2a <__aeabi_dsub+0x34e>
 8000a6e:	4c38      	ldr	r4, [pc, #224]	; (8000b50 <__aeabi_dsub+0x374>)
 8000a70:	1c72      	adds	r2, r6, #1
 8000a72:	4222      	tst	r2, r4
 8000a74:	d000      	beq.n	8000a78 <__aeabi_dsub+0x29c>
 8000a76:	e0df      	b.n	8000c38 <__aeabi_dsub+0x45c>
 8000a78:	464a      	mov	r2, r9
 8000a7a:	431a      	orrs	r2, r3
 8000a7c:	2e00      	cmp	r6, #0
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_dsub+0x2a6>
 8000a80:	e15c      	b.n	8000d3c <__aeabi_dsub+0x560>
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d100      	bne.n	8000a88 <__aeabi_dsub+0x2ac>
 8000a86:	e1cf      	b.n	8000e28 <__aeabi_dsub+0x64c>
 8000a88:	003a      	movs	r2, r7
 8000a8a:	4302      	orrs	r2, r0
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_dsub+0x2b4>
 8000a8e:	e17f      	b.n	8000d90 <__aeabi_dsub+0x5b4>
 8000a90:	1a1c      	subs	r4, r3, r0
 8000a92:	464a      	mov	r2, r9
 8000a94:	42a3      	cmp	r3, r4
 8000a96:	4189      	sbcs	r1, r1
 8000a98:	1bd2      	subs	r2, r2, r7
 8000a9a:	4249      	negs	r1, r1
 8000a9c:	1a52      	subs	r2, r2, r1
 8000a9e:	4692      	mov	sl, r2
 8000aa0:	0212      	lsls	r2, r2, #8
 8000aa2:	d400      	bmi.n	8000aa6 <__aeabi_dsub+0x2ca>
 8000aa4:	e20a      	b.n	8000ebc <__aeabi_dsub+0x6e0>
 8000aa6:	1ac4      	subs	r4, r0, r3
 8000aa8:	42a0      	cmp	r0, r4
 8000aaa:	4180      	sbcs	r0, r0
 8000aac:	464b      	mov	r3, r9
 8000aae:	4240      	negs	r0, r0
 8000ab0:	1aff      	subs	r7, r7, r3
 8000ab2:	1a3b      	subs	r3, r7, r0
 8000ab4:	469a      	mov	sl, r3
 8000ab6:	465d      	mov	r5, fp
 8000ab8:	e71a      	b.n	80008f0 <__aeabi_dsub+0x114>
 8000aba:	003a      	movs	r2, r7
 8000abc:	4302      	orrs	r2, r0
 8000abe:	d073      	beq.n	8000ba8 <__aeabi_dsub+0x3cc>
 8000ac0:	0022      	movs	r2, r4
 8000ac2:	3a01      	subs	r2, #1
 8000ac4:	2c01      	cmp	r4, #1
 8000ac6:	d100      	bne.n	8000aca <__aeabi_dsub+0x2ee>
 8000ac8:	e0cb      	b.n	8000c62 <__aeabi_dsub+0x486>
 8000aca:	4554      	cmp	r4, sl
 8000acc:	d042      	beq.n	8000b54 <__aeabi_dsub+0x378>
 8000ace:	4694      	mov	ip, r2
 8000ad0:	e748      	b.n	8000964 <__aeabi_dsub+0x188>
 8000ad2:	0010      	movs	r0, r2
 8000ad4:	3b1f      	subs	r3, #31
 8000ad6:	40d8      	lsrs	r0, r3
 8000ad8:	2920      	cmp	r1, #32
 8000ada:	d003      	beq.n	8000ae4 <__aeabi_dsub+0x308>
 8000adc:	2340      	movs	r3, #64	; 0x40
 8000ade:	1a5b      	subs	r3, r3, r1
 8000ae0:	409a      	lsls	r2, r3
 8000ae2:	4314      	orrs	r4, r2
 8000ae4:	1e63      	subs	r3, r4, #1
 8000ae6:	419c      	sbcs	r4, r3
 8000ae8:	2300      	movs	r3, #0
 8000aea:	2600      	movs	r6, #0
 8000aec:	469a      	mov	sl, r3
 8000aee:	4304      	orrs	r4, r0
 8000af0:	0763      	lsls	r3, r4, #29
 8000af2:	d000      	beq.n	8000af6 <__aeabi_dsub+0x31a>
 8000af4:	e6fe      	b.n	80008f4 <__aeabi_dsub+0x118>
 8000af6:	4652      	mov	r2, sl
 8000af8:	08e3      	lsrs	r3, r4, #3
 8000afa:	0752      	lsls	r2, r2, #29
 8000afc:	4313      	orrs	r3, r2
 8000afe:	4652      	mov	r2, sl
 8000b00:	46b4      	mov	ip, r6
 8000b02:	08d2      	lsrs	r2, r2, #3
 8000b04:	490f      	ldr	r1, [pc, #60]	; (8000b44 <__aeabi_dsub+0x368>)
 8000b06:	458c      	cmp	ip, r1
 8000b08:	d02a      	beq.n	8000b60 <__aeabi_dsub+0x384>
 8000b0a:	0312      	lsls	r2, r2, #12
 8000b0c:	0b14      	lsrs	r4, r2, #12
 8000b0e:	4662      	mov	r2, ip
 8000b10:	0552      	lsls	r2, r2, #21
 8000b12:	0d52      	lsrs	r2, r2, #21
 8000b14:	e70c      	b.n	8000930 <__aeabi_dsub+0x154>
 8000b16:	003c      	movs	r4, r7
 8000b18:	4304      	orrs	r4, r0
 8000b1a:	1e62      	subs	r2, r4, #1
 8000b1c:	4194      	sbcs	r4, r2
 8000b1e:	18e4      	adds	r4, r4, r3
 8000b20:	429c      	cmp	r4, r3
 8000b22:	4192      	sbcs	r2, r2
 8000b24:	4252      	negs	r2, r2
 8000b26:	444a      	add	r2, r9
 8000b28:	4692      	mov	sl, r2
 8000b2a:	4653      	mov	r3, sl
 8000b2c:	021b      	lsls	r3, r3, #8
 8000b2e:	d5df      	bpl.n	8000af0 <__aeabi_dsub+0x314>
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <__aeabi_dsub+0x368>)
 8000b32:	3601      	adds	r6, #1
 8000b34:	429e      	cmp	r6, r3
 8000b36:	d000      	beq.n	8000b3a <__aeabi_dsub+0x35e>
 8000b38:	e0a0      	b.n	8000c7c <__aeabi_dsub+0x4a0>
 8000b3a:	0032      	movs	r2, r6
 8000b3c:	2400      	movs	r4, #0
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e6f6      	b.n	8000930 <__aeabi_dsub+0x154>
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	000007ff 	.word	0x000007ff
 8000b48:	ff7fffff 	.word	0xff7fffff
 8000b4c:	fffff801 	.word	0xfffff801
 8000b50:	000007fe 	.word	0x000007fe
 8000b54:	08db      	lsrs	r3, r3, #3
 8000b56:	464a      	mov	r2, r9
 8000b58:	0752      	lsls	r2, r2, #29
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	464a      	mov	r2, r9
 8000b5e:	08d2      	lsrs	r2, r2, #3
 8000b60:	0019      	movs	r1, r3
 8000b62:	4311      	orrs	r1, r2
 8000b64:	d100      	bne.n	8000b68 <__aeabi_dsub+0x38c>
 8000b66:	e1b5      	b.n	8000ed4 <__aeabi_dsub+0x6f8>
 8000b68:	2480      	movs	r4, #128	; 0x80
 8000b6a:	0324      	lsls	r4, r4, #12
 8000b6c:	4314      	orrs	r4, r2
 8000b6e:	0324      	lsls	r4, r4, #12
 8000b70:	4ad5      	ldr	r2, [pc, #852]	; (8000ec8 <__aeabi_dsub+0x6ec>)
 8000b72:	0b24      	lsrs	r4, r4, #12
 8000b74:	e6dc      	b.n	8000930 <__aeabi_dsub+0x154>
 8000b76:	0020      	movs	r0, r4
 8000b78:	f000 fa4c 	bl	8001014 <__clzsi2>
 8000b7c:	0003      	movs	r3, r0
 8000b7e:	3318      	adds	r3, #24
 8000b80:	2b1f      	cmp	r3, #31
 8000b82:	dc00      	bgt.n	8000b86 <__aeabi_dsub+0x3aa>
 8000b84:	e695      	b.n	80008b2 <__aeabi_dsub+0xd6>
 8000b86:	0022      	movs	r2, r4
 8000b88:	3808      	subs	r0, #8
 8000b8a:	4082      	lsls	r2, r0
 8000b8c:	2400      	movs	r4, #0
 8000b8e:	429e      	cmp	r6, r3
 8000b90:	dc00      	bgt.n	8000b94 <__aeabi_dsub+0x3b8>
 8000b92:	e69a      	b.n	80008ca <__aeabi_dsub+0xee>
 8000b94:	1af6      	subs	r6, r6, r3
 8000b96:	4bcd      	ldr	r3, [pc, #820]	; (8000ecc <__aeabi_dsub+0x6f0>)
 8000b98:	401a      	ands	r2, r3
 8000b9a:	4692      	mov	sl, r2
 8000b9c:	e6a8      	b.n	80008f0 <__aeabi_dsub+0x114>
 8000b9e:	003c      	movs	r4, r7
 8000ba0:	4304      	orrs	r4, r0
 8000ba2:	1e62      	subs	r2, r4, #1
 8000ba4:	4194      	sbcs	r4, r2
 8000ba6:	e66c      	b.n	8000882 <__aeabi_dsub+0xa6>
 8000ba8:	464a      	mov	r2, r9
 8000baa:	08db      	lsrs	r3, r3, #3
 8000bac:	0752      	lsls	r2, r2, #29
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	464a      	mov	r2, r9
 8000bb2:	08d2      	lsrs	r2, r2, #3
 8000bb4:	e7a6      	b.n	8000b04 <__aeabi_dsub+0x328>
 8000bb6:	4cc6      	ldr	r4, [pc, #792]	; (8000ed0 <__aeabi_dsub+0x6f4>)
 8000bb8:	1c72      	adds	r2, r6, #1
 8000bba:	4222      	tst	r2, r4
 8000bbc:	d000      	beq.n	8000bc0 <__aeabi_dsub+0x3e4>
 8000bbe:	e0ac      	b.n	8000d1a <__aeabi_dsub+0x53e>
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d000      	beq.n	8000bca <__aeabi_dsub+0x3ee>
 8000bc8:	e105      	b.n	8000dd6 <__aeabi_dsub+0x5fa>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_dsub+0x3f4>
 8000bce:	e156      	b.n	8000e7e <__aeabi_dsub+0x6a2>
 8000bd0:	003a      	movs	r2, r7
 8000bd2:	4302      	orrs	r2, r0
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_dsub+0x3fc>
 8000bd6:	e0db      	b.n	8000d90 <__aeabi_dsub+0x5b4>
 8000bd8:	181c      	adds	r4, r3, r0
 8000bda:	429c      	cmp	r4, r3
 8000bdc:	419b      	sbcs	r3, r3
 8000bde:	444f      	add	r7, r9
 8000be0:	46ba      	mov	sl, r7
 8000be2:	425b      	negs	r3, r3
 8000be4:	449a      	add	sl, r3
 8000be6:	4653      	mov	r3, sl
 8000be8:	021b      	lsls	r3, r3, #8
 8000bea:	d400      	bmi.n	8000bee <__aeabi_dsub+0x412>
 8000bec:	e780      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000bee:	4652      	mov	r2, sl
 8000bf0:	4bb6      	ldr	r3, [pc, #728]	; (8000ecc <__aeabi_dsub+0x6f0>)
 8000bf2:	2601      	movs	r6, #1
 8000bf4:	401a      	ands	r2, r3
 8000bf6:	4692      	mov	sl, r2
 8000bf8:	e77a      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000bfa:	4cb3      	ldr	r4, [pc, #716]	; (8000ec8 <__aeabi_dsub+0x6ec>)
 8000bfc:	42a2      	cmp	r2, r4
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_dsub+0x426>
 8000c00:	e0c0      	b.n	8000d84 <__aeabi_dsub+0x5a8>
 8000c02:	2480      	movs	r4, #128	; 0x80
 8000c04:	464d      	mov	r5, r9
 8000c06:	0424      	lsls	r4, r4, #16
 8000c08:	4325      	orrs	r5, r4
 8000c0a:	46a9      	mov	r9, r5
 8000c0c:	4664      	mov	r4, ip
 8000c0e:	2c38      	cmp	r4, #56	; 0x38
 8000c10:	dc53      	bgt.n	8000cba <__aeabi_dsub+0x4de>
 8000c12:	4661      	mov	r1, ip
 8000c14:	2c1f      	cmp	r4, #31
 8000c16:	dd00      	ble.n	8000c1a <__aeabi_dsub+0x43e>
 8000c18:	e0cd      	b.n	8000db6 <__aeabi_dsub+0x5da>
 8000c1a:	2520      	movs	r5, #32
 8000c1c:	001e      	movs	r6, r3
 8000c1e:	1b2d      	subs	r5, r5, r4
 8000c20:	464c      	mov	r4, r9
 8000c22:	40ab      	lsls	r3, r5
 8000c24:	40ac      	lsls	r4, r5
 8000c26:	40ce      	lsrs	r6, r1
 8000c28:	1e5d      	subs	r5, r3, #1
 8000c2a:	41ab      	sbcs	r3, r5
 8000c2c:	4334      	orrs	r4, r6
 8000c2e:	4323      	orrs	r3, r4
 8000c30:	464c      	mov	r4, r9
 8000c32:	40cc      	lsrs	r4, r1
 8000c34:	1b3f      	subs	r7, r7, r4
 8000c36:	e045      	b.n	8000cc4 <__aeabi_dsub+0x4e8>
 8000c38:	464a      	mov	r2, r9
 8000c3a:	1a1c      	subs	r4, r3, r0
 8000c3c:	1bd1      	subs	r1, r2, r7
 8000c3e:	42a3      	cmp	r3, r4
 8000c40:	4192      	sbcs	r2, r2
 8000c42:	4252      	negs	r2, r2
 8000c44:	4692      	mov	sl, r2
 8000c46:	000a      	movs	r2, r1
 8000c48:	4651      	mov	r1, sl
 8000c4a:	1a52      	subs	r2, r2, r1
 8000c4c:	4692      	mov	sl, r2
 8000c4e:	0212      	lsls	r2, r2, #8
 8000c50:	d500      	bpl.n	8000c54 <__aeabi_dsub+0x478>
 8000c52:	e083      	b.n	8000d5c <__aeabi_dsub+0x580>
 8000c54:	4653      	mov	r3, sl
 8000c56:	4323      	orrs	r3, r4
 8000c58:	d000      	beq.n	8000c5c <__aeabi_dsub+0x480>
 8000c5a:	e621      	b.n	80008a0 <__aeabi_dsub+0xc4>
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2500      	movs	r5, #0
 8000c60:	e753      	b.n	8000b0a <__aeabi_dsub+0x32e>
 8000c62:	181c      	adds	r4, r3, r0
 8000c64:	429c      	cmp	r4, r3
 8000c66:	419b      	sbcs	r3, r3
 8000c68:	444f      	add	r7, r9
 8000c6a:	46ba      	mov	sl, r7
 8000c6c:	425b      	negs	r3, r3
 8000c6e:	449a      	add	sl, r3
 8000c70:	4653      	mov	r3, sl
 8000c72:	2601      	movs	r6, #1
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	d400      	bmi.n	8000c7a <__aeabi_dsub+0x49e>
 8000c78:	e73a      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000c7a:	2602      	movs	r6, #2
 8000c7c:	4652      	mov	r2, sl
 8000c7e:	4b93      	ldr	r3, [pc, #588]	; (8000ecc <__aeabi_dsub+0x6f0>)
 8000c80:	2101      	movs	r1, #1
 8000c82:	401a      	ands	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	4021      	ands	r1, r4
 8000c88:	0862      	lsrs	r2, r4, #1
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	07dc      	lsls	r4, r3, #31
 8000c8e:	085b      	lsrs	r3, r3, #1
 8000c90:	469a      	mov	sl, r3
 8000c92:	4314      	orrs	r4, r2
 8000c94:	e62c      	b.n	80008f0 <__aeabi_dsub+0x114>
 8000c96:	0039      	movs	r1, r7
 8000c98:	3a20      	subs	r2, #32
 8000c9a:	40d1      	lsrs	r1, r2
 8000c9c:	4662      	mov	r2, ip
 8000c9e:	2a20      	cmp	r2, #32
 8000ca0:	d006      	beq.n	8000cb0 <__aeabi_dsub+0x4d4>
 8000ca2:	4664      	mov	r4, ip
 8000ca4:	2240      	movs	r2, #64	; 0x40
 8000ca6:	1b12      	subs	r2, r2, r4
 8000ca8:	003c      	movs	r4, r7
 8000caa:	4094      	lsls	r4, r2
 8000cac:	4304      	orrs	r4, r0
 8000cae:	9401      	str	r4, [sp, #4]
 8000cb0:	9c01      	ldr	r4, [sp, #4]
 8000cb2:	1e62      	subs	r2, r4, #1
 8000cb4:	4194      	sbcs	r4, r2
 8000cb6:	430c      	orrs	r4, r1
 8000cb8:	e5e3      	b.n	8000882 <__aeabi_dsub+0xa6>
 8000cba:	4649      	mov	r1, r9
 8000cbc:	4319      	orrs	r1, r3
 8000cbe:	000b      	movs	r3, r1
 8000cc0:	1e5c      	subs	r4, r3, #1
 8000cc2:	41a3      	sbcs	r3, r4
 8000cc4:	1ac4      	subs	r4, r0, r3
 8000cc6:	42a0      	cmp	r0, r4
 8000cc8:	419b      	sbcs	r3, r3
 8000cca:	425b      	negs	r3, r3
 8000ccc:	1afb      	subs	r3, r7, r3
 8000cce:	469a      	mov	sl, r3
 8000cd0:	465d      	mov	r5, fp
 8000cd2:	0016      	movs	r6, r2
 8000cd4:	e5dc      	b.n	8000890 <__aeabi_dsub+0xb4>
 8000cd6:	4649      	mov	r1, r9
 8000cd8:	4319      	orrs	r1, r3
 8000cda:	d100      	bne.n	8000cde <__aeabi_dsub+0x502>
 8000cdc:	e0ae      	b.n	8000e3c <__aeabi_dsub+0x660>
 8000cde:	4661      	mov	r1, ip
 8000ce0:	4664      	mov	r4, ip
 8000ce2:	3901      	subs	r1, #1
 8000ce4:	2c01      	cmp	r4, #1
 8000ce6:	d100      	bne.n	8000cea <__aeabi_dsub+0x50e>
 8000ce8:	e0e0      	b.n	8000eac <__aeabi_dsub+0x6d0>
 8000cea:	4c77      	ldr	r4, [pc, #476]	; (8000ec8 <__aeabi_dsub+0x6ec>)
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d056      	beq.n	8000d9e <__aeabi_dsub+0x5c2>
 8000cf0:	468c      	mov	ip, r1
 8000cf2:	e69a      	b.n	8000a2a <__aeabi_dsub+0x24e>
 8000cf4:	4661      	mov	r1, ip
 8000cf6:	2220      	movs	r2, #32
 8000cf8:	003c      	movs	r4, r7
 8000cfa:	1a52      	subs	r2, r2, r1
 8000cfc:	4094      	lsls	r4, r2
 8000cfe:	0001      	movs	r1, r0
 8000d00:	4090      	lsls	r0, r2
 8000d02:	46a0      	mov	r8, r4
 8000d04:	4664      	mov	r4, ip
 8000d06:	1e42      	subs	r2, r0, #1
 8000d08:	4190      	sbcs	r0, r2
 8000d0a:	4662      	mov	r2, ip
 8000d0c:	40e1      	lsrs	r1, r4
 8000d0e:	4644      	mov	r4, r8
 8000d10:	40d7      	lsrs	r7, r2
 8000d12:	430c      	orrs	r4, r1
 8000d14:	4304      	orrs	r4, r0
 8000d16:	44b9      	add	r9, r7
 8000d18:	e701      	b.n	8000b1e <__aeabi_dsub+0x342>
 8000d1a:	496b      	ldr	r1, [pc, #428]	; (8000ec8 <__aeabi_dsub+0x6ec>)
 8000d1c:	428a      	cmp	r2, r1
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_dsub+0x546>
 8000d20:	e70c      	b.n	8000b3c <__aeabi_dsub+0x360>
 8000d22:	1818      	adds	r0, r3, r0
 8000d24:	4298      	cmp	r0, r3
 8000d26:	419b      	sbcs	r3, r3
 8000d28:	444f      	add	r7, r9
 8000d2a:	425b      	negs	r3, r3
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	07dc      	lsls	r4, r3, #31
 8000d30:	0840      	lsrs	r0, r0, #1
 8000d32:	085b      	lsrs	r3, r3, #1
 8000d34:	469a      	mov	sl, r3
 8000d36:	0016      	movs	r6, r2
 8000d38:	4304      	orrs	r4, r0
 8000d3a:	e6d9      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d000      	beq.n	8000d42 <__aeabi_dsub+0x566>
 8000d40:	e081      	b.n	8000e46 <__aeabi_dsub+0x66a>
 8000d42:	003b      	movs	r3, r7
 8000d44:	4303      	orrs	r3, r0
 8000d46:	d11d      	bne.n	8000d84 <__aeabi_dsub+0x5a8>
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	2500      	movs	r5, #0
 8000d4c:	0312      	lsls	r2, r2, #12
 8000d4e:	e70b      	b.n	8000b68 <__aeabi_dsub+0x38c>
 8000d50:	08c0      	lsrs	r0, r0, #3
 8000d52:	077b      	lsls	r3, r7, #29
 8000d54:	465d      	mov	r5, fp
 8000d56:	4303      	orrs	r3, r0
 8000d58:	08fa      	lsrs	r2, r7, #3
 8000d5a:	e6d3      	b.n	8000b04 <__aeabi_dsub+0x328>
 8000d5c:	1ac4      	subs	r4, r0, r3
 8000d5e:	42a0      	cmp	r0, r4
 8000d60:	4180      	sbcs	r0, r0
 8000d62:	464b      	mov	r3, r9
 8000d64:	4240      	negs	r0, r0
 8000d66:	1aff      	subs	r7, r7, r3
 8000d68:	1a3b      	subs	r3, r7, r0
 8000d6a:	469a      	mov	sl, r3
 8000d6c:	465d      	mov	r5, fp
 8000d6e:	e597      	b.n	80008a0 <__aeabi_dsub+0xc4>
 8000d70:	1a1c      	subs	r4, r3, r0
 8000d72:	464a      	mov	r2, r9
 8000d74:	42a3      	cmp	r3, r4
 8000d76:	419b      	sbcs	r3, r3
 8000d78:	1bd7      	subs	r7, r2, r7
 8000d7a:	425b      	negs	r3, r3
 8000d7c:	1afb      	subs	r3, r7, r3
 8000d7e:	469a      	mov	sl, r3
 8000d80:	2601      	movs	r6, #1
 8000d82:	e585      	b.n	8000890 <__aeabi_dsub+0xb4>
 8000d84:	08c0      	lsrs	r0, r0, #3
 8000d86:	077b      	lsls	r3, r7, #29
 8000d88:	465d      	mov	r5, fp
 8000d8a:	4303      	orrs	r3, r0
 8000d8c:	08fa      	lsrs	r2, r7, #3
 8000d8e:	e6e7      	b.n	8000b60 <__aeabi_dsub+0x384>
 8000d90:	464a      	mov	r2, r9
 8000d92:	08db      	lsrs	r3, r3, #3
 8000d94:	0752      	lsls	r2, r2, #29
 8000d96:	4313      	orrs	r3, r2
 8000d98:	464a      	mov	r2, r9
 8000d9a:	08d2      	lsrs	r2, r2, #3
 8000d9c:	e6b5      	b.n	8000b0a <__aeabi_dsub+0x32e>
 8000d9e:	08c0      	lsrs	r0, r0, #3
 8000da0:	077b      	lsls	r3, r7, #29
 8000da2:	4303      	orrs	r3, r0
 8000da4:	08fa      	lsrs	r2, r7, #3
 8000da6:	e6db      	b.n	8000b60 <__aeabi_dsub+0x384>
 8000da8:	4649      	mov	r1, r9
 8000daa:	4319      	orrs	r1, r3
 8000dac:	000b      	movs	r3, r1
 8000dae:	1e59      	subs	r1, r3, #1
 8000db0:	418b      	sbcs	r3, r1
 8000db2:	001c      	movs	r4, r3
 8000db4:	e653      	b.n	8000a5e <__aeabi_dsub+0x282>
 8000db6:	464d      	mov	r5, r9
 8000db8:	3c20      	subs	r4, #32
 8000dba:	40e5      	lsrs	r5, r4
 8000dbc:	2920      	cmp	r1, #32
 8000dbe:	d005      	beq.n	8000dcc <__aeabi_dsub+0x5f0>
 8000dc0:	2440      	movs	r4, #64	; 0x40
 8000dc2:	1a64      	subs	r4, r4, r1
 8000dc4:	4649      	mov	r1, r9
 8000dc6:	40a1      	lsls	r1, r4
 8000dc8:	430b      	orrs	r3, r1
 8000dca:	4698      	mov	r8, r3
 8000dcc:	4643      	mov	r3, r8
 8000dce:	1e5c      	subs	r4, r3, #1
 8000dd0:	41a3      	sbcs	r3, r4
 8000dd2:	432b      	orrs	r3, r5
 8000dd4:	e776      	b.n	8000cc4 <__aeabi_dsub+0x4e8>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d0e1      	beq.n	8000d9e <__aeabi_dsub+0x5c2>
 8000dda:	003a      	movs	r2, r7
 8000ddc:	08db      	lsrs	r3, r3, #3
 8000dde:	4302      	orrs	r2, r0
 8000de0:	d100      	bne.n	8000de4 <__aeabi_dsub+0x608>
 8000de2:	e6b8      	b.n	8000b56 <__aeabi_dsub+0x37a>
 8000de4:	464a      	mov	r2, r9
 8000de6:	0752      	lsls	r2, r2, #29
 8000de8:	2480      	movs	r4, #128	; 0x80
 8000dea:	4313      	orrs	r3, r2
 8000dec:	464a      	mov	r2, r9
 8000dee:	0324      	lsls	r4, r4, #12
 8000df0:	08d2      	lsrs	r2, r2, #3
 8000df2:	4222      	tst	r2, r4
 8000df4:	d007      	beq.n	8000e06 <__aeabi_dsub+0x62a>
 8000df6:	08fe      	lsrs	r6, r7, #3
 8000df8:	4226      	tst	r6, r4
 8000dfa:	d104      	bne.n	8000e06 <__aeabi_dsub+0x62a>
 8000dfc:	465d      	mov	r5, fp
 8000dfe:	0032      	movs	r2, r6
 8000e00:	08c3      	lsrs	r3, r0, #3
 8000e02:	077f      	lsls	r7, r7, #29
 8000e04:	433b      	orrs	r3, r7
 8000e06:	0f59      	lsrs	r1, r3, #29
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	0749      	lsls	r1, r1, #29
 8000e0c:	08db      	lsrs	r3, r3, #3
 8000e0e:	430b      	orrs	r3, r1
 8000e10:	e6a6      	b.n	8000b60 <__aeabi_dsub+0x384>
 8000e12:	1ac4      	subs	r4, r0, r3
 8000e14:	42a0      	cmp	r0, r4
 8000e16:	4180      	sbcs	r0, r0
 8000e18:	464b      	mov	r3, r9
 8000e1a:	4240      	negs	r0, r0
 8000e1c:	1aff      	subs	r7, r7, r3
 8000e1e:	1a3b      	subs	r3, r7, r0
 8000e20:	469a      	mov	sl, r3
 8000e22:	465d      	mov	r5, fp
 8000e24:	2601      	movs	r6, #1
 8000e26:	e533      	b.n	8000890 <__aeabi_dsub+0xb4>
 8000e28:	003b      	movs	r3, r7
 8000e2a:	4303      	orrs	r3, r0
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_dsub+0x654>
 8000e2e:	e715      	b.n	8000c5c <__aeabi_dsub+0x480>
 8000e30:	08c0      	lsrs	r0, r0, #3
 8000e32:	077b      	lsls	r3, r7, #29
 8000e34:	465d      	mov	r5, fp
 8000e36:	4303      	orrs	r3, r0
 8000e38:	08fa      	lsrs	r2, r7, #3
 8000e3a:	e666      	b.n	8000b0a <__aeabi_dsub+0x32e>
 8000e3c:	08c0      	lsrs	r0, r0, #3
 8000e3e:	077b      	lsls	r3, r7, #29
 8000e40:	4303      	orrs	r3, r0
 8000e42:	08fa      	lsrs	r2, r7, #3
 8000e44:	e65e      	b.n	8000b04 <__aeabi_dsub+0x328>
 8000e46:	003a      	movs	r2, r7
 8000e48:	08db      	lsrs	r3, r3, #3
 8000e4a:	4302      	orrs	r2, r0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_dsub+0x674>
 8000e4e:	e682      	b.n	8000b56 <__aeabi_dsub+0x37a>
 8000e50:	464a      	mov	r2, r9
 8000e52:	0752      	lsls	r2, r2, #29
 8000e54:	2480      	movs	r4, #128	; 0x80
 8000e56:	4313      	orrs	r3, r2
 8000e58:	464a      	mov	r2, r9
 8000e5a:	0324      	lsls	r4, r4, #12
 8000e5c:	08d2      	lsrs	r2, r2, #3
 8000e5e:	4222      	tst	r2, r4
 8000e60:	d007      	beq.n	8000e72 <__aeabi_dsub+0x696>
 8000e62:	08fe      	lsrs	r6, r7, #3
 8000e64:	4226      	tst	r6, r4
 8000e66:	d104      	bne.n	8000e72 <__aeabi_dsub+0x696>
 8000e68:	465d      	mov	r5, fp
 8000e6a:	0032      	movs	r2, r6
 8000e6c:	08c3      	lsrs	r3, r0, #3
 8000e6e:	077f      	lsls	r7, r7, #29
 8000e70:	433b      	orrs	r3, r7
 8000e72:	0f59      	lsrs	r1, r3, #29
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	08db      	lsrs	r3, r3, #3
 8000e78:	0749      	lsls	r1, r1, #29
 8000e7a:	430b      	orrs	r3, r1
 8000e7c:	e670      	b.n	8000b60 <__aeabi_dsub+0x384>
 8000e7e:	08c0      	lsrs	r0, r0, #3
 8000e80:	077b      	lsls	r3, r7, #29
 8000e82:	4303      	orrs	r3, r0
 8000e84:	08fa      	lsrs	r2, r7, #3
 8000e86:	e640      	b.n	8000b0a <__aeabi_dsub+0x32e>
 8000e88:	464c      	mov	r4, r9
 8000e8a:	3920      	subs	r1, #32
 8000e8c:	40cc      	lsrs	r4, r1
 8000e8e:	4661      	mov	r1, ip
 8000e90:	2920      	cmp	r1, #32
 8000e92:	d006      	beq.n	8000ea2 <__aeabi_dsub+0x6c6>
 8000e94:	4666      	mov	r6, ip
 8000e96:	2140      	movs	r1, #64	; 0x40
 8000e98:	1b89      	subs	r1, r1, r6
 8000e9a:	464e      	mov	r6, r9
 8000e9c:	408e      	lsls	r6, r1
 8000e9e:	4333      	orrs	r3, r6
 8000ea0:	4698      	mov	r8, r3
 8000ea2:	4643      	mov	r3, r8
 8000ea4:	1e59      	subs	r1, r3, #1
 8000ea6:	418b      	sbcs	r3, r1
 8000ea8:	431c      	orrs	r4, r3
 8000eaa:	e5d8      	b.n	8000a5e <__aeabi_dsub+0x282>
 8000eac:	181c      	adds	r4, r3, r0
 8000eae:	4284      	cmp	r4, r0
 8000eb0:	4180      	sbcs	r0, r0
 8000eb2:	444f      	add	r7, r9
 8000eb4:	46ba      	mov	sl, r7
 8000eb6:	4240      	negs	r0, r0
 8000eb8:	4482      	add	sl, r0
 8000eba:	e6d9      	b.n	8000c70 <__aeabi_dsub+0x494>
 8000ebc:	4653      	mov	r3, sl
 8000ebe:	4323      	orrs	r3, r4
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_dsub+0x6e8>
 8000ec2:	e6cb      	b.n	8000c5c <__aeabi_dsub+0x480>
 8000ec4:	e614      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	000007ff 	.word	0x000007ff
 8000ecc:	ff7fffff 	.word	0xff7fffff
 8000ed0:	000007fe 	.word	0x000007fe
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	4a01      	ldr	r2, [pc, #4]	; (8000edc <__aeabi_dsub+0x700>)
 8000ed8:	001c      	movs	r4, r3
 8000eda:	e529      	b.n	8000930 <__aeabi_dsub+0x154>
 8000edc:	000007ff 	.word	0x000007ff

08000ee0 <__aeabi_d2iz>:
 8000ee0:	000a      	movs	r2, r1
 8000ee2:	b530      	push	{r4, r5, lr}
 8000ee4:	4c13      	ldr	r4, [pc, #76]	; (8000f34 <__aeabi_d2iz+0x54>)
 8000ee6:	0053      	lsls	r3, r2, #1
 8000ee8:	0309      	lsls	r1, r1, #12
 8000eea:	0005      	movs	r5, r0
 8000eec:	0b09      	lsrs	r1, r1, #12
 8000eee:	2000      	movs	r0, #0
 8000ef0:	0d5b      	lsrs	r3, r3, #21
 8000ef2:	0fd2      	lsrs	r2, r2, #31
 8000ef4:	42a3      	cmp	r3, r4
 8000ef6:	dd04      	ble.n	8000f02 <__aeabi_d2iz+0x22>
 8000ef8:	480f      	ldr	r0, [pc, #60]	; (8000f38 <__aeabi_d2iz+0x58>)
 8000efa:	4283      	cmp	r3, r0
 8000efc:	dd02      	ble.n	8000f04 <__aeabi_d2iz+0x24>
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <__aeabi_d2iz+0x5c>)
 8000f00:	18d0      	adds	r0, r2, r3
 8000f02:	bd30      	pop	{r4, r5, pc}
 8000f04:	2080      	movs	r0, #128	; 0x80
 8000f06:	0340      	lsls	r0, r0, #13
 8000f08:	4301      	orrs	r1, r0
 8000f0a:	480d      	ldr	r0, [pc, #52]	; (8000f40 <__aeabi_d2iz+0x60>)
 8000f0c:	1ac0      	subs	r0, r0, r3
 8000f0e:	281f      	cmp	r0, #31
 8000f10:	dd08      	ble.n	8000f24 <__aeabi_d2iz+0x44>
 8000f12:	480c      	ldr	r0, [pc, #48]	; (8000f44 <__aeabi_d2iz+0x64>)
 8000f14:	1ac3      	subs	r3, r0, r3
 8000f16:	40d9      	lsrs	r1, r3
 8000f18:	000b      	movs	r3, r1
 8000f1a:	4258      	negs	r0, r3
 8000f1c:	2a00      	cmp	r2, #0
 8000f1e:	d1f0      	bne.n	8000f02 <__aeabi_d2iz+0x22>
 8000f20:	0018      	movs	r0, r3
 8000f22:	e7ee      	b.n	8000f02 <__aeabi_d2iz+0x22>
 8000f24:	4c08      	ldr	r4, [pc, #32]	; (8000f48 <__aeabi_d2iz+0x68>)
 8000f26:	40c5      	lsrs	r5, r0
 8000f28:	46a4      	mov	ip, r4
 8000f2a:	4463      	add	r3, ip
 8000f2c:	4099      	lsls	r1, r3
 8000f2e:	000b      	movs	r3, r1
 8000f30:	432b      	orrs	r3, r5
 8000f32:	e7f2      	b.n	8000f1a <__aeabi_d2iz+0x3a>
 8000f34:	000003fe 	.word	0x000003fe
 8000f38:	0000041d 	.word	0x0000041d
 8000f3c:	7fffffff 	.word	0x7fffffff
 8000f40:	00000433 	.word	0x00000433
 8000f44:	00000413 	.word	0x00000413
 8000f48:	fffffbed 	.word	0xfffffbed

08000f4c <__aeabi_ui2d>:
 8000f4c:	b510      	push	{r4, lr}
 8000f4e:	1e04      	subs	r4, r0, #0
 8000f50:	d010      	beq.n	8000f74 <__aeabi_ui2d+0x28>
 8000f52:	f000 f85f 	bl	8001014 <__clzsi2>
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <__aeabi_ui2d+0x48>)
 8000f58:	1a1b      	subs	r3, r3, r0
 8000f5a:	280a      	cmp	r0, #10
 8000f5c:	dc11      	bgt.n	8000f82 <__aeabi_ui2d+0x36>
 8000f5e:	220b      	movs	r2, #11
 8000f60:	0021      	movs	r1, r4
 8000f62:	1a12      	subs	r2, r2, r0
 8000f64:	40d1      	lsrs	r1, r2
 8000f66:	3015      	adds	r0, #21
 8000f68:	030a      	lsls	r2, r1, #12
 8000f6a:	055b      	lsls	r3, r3, #21
 8000f6c:	4084      	lsls	r4, r0
 8000f6e:	0b12      	lsrs	r2, r2, #12
 8000f70:	0d5b      	lsrs	r3, r3, #21
 8000f72:	e001      	b.n	8000f78 <__aeabi_ui2d+0x2c>
 8000f74:	2300      	movs	r3, #0
 8000f76:	2200      	movs	r2, #0
 8000f78:	051b      	lsls	r3, r3, #20
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	0020      	movs	r0, r4
 8000f7e:	0019      	movs	r1, r3
 8000f80:	bd10      	pop	{r4, pc}
 8000f82:	0022      	movs	r2, r4
 8000f84:	380b      	subs	r0, #11
 8000f86:	4082      	lsls	r2, r0
 8000f88:	055b      	lsls	r3, r3, #21
 8000f8a:	0312      	lsls	r2, r2, #12
 8000f8c:	2400      	movs	r4, #0
 8000f8e:	0b12      	lsrs	r2, r2, #12
 8000f90:	0d5b      	lsrs	r3, r3, #21
 8000f92:	e7f1      	b.n	8000f78 <__aeabi_ui2d+0x2c>
 8000f94:	0000041e 	.word	0x0000041e

08000f98 <__aeabi_cdrcmple>:
 8000f98:	4684      	mov	ip, r0
 8000f9a:	0010      	movs	r0, r2
 8000f9c:	4662      	mov	r2, ip
 8000f9e:	468c      	mov	ip, r1
 8000fa0:	0019      	movs	r1, r3
 8000fa2:	4663      	mov	r3, ip
 8000fa4:	e000      	b.n	8000fa8 <__aeabi_cdcmpeq>
 8000fa6:	46c0      	nop			; (mov r8, r8)

08000fa8 <__aeabi_cdcmpeq>:
 8000fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000faa:	f000 f8f9 	bl	80011a0 <__ledf2>
 8000fae:	2800      	cmp	r0, #0
 8000fb0:	d401      	bmi.n	8000fb6 <__aeabi_cdcmpeq+0xe>
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	42c8      	cmn	r0, r1
 8000fb6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000fb8 <__aeabi_dcmpeq>:
 8000fb8:	b510      	push	{r4, lr}
 8000fba:	f000 f849 	bl	8001050 <__eqdf2>
 8000fbe:	4240      	negs	r0, r0
 8000fc0:	3001      	adds	r0, #1
 8000fc2:	bd10      	pop	{r4, pc}

08000fc4 <__aeabi_dcmplt>:
 8000fc4:	b510      	push	{r4, lr}
 8000fc6:	f000 f8eb 	bl	80011a0 <__ledf2>
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	db01      	blt.n	8000fd2 <__aeabi_dcmplt+0xe>
 8000fce:	2000      	movs	r0, #0
 8000fd0:	bd10      	pop	{r4, pc}
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	bd10      	pop	{r4, pc}
 8000fd6:	46c0      	nop			; (mov r8, r8)

08000fd8 <__aeabi_dcmple>:
 8000fd8:	b510      	push	{r4, lr}
 8000fda:	f000 f8e1 	bl	80011a0 <__ledf2>
 8000fde:	2800      	cmp	r0, #0
 8000fe0:	dd01      	ble.n	8000fe6 <__aeabi_dcmple+0xe>
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	bd10      	pop	{r4, pc}
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	bd10      	pop	{r4, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)

08000fec <__aeabi_dcmpgt>:
 8000fec:	b510      	push	{r4, lr}
 8000fee:	f000 f871 	bl	80010d4 <__gedf2>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	dc01      	bgt.n	8000ffa <__aeabi_dcmpgt+0xe>
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	bd10      	pop	{r4, pc}
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	bd10      	pop	{r4, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)

08001000 <__aeabi_dcmpge>:
 8001000:	b510      	push	{r4, lr}
 8001002:	f000 f867 	bl	80010d4 <__gedf2>
 8001006:	2800      	cmp	r0, #0
 8001008:	da01      	bge.n	800100e <__aeabi_dcmpge+0xe>
 800100a:	2000      	movs	r0, #0
 800100c:	bd10      	pop	{r4, pc}
 800100e:	2001      	movs	r0, #1
 8001010:	bd10      	pop	{r4, pc}
 8001012:	46c0      	nop			; (mov r8, r8)

08001014 <__clzsi2>:
 8001014:	211c      	movs	r1, #28
 8001016:	2301      	movs	r3, #1
 8001018:	041b      	lsls	r3, r3, #16
 800101a:	4298      	cmp	r0, r3
 800101c:	d301      	bcc.n	8001022 <__clzsi2+0xe>
 800101e:	0c00      	lsrs	r0, r0, #16
 8001020:	3910      	subs	r1, #16
 8001022:	0a1b      	lsrs	r3, r3, #8
 8001024:	4298      	cmp	r0, r3
 8001026:	d301      	bcc.n	800102c <__clzsi2+0x18>
 8001028:	0a00      	lsrs	r0, r0, #8
 800102a:	3908      	subs	r1, #8
 800102c:	091b      	lsrs	r3, r3, #4
 800102e:	4298      	cmp	r0, r3
 8001030:	d301      	bcc.n	8001036 <__clzsi2+0x22>
 8001032:	0900      	lsrs	r0, r0, #4
 8001034:	3904      	subs	r1, #4
 8001036:	a202      	add	r2, pc, #8	; (adr r2, 8001040 <__clzsi2+0x2c>)
 8001038:	5c10      	ldrb	r0, [r2, r0]
 800103a:	1840      	adds	r0, r0, r1
 800103c:	4770      	bx	lr
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	02020304 	.word	0x02020304
 8001044:	01010101 	.word	0x01010101
	...

08001050 <__eqdf2>:
 8001050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001052:	464e      	mov	r6, r9
 8001054:	4645      	mov	r5, r8
 8001056:	46de      	mov	lr, fp
 8001058:	4657      	mov	r7, sl
 800105a:	4690      	mov	r8, r2
 800105c:	b5e0      	push	{r5, r6, r7, lr}
 800105e:	0017      	movs	r7, r2
 8001060:	031a      	lsls	r2, r3, #12
 8001062:	0b12      	lsrs	r2, r2, #12
 8001064:	0005      	movs	r5, r0
 8001066:	4684      	mov	ip, r0
 8001068:	4819      	ldr	r0, [pc, #100]	; (80010d0 <__eqdf2+0x80>)
 800106a:	030e      	lsls	r6, r1, #12
 800106c:	004c      	lsls	r4, r1, #1
 800106e:	4691      	mov	r9, r2
 8001070:	005a      	lsls	r2, r3, #1
 8001072:	0fdb      	lsrs	r3, r3, #31
 8001074:	469b      	mov	fp, r3
 8001076:	0b36      	lsrs	r6, r6, #12
 8001078:	0d64      	lsrs	r4, r4, #21
 800107a:	0fc9      	lsrs	r1, r1, #31
 800107c:	0d52      	lsrs	r2, r2, #21
 800107e:	4284      	cmp	r4, r0
 8001080:	d019      	beq.n	80010b6 <__eqdf2+0x66>
 8001082:	4282      	cmp	r2, r0
 8001084:	d010      	beq.n	80010a8 <__eqdf2+0x58>
 8001086:	2001      	movs	r0, #1
 8001088:	4294      	cmp	r4, r2
 800108a:	d10e      	bne.n	80010aa <__eqdf2+0x5a>
 800108c:	454e      	cmp	r6, r9
 800108e:	d10c      	bne.n	80010aa <__eqdf2+0x5a>
 8001090:	2001      	movs	r0, #1
 8001092:	45c4      	cmp	ip, r8
 8001094:	d109      	bne.n	80010aa <__eqdf2+0x5a>
 8001096:	4559      	cmp	r1, fp
 8001098:	d017      	beq.n	80010ca <__eqdf2+0x7a>
 800109a:	2c00      	cmp	r4, #0
 800109c:	d105      	bne.n	80010aa <__eqdf2+0x5a>
 800109e:	0030      	movs	r0, r6
 80010a0:	4328      	orrs	r0, r5
 80010a2:	1e43      	subs	r3, r0, #1
 80010a4:	4198      	sbcs	r0, r3
 80010a6:	e000      	b.n	80010aa <__eqdf2+0x5a>
 80010a8:	2001      	movs	r0, #1
 80010aa:	bcf0      	pop	{r4, r5, r6, r7}
 80010ac:	46bb      	mov	fp, r7
 80010ae:	46b2      	mov	sl, r6
 80010b0:	46a9      	mov	r9, r5
 80010b2:	46a0      	mov	r8, r4
 80010b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010b6:	0033      	movs	r3, r6
 80010b8:	2001      	movs	r0, #1
 80010ba:	432b      	orrs	r3, r5
 80010bc:	d1f5      	bne.n	80010aa <__eqdf2+0x5a>
 80010be:	42a2      	cmp	r2, r4
 80010c0:	d1f3      	bne.n	80010aa <__eqdf2+0x5a>
 80010c2:	464b      	mov	r3, r9
 80010c4:	433b      	orrs	r3, r7
 80010c6:	d1f0      	bne.n	80010aa <__eqdf2+0x5a>
 80010c8:	e7e2      	b.n	8001090 <__eqdf2+0x40>
 80010ca:	2000      	movs	r0, #0
 80010cc:	e7ed      	b.n	80010aa <__eqdf2+0x5a>
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	000007ff 	.word	0x000007ff

080010d4 <__gedf2>:
 80010d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d6:	4647      	mov	r7, r8
 80010d8:	46ce      	mov	lr, r9
 80010da:	0004      	movs	r4, r0
 80010dc:	0018      	movs	r0, r3
 80010de:	0016      	movs	r6, r2
 80010e0:	031b      	lsls	r3, r3, #12
 80010e2:	0b1b      	lsrs	r3, r3, #12
 80010e4:	4d2d      	ldr	r5, [pc, #180]	; (800119c <__gedf2+0xc8>)
 80010e6:	004a      	lsls	r2, r1, #1
 80010e8:	4699      	mov	r9, r3
 80010ea:	b580      	push	{r7, lr}
 80010ec:	0043      	lsls	r3, r0, #1
 80010ee:	030f      	lsls	r7, r1, #12
 80010f0:	46a4      	mov	ip, r4
 80010f2:	46b0      	mov	r8, r6
 80010f4:	0b3f      	lsrs	r7, r7, #12
 80010f6:	0d52      	lsrs	r2, r2, #21
 80010f8:	0fc9      	lsrs	r1, r1, #31
 80010fa:	0d5b      	lsrs	r3, r3, #21
 80010fc:	0fc0      	lsrs	r0, r0, #31
 80010fe:	42aa      	cmp	r2, r5
 8001100:	d021      	beq.n	8001146 <__gedf2+0x72>
 8001102:	42ab      	cmp	r3, r5
 8001104:	d013      	beq.n	800112e <__gedf2+0x5a>
 8001106:	2a00      	cmp	r2, #0
 8001108:	d122      	bne.n	8001150 <__gedf2+0x7c>
 800110a:	433c      	orrs	r4, r7
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <__gedf2+0x42>
 8001110:	464d      	mov	r5, r9
 8001112:	432e      	orrs	r6, r5
 8001114:	d022      	beq.n	800115c <__gedf2+0x88>
 8001116:	2c00      	cmp	r4, #0
 8001118:	d010      	beq.n	800113c <__gedf2+0x68>
 800111a:	4281      	cmp	r1, r0
 800111c:	d022      	beq.n	8001164 <__gedf2+0x90>
 800111e:	2002      	movs	r0, #2
 8001120:	3901      	subs	r1, #1
 8001122:	4008      	ands	r0, r1
 8001124:	3801      	subs	r0, #1
 8001126:	bcc0      	pop	{r6, r7}
 8001128:	46b9      	mov	r9, r7
 800112a:	46b0      	mov	r8, r6
 800112c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800112e:	464d      	mov	r5, r9
 8001130:	432e      	orrs	r6, r5
 8001132:	d129      	bne.n	8001188 <__gedf2+0xb4>
 8001134:	2a00      	cmp	r2, #0
 8001136:	d1f0      	bne.n	800111a <__gedf2+0x46>
 8001138:	433c      	orrs	r4, r7
 800113a:	d1ee      	bne.n	800111a <__gedf2+0x46>
 800113c:	2800      	cmp	r0, #0
 800113e:	d1f2      	bne.n	8001126 <__gedf2+0x52>
 8001140:	2001      	movs	r0, #1
 8001142:	4240      	negs	r0, r0
 8001144:	e7ef      	b.n	8001126 <__gedf2+0x52>
 8001146:	003d      	movs	r5, r7
 8001148:	4325      	orrs	r5, r4
 800114a:	d11d      	bne.n	8001188 <__gedf2+0xb4>
 800114c:	4293      	cmp	r3, r2
 800114e:	d0ee      	beq.n	800112e <__gedf2+0x5a>
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1e2      	bne.n	800111a <__gedf2+0x46>
 8001154:	464c      	mov	r4, r9
 8001156:	4326      	orrs	r6, r4
 8001158:	d1df      	bne.n	800111a <__gedf2+0x46>
 800115a:	e7e0      	b.n	800111e <__gedf2+0x4a>
 800115c:	2000      	movs	r0, #0
 800115e:	2c00      	cmp	r4, #0
 8001160:	d0e1      	beq.n	8001126 <__gedf2+0x52>
 8001162:	e7dc      	b.n	800111e <__gedf2+0x4a>
 8001164:	429a      	cmp	r2, r3
 8001166:	dc0a      	bgt.n	800117e <__gedf2+0xaa>
 8001168:	dbe8      	blt.n	800113c <__gedf2+0x68>
 800116a:	454f      	cmp	r7, r9
 800116c:	d8d7      	bhi.n	800111e <__gedf2+0x4a>
 800116e:	d00e      	beq.n	800118e <__gedf2+0xba>
 8001170:	2000      	movs	r0, #0
 8001172:	454f      	cmp	r7, r9
 8001174:	d2d7      	bcs.n	8001126 <__gedf2+0x52>
 8001176:	2900      	cmp	r1, #0
 8001178:	d0e2      	beq.n	8001140 <__gedf2+0x6c>
 800117a:	0008      	movs	r0, r1
 800117c:	e7d3      	b.n	8001126 <__gedf2+0x52>
 800117e:	4243      	negs	r3, r0
 8001180:	4158      	adcs	r0, r3
 8001182:	0040      	lsls	r0, r0, #1
 8001184:	3801      	subs	r0, #1
 8001186:	e7ce      	b.n	8001126 <__gedf2+0x52>
 8001188:	2002      	movs	r0, #2
 800118a:	4240      	negs	r0, r0
 800118c:	e7cb      	b.n	8001126 <__gedf2+0x52>
 800118e:	45c4      	cmp	ip, r8
 8001190:	d8c5      	bhi.n	800111e <__gedf2+0x4a>
 8001192:	2000      	movs	r0, #0
 8001194:	45c4      	cmp	ip, r8
 8001196:	d2c6      	bcs.n	8001126 <__gedf2+0x52>
 8001198:	e7ed      	b.n	8001176 <__gedf2+0xa2>
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	000007ff 	.word	0x000007ff

080011a0 <__ledf2>:
 80011a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a2:	4647      	mov	r7, r8
 80011a4:	46ce      	mov	lr, r9
 80011a6:	0004      	movs	r4, r0
 80011a8:	0018      	movs	r0, r3
 80011aa:	0016      	movs	r6, r2
 80011ac:	031b      	lsls	r3, r3, #12
 80011ae:	0b1b      	lsrs	r3, r3, #12
 80011b0:	4d2c      	ldr	r5, [pc, #176]	; (8001264 <__ledf2+0xc4>)
 80011b2:	004a      	lsls	r2, r1, #1
 80011b4:	4699      	mov	r9, r3
 80011b6:	b580      	push	{r7, lr}
 80011b8:	0043      	lsls	r3, r0, #1
 80011ba:	030f      	lsls	r7, r1, #12
 80011bc:	46a4      	mov	ip, r4
 80011be:	46b0      	mov	r8, r6
 80011c0:	0b3f      	lsrs	r7, r7, #12
 80011c2:	0d52      	lsrs	r2, r2, #21
 80011c4:	0fc9      	lsrs	r1, r1, #31
 80011c6:	0d5b      	lsrs	r3, r3, #21
 80011c8:	0fc0      	lsrs	r0, r0, #31
 80011ca:	42aa      	cmp	r2, r5
 80011cc:	d00d      	beq.n	80011ea <__ledf2+0x4a>
 80011ce:	42ab      	cmp	r3, r5
 80011d0:	d010      	beq.n	80011f4 <__ledf2+0x54>
 80011d2:	2a00      	cmp	r2, #0
 80011d4:	d127      	bne.n	8001226 <__ledf2+0x86>
 80011d6:	433c      	orrs	r4, r7
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d111      	bne.n	8001200 <__ledf2+0x60>
 80011dc:	464d      	mov	r5, r9
 80011de:	432e      	orrs	r6, r5
 80011e0:	d10e      	bne.n	8001200 <__ledf2+0x60>
 80011e2:	2000      	movs	r0, #0
 80011e4:	2c00      	cmp	r4, #0
 80011e6:	d015      	beq.n	8001214 <__ledf2+0x74>
 80011e8:	e00e      	b.n	8001208 <__ledf2+0x68>
 80011ea:	003d      	movs	r5, r7
 80011ec:	4325      	orrs	r5, r4
 80011ee:	d110      	bne.n	8001212 <__ledf2+0x72>
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d118      	bne.n	8001226 <__ledf2+0x86>
 80011f4:	464d      	mov	r5, r9
 80011f6:	432e      	orrs	r6, r5
 80011f8:	d10b      	bne.n	8001212 <__ledf2+0x72>
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	d102      	bne.n	8001204 <__ledf2+0x64>
 80011fe:	433c      	orrs	r4, r7
 8001200:	2c00      	cmp	r4, #0
 8001202:	d00b      	beq.n	800121c <__ledf2+0x7c>
 8001204:	4281      	cmp	r1, r0
 8001206:	d014      	beq.n	8001232 <__ledf2+0x92>
 8001208:	2002      	movs	r0, #2
 800120a:	3901      	subs	r1, #1
 800120c:	4008      	ands	r0, r1
 800120e:	3801      	subs	r0, #1
 8001210:	e000      	b.n	8001214 <__ledf2+0x74>
 8001212:	2002      	movs	r0, #2
 8001214:	bcc0      	pop	{r6, r7}
 8001216:	46b9      	mov	r9, r7
 8001218:	46b0      	mov	r8, r6
 800121a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800121c:	2800      	cmp	r0, #0
 800121e:	d1f9      	bne.n	8001214 <__ledf2+0x74>
 8001220:	2001      	movs	r0, #1
 8001222:	4240      	negs	r0, r0
 8001224:	e7f6      	b.n	8001214 <__ledf2+0x74>
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1ec      	bne.n	8001204 <__ledf2+0x64>
 800122a:	464c      	mov	r4, r9
 800122c:	4326      	orrs	r6, r4
 800122e:	d1e9      	bne.n	8001204 <__ledf2+0x64>
 8001230:	e7ea      	b.n	8001208 <__ledf2+0x68>
 8001232:	429a      	cmp	r2, r3
 8001234:	dd04      	ble.n	8001240 <__ledf2+0xa0>
 8001236:	4243      	negs	r3, r0
 8001238:	4158      	adcs	r0, r3
 800123a:	0040      	lsls	r0, r0, #1
 800123c:	3801      	subs	r0, #1
 800123e:	e7e9      	b.n	8001214 <__ledf2+0x74>
 8001240:	429a      	cmp	r2, r3
 8001242:	dbeb      	blt.n	800121c <__ledf2+0x7c>
 8001244:	454f      	cmp	r7, r9
 8001246:	d8df      	bhi.n	8001208 <__ledf2+0x68>
 8001248:	d006      	beq.n	8001258 <__ledf2+0xb8>
 800124a:	2000      	movs	r0, #0
 800124c:	454f      	cmp	r7, r9
 800124e:	d2e1      	bcs.n	8001214 <__ledf2+0x74>
 8001250:	2900      	cmp	r1, #0
 8001252:	d0e5      	beq.n	8001220 <__ledf2+0x80>
 8001254:	0008      	movs	r0, r1
 8001256:	e7dd      	b.n	8001214 <__ledf2+0x74>
 8001258:	45c4      	cmp	ip, r8
 800125a:	d8d5      	bhi.n	8001208 <__ledf2+0x68>
 800125c:	2000      	movs	r0, #0
 800125e:	45c4      	cmp	ip, r8
 8001260:	d2d8      	bcs.n	8001214 <__ledf2+0x74>
 8001262:	e7f5      	b.n	8001250 <__ledf2+0xb0>
 8001264:	000007ff 	.word	0x000007ff

08001268 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_Init+0x3c>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_Init+0x3c>)
 800127a:	2180      	movs	r1, #128	; 0x80
 800127c:	0049      	lsls	r1, r1, #1
 800127e:	430a      	orrs	r2, r1
 8001280:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001282:	2003      	movs	r0, #3
 8001284:	f000 f810 	bl	80012a8 <HAL_InitTick>
 8001288:	1e03      	subs	r3, r0, #0
 800128a:	d003      	beq.n	8001294 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800128c:	1dfb      	adds	r3, r7, #7
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
 8001292:	e001      	b.n	8001298 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001294:	f002 ff16 	bl	80040c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001298:	1dfb      	adds	r3, r7, #7
 800129a:	781b      	ldrb	r3, [r3, #0]
}
 800129c:	0018      	movs	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	b002      	add	sp, #8
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40022000 	.word	0x40022000

080012a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012b0:	230f      	movs	r3, #15
 80012b2:	18fb      	adds	r3, r7, r3
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <HAL_InitTick+0x88>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d02b      	beq.n	8001318 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80012c0:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <HAL_InitTick+0x8c>)
 80012c2:	681c      	ldr	r4, [r3, #0]
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <HAL_InitTick+0x88>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	0019      	movs	r1, r3
 80012ca:	23fa      	movs	r3, #250	; 0xfa
 80012cc:	0098      	lsls	r0, r3, #2
 80012ce:	f7fe ff19 	bl	8000104 <__udivsi3>
 80012d2:	0003      	movs	r3, r0
 80012d4:	0019      	movs	r1, r3
 80012d6:	0020      	movs	r0, r4
 80012d8:	f7fe ff14 	bl	8000104 <__udivsi3>
 80012dc:	0003      	movs	r3, r0
 80012de:	0018      	movs	r0, r3
 80012e0:	f001 f843 	bl	800236a <HAL_SYSTICK_Config>
 80012e4:	1e03      	subs	r3, r0, #0
 80012e6:	d112      	bne.n	800130e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d80a      	bhi.n	8001304 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	2301      	movs	r3, #1
 80012f2:	425b      	negs	r3, r3
 80012f4:	2200      	movs	r2, #0
 80012f6:	0018      	movs	r0, r3
 80012f8:	f001 f812 	bl	8002320 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HAL_InitTick+0x90>)
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	e00d      	b.n	8001320 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001304:	230f      	movs	r3, #15
 8001306:	18fb      	adds	r3, r7, r3
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	e008      	b.n	8001320 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800130e:	230f      	movs	r3, #15
 8001310:	18fb      	adds	r3, r7, r3
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	e003      	b.n	8001320 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001318:	230f      	movs	r3, #15
 800131a:	18fb      	adds	r3, r7, r3
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001320:	230f      	movs	r3, #15
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	781b      	ldrb	r3, [r3, #0]
}
 8001326:	0018      	movs	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	b005      	add	sp, #20
 800132c:	bd90      	pop	{r4, r7, pc}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	20000004 	.word	0x20000004
 8001334:	20000008 	.word	0x20000008
 8001338:	20000000 	.word	0x20000000

0800133c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_IncTick+0x1c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	001a      	movs	r2, r3
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <HAL_IncTick+0x20>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	18d2      	adds	r2, r2, r3
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <HAL_IncTick+0x20>)
 800134e:	601a      	str	r2, [r3, #0]
}
 8001350:	46c0      	nop			; (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	20000004 	.word	0x20000004
 800135c:	20000028 	.word	0x20000028

08001360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  return uwTick;
 8001364:	4b02      	ldr	r3, [pc, #8]	; (8001370 <HAL_GetTick+0x10>)
 8001366:	681b      	ldr	r3, [r3, #0]
}
 8001368:	0018      	movs	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	20000028 	.word	0x20000028

08001374 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a06      	ldr	r2, [pc, #24]	; (800139c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001382:	4013      	ands	r3, r2
 8001384:	0019      	movs	r1, r3
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	430a      	orrs	r2, r1
 800138c:	601a      	str	r2, [r3, #0]
}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b002      	add	sp, #8
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	40010000 	.word	0x40010000
 800139c:	fffff9ff 	.word	0xfffff9ff

080013a0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80013b0:	401a      	ands	r2, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	431a      	orrs	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	601a      	str	r2, [r3, #0]
}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	46bd      	mov	sp, r7
 80013be:	b002      	add	sp, #8
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	fe3fffff 	.word	0xfe3fffff

080013c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	23e0      	movs	r3, #224	; 0xe0
 80013d6:	045b      	lsls	r3, r3, #17
 80013d8:	4013      	ands	r3, r2
}
 80013da:	0018      	movs	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	b002      	add	sp, #8
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b084      	sub	sp, #16
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	60f8      	str	r0, [r7, #12]
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	2104      	movs	r1, #4
 80013f6:	400a      	ands	r2, r1
 80013f8:	2107      	movs	r1, #7
 80013fa:	4091      	lsls	r1, r2
 80013fc:	000a      	movs	r2, r1
 80013fe:	43d2      	mvns	r2, r2
 8001400:	401a      	ands	r2, r3
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	2104      	movs	r1, #4
 8001406:	400b      	ands	r3, r1
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	4099      	lsls	r1, r3
 800140c:	000b      	movs	r3, r1
 800140e:	431a      	orrs	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001414:	46c0      	nop			; (mov r8, r8)
 8001416:	46bd      	mov	sp, r7
 8001418:	b004      	add	sp, #16
 800141a:	bd80      	pop	{r7, pc}

0800141c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	2104      	movs	r1, #4
 800142e:	400a      	ands	r2, r1
 8001430:	2107      	movs	r1, #7
 8001432:	4091      	lsls	r1, r2
 8001434:	000a      	movs	r2, r1
 8001436:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	2104      	movs	r1, #4
 800143c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800143e:	40da      	lsrs	r2, r3
 8001440:	0013      	movs	r3, r2
}
 8001442:	0018      	movs	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	b002      	add	sp, #8
 8001448:	bd80      	pop	{r7, pc}

0800144a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	23c0      	movs	r3, #192	; 0xc0
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	4013      	ands	r3, r2
 800145c:	d101      	bne.n	8001462 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001462:	2300      	movs	r3, #0
}
 8001464:	0018      	movs	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	b002      	add	sp, #8
 800146a:	bd80      	pop	{r7, pc}

0800146c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	211f      	movs	r1, #31
 8001480:	400a      	ands	r2, r1
 8001482:	210f      	movs	r1, #15
 8001484:	4091      	lsls	r1, r2
 8001486:	000a      	movs	r2, r1
 8001488:	43d2      	mvns	r2, r2
 800148a:	401a      	ands	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	0e9b      	lsrs	r3, r3, #26
 8001490:	210f      	movs	r1, #15
 8001492:	4019      	ands	r1, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	201f      	movs	r0, #31
 8001498:	4003      	ands	r3, r0
 800149a:	4099      	lsls	r1, r3
 800149c:	000b      	movs	r3, r1
 800149e:	431a      	orrs	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b004      	add	sp, #16
 80014aa:	bd80      	pop	{r7, pc}

080014ac <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	035b      	lsls	r3, r3, #13
 80014be:	0b5b      	lsrs	r3, r3, #13
 80014c0:	431a      	orrs	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b002      	add	sp, #8
 80014cc:	bd80      	pop	{r7, pc}

080014ce <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	0352      	lsls	r2, r2, #13
 80014e0:	0b52      	lsrs	r2, r2, #13
 80014e2:	43d2      	mvns	r2, r2
 80014e4:	401a      	ands	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2203      	movs	r2, #3
 8001500:	4013      	ands	r3, r2
}
 8001502:	0018      	movs	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	b002      	add	sp, #8
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	68ba      	ldr	r2, [r7, #8]
 800151e:	0212      	lsls	r2, r2, #8
 8001520:	43d2      	mvns	r2, r2
 8001522:	401a      	ands	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	400b      	ands	r3, r1
 800152c:	4904      	ldr	r1, [pc, #16]	; (8001540 <LL_ADC_SetChannelSamplingTime+0x34>)
 800152e:	400b      	ands	r3, r1
 8001530:	431a      	orrs	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	46bd      	mov	sp, r7
 800153a:	b004      	add	sp, #16
 800153c:	bd80      	pop	{r7, pc}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	07ffff00 	.word	0x07ffff00

08001544 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	4a05      	ldr	r2, [pc, #20]	; (8001568 <LL_ADC_EnableInternalRegulator+0x24>)
 8001552:	4013      	ands	r3, r2
 8001554:	2280      	movs	r2, #128	; 0x80
 8001556:	0552      	lsls	r2, r2, #21
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	46bd      	mov	sp, r7
 8001562:	b002      	add	sp, #8
 8001564:	bd80      	pop	{r7, pc}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	6fffffe8 	.word	0x6fffffe8

0800156c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	055b      	lsls	r3, r3, #21
 800157c:	401a      	ands	r2, r3
 800157e:	2380      	movs	r3, #128	; 0x80
 8001580:	055b      	lsls	r3, r3, #21
 8001582:	429a      	cmp	r2, r3
 8001584:	d101      	bne.n	800158a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800158a:	2300      	movs	r3, #0
}
 800158c:	0018      	movs	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	b002      	add	sp, #8
 8001592:	bd80      	pop	{r7, pc}

08001594 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <LL_ADC_Enable+0x20>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	2201      	movs	r2, #1
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b002      	add	sp, #8
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	7fffffe8 	.word	0x7fffffe8

080015b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2201      	movs	r2, #1
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <LL_ADC_IsEnabled+0x18>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <LL_ADC_IsEnabled+0x1a>
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	0018      	movs	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b002      	add	sp, #8
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	4a04      	ldr	r2, [pc, #16]	; (80015fc <LL_ADC_REG_StartConversion+0x20>)
 80015ea:	4013      	ands	r3, r2
 80015ec:	2204      	movs	r2, #4
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015f4:	46c0      	nop			; (mov r8, r8)
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b002      	add	sp, #8
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	7fffffe8 	.word	0x7fffffe8

08001600 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2204      	movs	r2, #4
 800160e:	4013      	ands	r3, r2
 8001610:	2b04      	cmp	r3, #4
 8001612:	d101      	bne.n	8001618 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001618:	2300      	movs	r3, #0
}
 800161a:	0018      	movs	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	b002      	add	sp, #8
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800162c:	231f      	movs	r3, #31
 800162e:	18fb      	adds	r3, r7, r3
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001634:	2300      	movs	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e17f      	b.n	800194a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10a      	bne.n	8001668 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	0018      	movs	r0, r3
 8001656:	f002 fd5d 	bl	8004114 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2254      	movs	r2, #84	; 0x54
 8001664:	2100      	movs	r1, #0
 8001666:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	0018      	movs	r0, r3
 800166e:	f7ff ff7d 	bl	800156c <LL_ADC_IsInternalRegulatorEnabled>
 8001672:	1e03      	subs	r3, r0, #0
 8001674:	d115      	bne.n	80016a2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	0018      	movs	r0, r3
 800167c:	f7ff ff62 	bl	8001544 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001680:	4bb4      	ldr	r3, [pc, #720]	; (8001954 <HAL_ADC_Init+0x330>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	49b4      	ldr	r1, [pc, #720]	; (8001958 <HAL_ADC_Init+0x334>)
 8001686:	0018      	movs	r0, r3
 8001688:	f7fe fd3c 	bl	8000104 <__udivsi3>
 800168c:	0003      	movs	r3, r0
 800168e:	3301      	adds	r3, #1
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001694:	e002      	b.n	800169c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	3b01      	subs	r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f9      	bne.n	8001696 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	0018      	movs	r0, r3
 80016a8:	f7ff ff60 	bl	800156c <LL_ADC_IsInternalRegulatorEnabled>
 80016ac:	1e03      	subs	r3, r0, #0
 80016ae:	d10f      	bne.n	80016d0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b4:	2210      	movs	r2, #16
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c0:	2201      	movs	r2, #1
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80016c8:	231f      	movs	r3, #31
 80016ca:	18fb      	adds	r3, r7, r3
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	0018      	movs	r0, r3
 80016d6:	f7ff ff93 	bl	8001600 <LL_ADC_REG_IsConversionOngoing>
 80016da:	0003      	movs	r3, r0
 80016dc:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	2210      	movs	r2, #16
 80016e4:	4013      	ands	r3, r2
 80016e6:	d000      	beq.n	80016ea <HAL_ADC_Init+0xc6>
 80016e8:	e122      	b.n	8001930 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d000      	beq.n	80016f2 <HAL_ADC_Init+0xce>
 80016f0:	e11e      	b.n	8001930 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f6:	4a99      	ldr	r2, [pc, #612]	; (800195c <HAL_ADC_Init+0x338>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	2202      	movs	r2, #2
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	0018      	movs	r0, r3
 8001708:	f7ff ff56 	bl	80015b8 <LL_ADC_IsEnabled>
 800170c:	1e03      	subs	r3, r0, #0
 800170e:	d000      	beq.n	8001712 <HAL_ADC_Init+0xee>
 8001710:	e0ad      	b.n	800186e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	7e1b      	ldrb	r3, [r3, #24]
 800171a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800171c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7e5b      	ldrb	r3, [r3, #25]
 8001722:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001724:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	7e9b      	ldrb	r3, [r3, #26]
 800172a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800172c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <HAL_ADC_Init+0x118>
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	015b      	lsls	r3, r3, #5
 800173a:	e000      	b.n	800173e <HAL_ADC_Init+0x11a>
 800173c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800173e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001744:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	2b00      	cmp	r3, #0
 800174c:	da04      	bge.n	8001758 <HAL_ADC_Init+0x134>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	085b      	lsrs	r3, r3, #1
 8001756:	e001      	b.n	800175c <HAL_ADC_Init+0x138>
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800175c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	212c      	movs	r1, #44	; 0x2c
 8001762:	5c5b      	ldrb	r3, [r3, r1]
 8001764:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001766:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2220      	movs	r2, #32
 8001772:	5c9b      	ldrb	r3, [r3, r2]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d115      	bne.n	80017a4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7e9b      	ldrb	r3, [r3, #26]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d105      	bne.n	800178c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	2280      	movs	r2, #128	; 0x80
 8001784:	0252      	lsls	r2, r2, #9
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
 800178a:	e00b      	b.n	80017a4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001790:	2220      	movs	r2, #32
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179c:	2201      	movs	r2, #1
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00a      	beq.n	80017c2 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b0:	23e0      	movs	r3, #224	; 0xe0
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80017ba:	4313      	orrs	r3, r2
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	4a65      	ldr	r2, [pc, #404]	; (8001960 <HAL_ADC_Init+0x33c>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	0019      	movs	r1, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	0f9b      	lsrs	r3, r3, #30
 80017de:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80017e4:	4313      	orrs	r3, r2
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	223c      	movs	r2, #60	; 0x3c
 80017f0:	5c9b      	ldrb	r3, [r3, r2]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d111      	bne.n	800181a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	0f9b      	lsrs	r3, r3, #30
 80017fc:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001802:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001808:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800180e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	4313      	orrs	r3, r2
 8001814:	2201      	movs	r2, #1
 8001816:	4313      	orrs	r3, r2
 8001818:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	4a50      	ldr	r2, [pc, #320]	; (8001964 <HAL_ADC_Init+0x340>)
 8001822:	4013      	ands	r3, r2
 8001824:	0019      	movs	r1, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	430a      	orrs	r2, r1
 800182e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	23c0      	movs	r3, #192	; 0xc0
 8001836:	061b      	lsls	r3, r3, #24
 8001838:	429a      	cmp	r2, r3
 800183a:	d018      	beq.n	800186e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	05db      	lsls	r3, r3, #23
 8001844:	429a      	cmp	r2, r3
 8001846:	d012      	beq.n	800186e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	061b      	lsls	r3, r3, #24
 8001850:	429a      	cmp	r2, r3
 8001852:	d00c      	beq.n	800186e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001854:	4b44      	ldr	r3, [pc, #272]	; (8001968 <HAL_ADC_Init+0x344>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a44      	ldr	r2, [pc, #272]	; (800196c <HAL_ADC_Init+0x348>)
 800185a:	4013      	ands	r3, r2
 800185c:	0019      	movs	r1, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	23f0      	movs	r3, #240	; 0xf0
 8001864:	039b      	lsls	r3, r3, #14
 8001866:	401a      	ands	r2, r3
 8001868:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <HAL_ADC_Init+0x344>)
 800186a:	430a      	orrs	r2, r1
 800186c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001876:	001a      	movs	r2, r3
 8001878:	2100      	movs	r1, #0
 800187a:	f7ff fdb2 	bl	80013e2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001886:	493a      	ldr	r1, [pc, #232]	; (8001970 <HAL_ADC_Init+0x34c>)
 8001888:	001a      	movs	r2, r3
 800188a:	f7ff fdaa 	bl	80013e2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2110      	movs	r1, #16
 80018a2:	4249      	negs	r1, r1
 80018a4:	430a      	orrs	r2, r1
 80018a6:	629a      	str	r2, [r3, #40]	; 0x28
 80018a8:	e018      	b.n	80018dc <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691a      	ldr	r2, [r3, #16]
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	039b      	lsls	r3, r3, #14
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d112      	bne.n	80018dc <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	221c      	movs	r2, #28
 80018c6:	4013      	ands	r3, r2
 80018c8:	2210      	movs	r2, #16
 80018ca:	4252      	negs	r2, r2
 80018cc:	409a      	lsls	r2, r3
 80018ce:	0011      	movs	r1, r2
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2100      	movs	r1, #0
 80018e2:	0018      	movs	r0, r3
 80018e4:	f7ff fd9a 	bl	800141c <LL_ADC_GetSamplingTimeCommonChannels>
 80018e8:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d10b      	bne.n	800190a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fc:	2203      	movs	r2, #3
 80018fe:	4393      	bics	r3, r2
 8001900:	2201      	movs	r2, #1
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001908:	e01c      	b.n	8001944 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	2212      	movs	r2, #18
 8001910:	4393      	bics	r3, r2
 8001912:	2210      	movs	r2, #16
 8001914:	431a      	orrs	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191e:	2201      	movs	r2, #1
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001926:	231f      	movs	r3, #31
 8001928:	18fb      	adds	r3, r7, r3
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800192e:	e009      	b.n	8001944 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001934:	2210      	movs	r2, #16
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800193c:	231f      	movs	r3, #31
 800193e:	18fb      	adds	r3, r7, r3
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001944:	231f      	movs	r3, #31
 8001946:	18fb      	adds	r3, r7, r3
 8001948:	781b      	ldrb	r3, [r3, #0]
}
 800194a:	0018      	movs	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	b008      	add	sp, #32
 8001950:	bd80      	pop	{r7, pc}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	20000008 	.word	0x20000008
 8001958:	00030d40 	.word	0x00030d40
 800195c:	fffffefd 	.word	0xfffffefd
 8001960:	ffde0201 	.word	0xffde0201
 8001964:	1ffffc02 	.word	0x1ffffc02
 8001968:	40012708 	.word	0x40012708
 800196c:	ffc3ffff 	.word	0xffc3ffff
 8001970:	07ffff04 	.word	0x07ffff04

08001974 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001974:	b5b0      	push	{r4, r5, r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	0018      	movs	r0, r3
 8001982:	f7ff fe3d 	bl	8001600 <LL_ADC_REG_IsConversionOngoing>
 8001986:	1e03      	subs	r3, r0, #0
 8001988:	d15f      	bne.n	8001a4a <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2254      	movs	r2, #84	; 0x54
 800198e:	5c9b      	ldrb	r3, [r3, r2]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <HAL_ADC_Start_IT+0x24>
 8001994:	2302      	movs	r3, #2
 8001996:	e05f      	b.n	8001a58 <HAL_ADC_Start_IT+0xe4>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2254      	movs	r2, #84	; 0x54
 800199c:	2101      	movs	r1, #1
 800199e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019a0:	250f      	movs	r5, #15
 80019a2:	197c      	adds	r4, r7, r5
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	0018      	movs	r0, r3
 80019a8:	f000 fb68 	bl	800207c <ADC_Enable>
 80019ac:	0003      	movs	r3, r0
 80019ae:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019b0:	197b      	adds	r3, r7, r5
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d143      	bne.n	8001a40 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019bc:	4a28      	ldr	r2, [pc, #160]	; (8001a60 <HAL_ADC_Start_IT+0xec>)
 80019be:	4013      	ands	r3, r2
 80019c0:	2280      	movs	r2, #128	; 0x80
 80019c2:	0052      	lsls	r2, r2, #1
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	221c      	movs	r2, #28
 80019d6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2254      	movs	r2, #84	; 0x54
 80019dc:	2100      	movs	r1, #0
 80019de:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	211c      	movs	r1, #28
 80019ec:	438a      	bics	r2, r1
 80019ee:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d108      	bne.n	8001a0a <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2108      	movs	r1, #8
 8001a04:	430a      	orrs	r2, r1
 8001a06:	605a      	str	r2, [r3, #4]
          break;
 8001a08:	e008      	b.n	8001a1c <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2104      	movs	r1, #4
 8001a16:	430a      	orrs	r2, r1
 8001a18:	605a      	str	r2, [r3, #4]
          break;
 8001a1a:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d107      	bne.n	8001a34 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2110      	movs	r1, #16
 8001a30:	430a      	orrs	r2, r1
 8001a32:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f7ff fdcf 	bl	80015dc <LL_ADC_REG_StartConversion>
 8001a3e:	e008      	b.n	8001a52 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2254      	movs	r2, #84	; 0x54
 8001a44:	2100      	movs	r1, #0
 8001a46:	5499      	strb	r1, [r3, r2]
 8001a48:	e003      	b.n	8001a52 <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a4a:	230f      	movs	r3, #15
 8001a4c:	18fb      	adds	r3, r7, r3
 8001a4e:	2202      	movs	r2, #2
 8001a50:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001a52:	230f      	movs	r3, #15
 8001a54:	18fb      	adds	r3, r7, r3
 8001a56:	781b      	ldrb	r3, [r3, #0]
}
 8001a58:	0018      	movs	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b004      	add	sp, #16
 8001a5e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a60:	fffff0fe 	.word	0xfffff0fe

08001a64 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a72:	0018      	movs	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b002      	add	sp, #8
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d017      	beq.n	8001ad0 <HAL_ADC_IRQHandler+0x54>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d013      	beq.n	8001ad0 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aac:	2210      	movs	r2, #16
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d106      	bne.n	8001ac0 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	2280      	movs	r2, #128	; 0x80
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f000 fb70 	bl	80021a8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2202      	movs	r2, #2
 8001ace:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d003      	beq.n	8001ae0 <HAL_ADC_IRQHandler+0x64>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2204      	movs	r2, #4
 8001adc:	4013      	ands	r3, r2
 8001ade:	d107      	bne.n	8001af0 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	2208      	movs	r2, #8
 8001ae4:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ae6:	d04d      	beq.n	8001b84 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2208      	movs	r2, #8
 8001aec:	4013      	ands	r3, r2
 8001aee:	d049      	beq.n	8001b84 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af4:	2210      	movs	r2, #16
 8001af6:	4013      	ands	r3, r2
 8001af8:	d106      	bne.n	8001b08 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	2280      	movs	r2, #128	; 0x80
 8001b00:	0092      	lsls	r2, r2, #2
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f7ff fc9c 	bl	800144a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b12:	1e03      	subs	r3, r0, #0
 8001b14:	d02e      	beq.n	8001b74 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	7e9b      	ldrb	r3, [r3, #26]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d12a      	bne.n	8001b74 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2208      	movs	r2, #8
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d123      	bne.n	8001b74 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0018      	movs	r0, r3
 8001b32:	f7ff fd65 	bl	8001600 <LL_ADC_REG_IsConversionOngoing>
 8001b36:	1e03      	subs	r3, r0, #0
 8001b38:	d110      	bne.n	8001b5c <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	210c      	movs	r1, #12
 8001b46:	438a      	bics	r2, r1
 8001b48:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4e:	4a56      	ldr	r2, [pc, #344]	; (8001ca8 <HAL_ADC_IRQHandler+0x22c>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	2201      	movs	r2, #1
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	659a      	str	r2, [r3, #88]	; 0x58
 8001b5a:	e00b      	b.n	8001b74 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b60:	2220      	movs	r2, #32
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	0018      	movs	r0, r3
 8001b78:	f002 fa74 	bl	8004064 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	220c      	movs	r2, #12
 8001b82:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	2280      	movs	r2, #128	; 0x80
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d012      	beq.n	8001bb2 <HAL_ADC_IRQHandler+0x136>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2280      	movs	r2, #128	; 0x80
 8001b90:	4013      	ands	r3, r2
 8001b92:	d00e      	beq.n	8001bb2 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b98:	2280      	movs	r2, #128	; 0x80
 8001b9a:	0252      	lsls	r2, r2, #9
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f000 f881 	bl	8001cac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d014      	beq.n	8001be6 <HAL_ADC_IRQHandler+0x16a>
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d00f      	beq.n	8001be6 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	0292      	lsls	r2, r2, #10
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f000 fad6 	bl	8002188 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2280      	movs	r2, #128	; 0x80
 8001be2:	0052      	lsls	r2, r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4013      	ands	r3, r2
 8001bee:	d014      	beq.n	8001c1a <HAL_ADC_IRQHandler+0x19e>
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d00f      	beq.n	8001c1a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	02d2      	lsls	r2, r2, #11
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f000 fac4 	bl	8002198 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2280      	movs	r2, #128	; 0x80
 8001c16:	0092      	lsls	r2, r2, #2
 8001c18:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	2210      	movs	r2, #16
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d02b      	beq.n	8001c7a <HAL_ADC_IRQHandler+0x1fe>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2210      	movs	r2, #16
 8001c26:	4013      	ands	r3, r2
 8001c28:	d027      	beq.n	8001c7a <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001c32:	2301      	movs	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e008      	b.n	8001c4a <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7ff fc58 	bl	80014f2 <LL_ADC_REG_GetDMATransfer>
 8001c42:	1e03      	subs	r3, r0, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8001c46:	2301      	movs	r3, #1
 8001c48:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d110      	bne.n	8001c72 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c54:	2280      	movs	r2, #128	; 0x80
 8001c56:	00d2      	lsls	r2, r2, #3
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c62:	2202      	movs	r2, #2
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f000 f825 	bl	8001cbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2210      	movs	r2, #16
 8001c78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	019b      	lsls	r3, r3, #6
 8001c80:	4013      	ands	r3, r2
 8001c82:	d00d      	beq.n	8001ca0 <HAL_ADC_IRQHandler+0x224>
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	019b      	lsls	r3, r3, #6
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d008      	beq.n	8001ca0 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	0018      	movs	r0, r3
 8001c92:	f000 fa91 	bl	80021b8 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2280      	movs	r2, #128	; 0x80
 8001c9c:	0192      	lsls	r2, r2, #6
 8001c9e:	601a      	str	r2, [r3, #0]
  }
}
 8001ca0:	46c0      	nop			; (mov r8, r8)
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b006      	add	sp, #24
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	fffffefe 	.word	0xfffffefe

08001cac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001cb4:	46c0      	nop			; (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b002      	add	sp, #8
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b002      	add	sp, #8
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd6:	2317      	movs	r3, #23
 8001cd8:	18fb      	adds	r3, r7, r3
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2254      	movs	r2, #84	; 0x54
 8001ce6:	5c9b      	ldrb	r3, [r3, r2]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x24>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e1c0      	b.n	8002072 <HAL_ADC_ConfigChannel+0x3a6>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2254      	movs	r2, #84	; 0x54
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f7ff fc7f 	bl	8001600 <LL_ADC_REG_IsConversionOngoing>
 8001d02:	1e03      	subs	r3, r0, #0
 8001d04:	d000      	beq.n	8001d08 <HAL_ADC_ConfigChannel+0x3c>
 8001d06:	e1a3      	b.n	8002050 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d100      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x46>
 8001d10:	e143      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691a      	ldr	r2, [r3, #16]
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	061b      	lsls	r3, r3, #24
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d004      	beq.n	8001d28 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d22:	4ac1      	ldr	r2, [pc, #772]	; (8002028 <HAL_ADC_ConfigChannel+0x35c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d108      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	0019      	movs	r1, r3
 8001d32:	0010      	movs	r0, r2
 8001d34:	f7ff fbba 	bl	80014ac <LL_ADC_REG_SetSequencerChAdd>
 8001d38:	e0c9      	b.n	8001ece <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	211f      	movs	r1, #31
 8001d44:	400b      	ands	r3, r1
 8001d46:	210f      	movs	r1, #15
 8001d48:	4099      	lsls	r1, r3
 8001d4a:	000b      	movs	r3, r1
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	4013      	ands	r3, r2
 8001d50:	0019      	movs	r1, r3
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	035b      	lsls	r3, r3, #13
 8001d58:	0b5b      	lsrs	r3, r3, #13
 8001d5a:	d105      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x9c>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0e9b      	lsrs	r3, r3, #26
 8001d62:	221f      	movs	r2, #31
 8001d64:	4013      	ands	r3, r2
 8001d66:	e098      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1ce>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d000      	beq.n	8001d74 <HAL_ADC_ConfigChannel+0xa8>
 8001d72:	e091      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x1cc>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2202      	movs	r2, #2
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d000      	beq.n	8001d80 <HAL_ADC_ConfigChannel+0xb4>
 8001d7e:	e089      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x1c8>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2204      	movs	r2, #4
 8001d86:	4013      	ands	r3, r2
 8001d88:	d000      	beq.n	8001d8c <HAL_ADC_ConfigChannel+0xc0>
 8001d8a:	e081      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x1c4>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2208      	movs	r2, #8
 8001d92:	4013      	ands	r3, r2
 8001d94:	d000      	beq.n	8001d98 <HAL_ADC_ConfigChannel+0xcc>
 8001d96:	e079      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x1c0>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2210      	movs	r2, #16
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d000      	beq.n	8001da4 <HAL_ADC_ConfigChannel+0xd8>
 8001da2:	e071      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x1bc>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2220      	movs	r2, #32
 8001daa:	4013      	ands	r3, r2
 8001dac:	d000      	beq.n	8001db0 <HAL_ADC_ConfigChannel+0xe4>
 8001dae:	e069      	b.n	8001e84 <HAL_ADC_ConfigChannel+0x1b8>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2240      	movs	r2, #64	; 0x40
 8001db6:	4013      	ands	r3, r2
 8001db8:	d000      	beq.n	8001dbc <HAL_ADC_ConfigChannel+0xf0>
 8001dba:	e061      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x1b4>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2280      	movs	r2, #128	; 0x80
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d000      	beq.n	8001dc8 <HAL_ADC_ConfigChannel+0xfc>
 8001dc6:	e059      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x1b0>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d151      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x1ac>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d149      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x1a8>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4013      	ands	r3, r2
 8001dea:	d141      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x1a4>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	4013      	ands	r3, r2
 8001df6:	d139      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x1a0>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	015b      	lsls	r3, r3, #5
 8001e00:	4013      	ands	r3, r2
 8001e02:	d131      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x19c>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	019b      	lsls	r3, r3, #6
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d129      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x198>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	01db      	lsls	r3, r3, #7
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d121      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x194>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	4013      	ands	r3, r2
 8001e26:	d119      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x190>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	025b      	lsls	r3, r3, #9
 8001e30:	4013      	ands	r3, r2
 8001e32:	d111      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x18c>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	029b      	lsls	r3, r3, #10
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d109      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x188>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	02db      	lsls	r3, r3, #11
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d001      	beq.n	8001e50 <HAL_ADC_ConfigChannel+0x184>
 8001e4c:	2312      	movs	r3, #18
 8001e4e:	e024      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1ce>
 8001e50:	2300      	movs	r3, #0
 8001e52:	e022      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1ce>
 8001e54:	2311      	movs	r3, #17
 8001e56:	e020      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1ce>
 8001e58:	2310      	movs	r3, #16
 8001e5a:	e01e      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1ce>
 8001e5c:	230f      	movs	r3, #15
 8001e5e:	e01c      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1ce>
 8001e60:	230e      	movs	r3, #14
 8001e62:	e01a      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1ce>
 8001e64:	230d      	movs	r3, #13
 8001e66:	e018      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1ce>
 8001e68:	230c      	movs	r3, #12
 8001e6a:	e016      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1ce>
 8001e6c:	230b      	movs	r3, #11
 8001e6e:	e014      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1ce>
 8001e70:	230a      	movs	r3, #10
 8001e72:	e012      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1ce>
 8001e74:	2309      	movs	r3, #9
 8001e76:	e010      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1ce>
 8001e78:	2308      	movs	r3, #8
 8001e7a:	e00e      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1ce>
 8001e7c:	2307      	movs	r3, #7
 8001e7e:	e00c      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1ce>
 8001e80:	2306      	movs	r3, #6
 8001e82:	e00a      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1ce>
 8001e84:	2305      	movs	r3, #5
 8001e86:	e008      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1ce>
 8001e88:	2304      	movs	r3, #4
 8001e8a:	e006      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1ce>
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e004      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1ce>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e002      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1ce>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1ce>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	6852      	ldr	r2, [r2, #4]
 8001e9e:	201f      	movs	r0, #31
 8001ea0:	4002      	ands	r2, r0
 8001ea2:	4093      	lsls	r3, r2
 8001ea4:	000a      	movs	r2, r1
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d808      	bhi.n	8001ece <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	001a      	movs	r2, r3
 8001eca:	f7ff facf 	bl	800146c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6818      	ldr	r0, [r3, #0]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	6819      	ldr	r1, [r3, #0]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	001a      	movs	r2, r3
 8001edc:	f7ff fb16 	bl	800150c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	db00      	blt.n	8001eea <HAL_ADC_ConfigChannel+0x21e>
 8001ee8:	e0bc      	b.n	8002064 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001eea:	4b50      	ldr	r3, [pc, #320]	; (800202c <HAL_ADC_ConfigChannel+0x360>)
 8001eec:	0018      	movs	r0, r3
 8001eee:	f7ff fa6b 	bl	80013c8 <LL_ADC_GetCommonPathInternalCh>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a4d      	ldr	r2, [pc, #308]	; (8002030 <HAL_ADC_ConfigChannel+0x364>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d122      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	041b      	lsls	r3, r3, #16
 8001f06:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f08:	d11d      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	2280      	movs	r2, #128	; 0x80
 8001f0e:	0412      	lsls	r2, r2, #16
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4a46      	ldr	r2, [pc, #280]	; (800202c <HAL_ADC_ConfigChannel+0x360>)
 8001f14:	0019      	movs	r1, r3
 8001f16:	0010      	movs	r0, r2
 8001f18:	f7ff fa42 	bl	80013a0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f1c:	4b45      	ldr	r3, [pc, #276]	; (8002034 <HAL_ADC_ConfigChannel+0x368>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4945      	ldr	r1, [pc, #276]	; (8002038 <HAL_ADC_ConfigChannel+0x36c>)
 8001f22:	0018      	movs	r0, r3
 8001f24:	f7fe f8ee 	bl	8000104 <__udivsi3>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	0013      	movs	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	189b      	adds	r3, r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f36:	e002      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f9      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f44:	e08e      	b.n	8002064 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a3c      	ldr	r2, [pc, #240]	; (800203c <HAL_ADC_ConfigChannel+0x370>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d10e      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	045b      	lsls	r3, r3, #17
 8001f56:	4013      	ands	r3, r2
 8001f58:	d109      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	0452      	lsls	r2, r2, #17
 8001f60:	4313      	orrs	r3, r2
 8001f62:	4a32      	ldr	r2, [pc, #200]	; (800202c <HAL_ADC_ConfigChannel+0x360>)
 8001f64:	0019      	movs	r1, r3
 8001f66:	0010      	movs	r0, r2
 8001f68:	f7ff fa1a 	bl	80013a0 <LL_ADC_SetCommonPathInternalCh>
 8001f6c:	e07a      	b.n	8002064 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a33      	ldr	r2, [pc, #204]	; (8002040 <HAL_ADC_ConfigChannel+0x374>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d000      	beq.n	8001f7a <HAL_ADC_ConfigChannel+0x2ae>
 8001f78:	e074      	b.n	8002064 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	03db      	lsls	r3, r3, #15
 8001f80:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001f82:	d000      	beq.n	8001f86 <HAL_ADC_ConfigChannel+0x2ba>
 8001f84:	e06e      	b.n	8002064 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	03d2      	lsls	r2, r2, #15
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	4a27      	ldr	r2, [pc, #156]	; (800202c <HAL_ADC_ConfigChannel+0x360>)
 8001f90:	0019      	movs	r1, r3
 8001f92:	0010      	movs	r0, r2
 8001f94:	f7ff fa04 	bl	80013a0 <LL_ADC_SetCommonPathInternalCh>
 8001f98:	e064      	b.n	8002064 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691a      	ldr	r2, [r3, #16]
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	061b      	lsls	r3, r3, #24
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d004      	beq.n	8001fb0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001faa:	4a1f      	ldr	r2, [pc, #124]	; (8002028 <HAL_ADC_ConfigChannel+0x35c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d107      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	0019      	movs	r1, r3
 8001fba:	0010      	movs	r0, r2
 8001fbc:	f7ff fa87 	bl	80014ce <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	da4d      	bge.n	8002064 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fc8:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_ADC_ConfigChannel+0x360>)
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f7ff f9fc 	bl	80013c8 <LL_ADC_GetCommonPathInternalCh>
 8001fd0:	0003      	movs	r3, r0
 8001fd2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a15      	ldr	r2, [pc, #84]	; (8002030 <HAL_ADC_ConfigChannel+0x364>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d108      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4a18      	ldr	r2, [pc, #96]	; (8002044 <HAL_ADC_ConfigChannel+0x378>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	4a11      	ldr	r2, [pc, #68]	; (800202c <HAL_ADC_ConfigChannel+0x360>)
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	0010      	movs	r0, r2
 8001fea:	f7ff f9d9 	bl	80013a0 <LL_ADC_SetCommonPathInternalCh>
 8001fee:	e039      	b.n	8002064 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a11      	ldr	r2, [pc, #68]	; (800203c <HAL_ADC_ConfigChannel+0x370>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d108      	bne.n	800200c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4a12      	ldr	r2, [pc, #72]	; (8002048 <HAL_ADC_ConfigChannel+0x37c>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	4a0a      	ldr	r2, [pc, #40]	; (800202c <HAL_ADC_ConfigChannel+0x360>)
 8002002:	0019      	movs	r1, r3
 8002004:	0010      	movs	r0, r2
 8002006:	f7ff f9cb 	bl	80013a0 <LL_ADC_SetCommonPathInternalCh>
 800200a:	e02b      	b.n	8002064 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0b      	ldr	r2, [pc, #44]	; (8002040 <HAL_ADC_ConfigChannel+0x374>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d126      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4a0c      	ldr	r2, [pc, #48]	; (800204c <HAL_ADC_ConfigChannel+0x380>)
 800201a:	4013      	ands	r3, r2
 800201c:	4a03      	ldr	r2, [pc, #12]	; (800202c <HAL_ADC_ConfigChannel+0x360>)
 800201e:	0019      	movs	r1, r3
 8002020:	0010      	movs	r0, r2
 8002022:	f7ff f9bd 	bl	80013a0 <LL_ADC_SetCommonPathInternalCh>
 8002026:	e01d      	b.n	8002064 <HAL_ADC_ConfigChannel+0x398>
 8002028:	80000004 	.word	0x80000004
 800202c:	40012708 	.word	0x40012708
 8002030:	b0001000 	.word	0xb0001000
 8002034:	20000008 	.word	0x20000008
 8002038:	00030d40 	.word	0x00030d40
 800203c:	b8004000 	.word	0xb8004000
 8002040:	b4002000 	.word	0xb4002000
 8002044:	ff7fffff 	.word	0xff7fffff
 8002048:	feffffff 	.word	0xfeffffff
 800204c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	2220      	movs	r2, #32
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800205c:	2317      	movs	r3, #23
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	2201      	movs	r2, #1
 8002062:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2254      	movs	r2, #84	; 0x54
 8002068:	2100      	movs	r1, #0
 800206a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800206c:	2317      	movs	r3, #23
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	781b      	ldrb	r3, [r3, #0]
}
 8002072:	0018      	movs	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	b006      	add	sp, #24
 8002078:	bd80      	pop	{r7, pc}
 800207a:	46c0      	nop			; (mov r8, r8)

0800207c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	0018      	movs	r0, r3
 800208e:	f7ff fa93 	bl	80015b8 <LL_ADC_IsEnabled>
 8002092:	1e03      	subs	r3, r0, #0
 8002094:	d000      	beq.n	8002098 <ADC_Enable+0x1c>
 8002096:	e069      	b.n	800216c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	4a36      	ldr	r2, [pc, #216]	; (8002178 <ADC_Enable+0xfc>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	d00d      	beq.n	80020c0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	2210      	movs	r2, #16
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b4:	2201      	movs	r2, #1
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e056      	b.n	800216e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	0018      	movs	r0, r3
 80020c6:	f7ff fa65 	bl	8001594 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80020ca:	4b2c      	ldr	r3, [pc, #176]	; (800217c <ADC_Enable+0x100>)
 80020cc:	0018      	movs	r0, r3
 80020ce:	f7ff f97b 	bl	80013c8 <LL_ADC_GetCommonPathInternalCh>
 80020d2:	0002      	movs	r2, r0
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	041b      	lsls	r3, r3, #16
 80020d8:	4013      	ands	r3, r2
 80020da:	d00f      	beq.n	80020fc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020dc:	4b28      	ldr	r3, [pc, #160]	; (8002180 <ADC_Enable+0x104>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4928      	ldr	r1, [pc, #160]	; (8002184 <ADC_Enable+0x108>)
 80020e2:	0018      	movs	r0, r3
 80020e4:	f7fe f80e 	bl	8000104 <__udivsi3>
 80020e8:	0003      	movs	r3, r0
 80020ea:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80020ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80020ee:	e002      	b.n	80020f6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1f9      	bne.n	80020f0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	7e5b      	ldrb	r3, [r3, #25]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d033      	beq.n	800216c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002104:	f7ff f92c 	bl	8001360 <HAL_GetTick>
 8002108:	0003      	movs	r3, r0
 800210a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800210c:	e027      	b.n	800215e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	0018      	movs	r0, r3
 8002114:	f7ff fa50 	bl	80015b8 <LL_ADC_IsEnabled>
 8002118:	1e03      	subs	r3, r0, #0
 800211a:	d104      	bne.n	8002126 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	0018      	movs	r0, r3
 8002122:	f7ff fa37 	bl	8001594 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002126:	f7ff f91b 	bl	8001360 <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d914      	bls.n	800215e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2201      	movs	r2, #1
 800213c:	4013      	ands	r3, r2
 800213e:	2b01      	cmp	r3, #1
 8002140:	d00d      	beq.n	800215e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	2210      	movs	r2, #16
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002152:	2201      	movs	r2, #1
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e007      	b.n	800216e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2201      	movs	r2, #1
 8002166:	4013      	ands	r3, r2
 8002168:	2b01      	cmp	r3, #1
 800216a:	d1d0      	bne.n	800210e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	0018      	movs	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	b004      	add	sp, #16
 8002174:	bd80      	pop	{r7, pc}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	80000017 	.word	0x80000017
 800217c:	40012708 	.word	0x40012708
 8002180:	20000008 	.word	0x20000008
 8002184:	00030d40 	.word	0x00030d40

08002188 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	b002      	add	sp, #8
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80021a0:	46c0      	nop			; (mov r8, r8)
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b002      	add	sp, #8
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b002      	add	sp, #8
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80021c0:	46c0      	nop			; (mov r8, r8)
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b002      	add	sp, #8
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	0002      	movs	r2, r0
 80021d0:	1dfb      	adds	r3, r7, #7
 80021d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021d4:	1dfb      	adds	r3, r7, #7
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b7f      	cmp	r3, #127	; 0x7f
 80021da:	d809      	bhi.n	80021f0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021dc:	1dfb      	adds	r3, r7, #7
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	001a      	movs	r2, r3
 80021e2:	231f      	movs	r3, #31
 80021e4:	401a      	ands	r2, r3
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <__NVIC_EnableIRQ+0x30>)
 80021e8:	2101      	movs	r1, #1
 80021ea:	4091      	lsls	r1, r2
 80021ec:	000a      	movs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b002      	add	sp, #8
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	e000e100 	.word	0xe000e100

080021fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	0002      	movs	r2, r0
 8002204:	6039      	str	r1, [r7, #0]
 8002206:	1dfb      	adds	r3, r7, #7
 8002208:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800220a:	1dfb      	adds	r3, r7, #7
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b7f      	cmp	r3, #127	; 0x7f
 8002210:	d828      	bhi.n	8002264 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002212:	4a2f      	ldr	r2, [pc, #188]	; (80022d0 <__NVIC_SetPriority+0xd4>)
 8002214:	1dfb      	adds	r3, r7, #7
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	b25b      	sxtb	r3, r3
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	33c0      	adds	r3, #192	; 0xc0
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	589b      	ldr	r3, [r3, r2]
 8002222:	1dfa      	adds	r2, r7, #7
 8002224:	7812      	ldrb	r2, [r2, #0]
 8002226:	0011      	movs	r1, r2
 8002228:	2203      	movs	r2, #3
 800222a:	400a      	ands	r2, r1
 800222c:	00d2      	lsls	r2, r2, #3
 800222e:	21ff      	movs	r1, #255	; 0xff
 8002230:	4091      	lsls	r1, r2
 8002232:	000a      	movs	r2, r1
 8002234:	43d2      	mvns	r2, r2
 8002236:	401a      	ands	r2, r3
 8002238:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	019b      	lsls	r3, r3, #6
 800223e:	22ff      	movs	r2, #255	; 0xff
 8002240:	401a      	ands	r2, r3
 8002242:	1dfb      	adds	r3, r7, #7
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	0018      	movs	r0, r3
 8002248:	2303      	movs	r3, #3
 800224a:	4003      	ands	r3, r0
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002250:	481f      	ldr	r0, [pc, #124]	; (80022d0 <__NVIC_SetPriority+0xd4>)
 8002252:	1dfb      	adds	r3, r7, #7
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	b25b      	sxtb	r3, r3
 8002258:	089b      	lsrs	r3, r3, #2
 800225a:	430a      	orrs	r2, r1
 800225c:	33c0      	adds	r3, #192	; 0xc0
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002262:	e031      	b.n	80022c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002264:	4a1b      	ldr	r2, [pc, #108]	; (80022d4 <__NVIC_SetPriority+0xd8>)
 8002266:	1dfb      	adds	r3, r7, #7
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	0019      	movs	r1, r3
 800226c:	230f      	movs	r3, #15
 800226e:	400b      	ands	r3, r1
 8002270:	3b08      	subs	r3, #8
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	3306      	adds	r3, #6
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	18d3      	adds	r3, r2, r3
 800227a:	3304      	adds	r3, #4
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	1dfa      	adds	r2, r7, #7
 8002280:	7812      	ldrb	r2, [r2, #0]
 8002282:	0011      	movs	r1, r2
 8002284:	2203      	movs	r2, #3
 8002286:	400a      	ands	r2, r1
 8002288:	00d2      	lsls	r2, r2, #3
 800228a:	21ff      	movs	r1, #255	; 0xff
 800228c:	4091      	lsls	r1, r2
 800228e:	000a      	movs	r2, r1
 8002290:	43d2      	mvns	r2, r2
 8002292:	401a      	ands	r2, r3
 8002294:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	019b      	lsls	r3, r3, #6
 800229a:	22ff      	movs	r2, #255	; 0xff
 800229c:	401a      	ands	r2, r3
 800229e:	1dfb      	adds	r3, r7, #7
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	0018      	movs	r0, r3
 80022a4:	2303      	movs	r3, #3
 80022a6:	4003      	ands	r3, r0
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022ac:	4809      	ldr	r0, [pc, #36]	; (80022d4 <__NVIC_SetPriority+0xd8>)
 80022ae:	1dfb      	adds	r3, r7, #7
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	001c      	movs	r4, r3
 80022b4:	230f      	movs	r3, #15
 80022b6:	4023      	ands	r3, r4
 80022b8:	3b08      	subs	r3, #8
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	430a      	orrs	r2, r1
 80022be:	3306      	adds	r3, #6
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	18c3      	adds	r3, r0, r3
 80022c4:	3304      	adds	r3, #4
 80022c6:	601a      	str	r2, [r3, #0]
}
 80022c8:	46c0      	nop			; (mov r8, r8)
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b003      	add	sp, #12
 80022ce:	bd90      	pop	{r4, r7, pc}
 80022d0:	e000e100 	.word	0xe000e100
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	1e5a      	subs	r2, r3, #1
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	045b      	lsls	r3, r3, #17
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d301      	bcc.n	80022f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ec:	2301      	movs	r3, #1
 80022ee:	e010      	b.n	8002312 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f0:	4b0a      	ldr	r3, [pc, #40]	; (800231c <SysTick_Config+0x44>)
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	3a01      	subs	r2, #1
 80022f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f8:	2301      	movs	r3, #1
 80022fa:	425b      	negs	r3, r3
 80022fc:	2103      	movs	r1, #3
 80022fe:	0018      	movs	r0, r3
 8002300:	f7ff ff7c 	bl	80021fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <SysTick_Config+0x44>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230a:	4b04      	ldr	r3, [pc, #16]	; (800231c <SysTick_Config+0x44>)
 800230c:	2207      	movs	r2, #7
 800230e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002310:	2300      	movs	r3, #0
}
 8002312:	0018      	movs	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	b002      	add	sp, #8
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	e000e010 	.word	0xe000e010

08002320 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	210f      	movs	r1, #15
 800232c:	187b      	adds	r3, r7, r1
 800232e:	1c02      	adds	r2, r0, #0
 8002330:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	187b      	adds	r3, r7, r1
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	b25b      	sxtb	r3, r3
 800233a:	0011      	movs	r1, r2
 800233c:	0018      	movs	r0, r3
 800233e:	f7ff ff5d 	bl	80021fc <__NVIC_SetPriority>
}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	46bd      	mov	sp, r7
 8002346:	b004      	add	sp, #16
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	0002      	movs	r2, r0
 8002352:	1dfb      	adds	r3, r7, #7
 8002354:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002356:	1dfb      	adds	r3, r7, #7
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	b25b      	sxtb	r3, r3
 800235c:	0018      	movs	r0, r3
 800235e:	f7ff ff33 	bl	80021c8 <__NVIC_EnableIRQ>
}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	46bd      	mov	sp, r7
 8002366:	b002      	add	sp, #8
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	0018      	movs	r0, r3
 8002376:	f7ff ffaf 	bl	80022d8 <SysTick_Config>
 800237a:	0003      	movs	r3, r0
}
 800237c:	0018      	movs	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	b002      	add	sp, #8
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002392:	e147      	b.n	8002624 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2101      	movs	r1, #1
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	4091      	lsls	r1, r2
 800239e:	000a      	movs	r2, r1
 80023a0:	4013      	ands	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d100      	bne.n	80023ac <HAL_GPIO_Init+0x28>
 80023aa:	e138      	b.n	800261e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2203      	movs	r2, #3
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d005      	beq.n	80023c4 <HAL_GPIO_Init+0x40>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2203      	movs	r2, #3
 80023be:	4013      	ands	r3, r2
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d130      	bne.n	8002426 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2203      	movs	r2, #3
 80023d0:	409a      	lsls	r2, r3
 80023d2:	0013      	movs	r3, r2
 80023d4:	43da      	mvns	r2, r3
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	409a      	lsls	r2, r3
 80023e6:	0013      	movs	r3, r2
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023fa:	2201      	movs	r2, #1
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	409a      	lsls	r2, r3
 8002400:	0013      	movs	r3, r2
 8002402:	43da      	mvns	r2, r3
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	091b      	lsrs	r3, r3, #4
 8002410:	2201      	movs	r2, #1
 8002412:	401a      	ands	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	409a      	lsls	r2, r3
 8002418:	0013      	movs	r3, r2
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2203      	movs	r2, #3
 800242c:	4013      	ands	r3, r2
 800242e:	2b03      	cmp	r3, #3
 8002430:	d017      	beq.n	8002462 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	2203      	movs	r2, #3
 800243e:	409a      	lsls	r2, r3
 8002440:	0013      	movs	r3, r2
 8002442:	43da      	mvns	r2, r3
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	409a      	lsls	r2, r3
 8002454:	0013      	movs	r3, r2
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2203      	movs	r2, #3
 8002468:	4013      	ands	r3, r2
 800246a:	2b02      	cmp	r3, #2
 800246c:	d123      	bne.n	80024b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	08da      	lsrs	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3208      	adds	r2, #8
 8002476:	0092      	lsls	r2, r2, #2
 8002478:	58d3      	ldr	r3, [r2, r3]
 800247a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	2207      	movs	r2, #7
 8002480:	4013      	ands	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	220f      	movs	r2, #15
 8002486:	409a      	lsls	r2, r3
 8002488:	0013      	movs	r3, r2
 800248a:	43da      	mvns	r2, r3
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2107      	movs	r1, #7
 800249a:	400b      	ands	r3, r1
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	409a      	lsls	r2, r3
 80024a0:	0013      	movs	r3, r2
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	08da      	lsrs	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3208      	adds	r2, #8
 80024b0:	0092      	lsls	r2, r2, #2
 80024b2:	6939      	ldr	r1, [r7, #16]
 80024b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	2203      	movs	r2, #3
 80024c2:	409a      	lsls	r2, r3
 80024c4:	0013      	movs	r3, r2
 80024c6:	43da      	mvns	r2, r3
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2203      	movs	r2, #3
 80024d4:	401a      	ands	r2, r3
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	409a      	lsls	r2, r3
 80024dc:	0013      	movs	r3, r2
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	23c0      	movs	r3, #192	; 0xc0
 80024f0:	029b      	lsls	r3, r3, #10
 80024f2:	4013      	ands	r3, r2
 80024f4:	d100      	bne.n	80024f8 <HAL_GPIO_Init+0x174>
 80024f6:	e092      	b.n	800261e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80024f8:	4a50      	ldr	r2, [pc, #320]	; (800263c <HAL_GPIO_Init+0x2b8>)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	089b      	lsrs	r3, r3, #2
 80024fe:	3318      	adds	r3, #24
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	589b      	ldr	r3, [r3, r2]
 8002504:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2203      	movs	r2, #3
 800250a:	4013      	ands	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	220f      	movs	r2, #15
 8002510:	409a      	lsls	r2, r3
 8002512:	0013      	movs	r3, r2
 8002514:	43da      	mvns	r2, r3
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	23a0      	movs	r3, #160	; 0xa0
 8002520:	05db      	lsls	r3, r3, #23
 8002522:	429a      	cmp	r2, r3
 8002524:	d013      	beq.n	800254e <HAL_GPIO_Init+0x1ca>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a45      	ldr	r2, [pc, #276]	; (8002640 <HAL_GPIO_Init+0x2bc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00d      	beq.n	800254a <HAL_GPIO_Init+0x1c6>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a44      	ldr	r2, [pc, #272]	; (8002644 <HAL_GPIO_Init+0x2c0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d007      	beq.n	8002546 <HAL_GPIO_Init+0x1c2>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a43      	ldr	r2, [pc, #268]	; (8002648 <HAL_GPIO_Init+0x2c4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d101      	bne.n	8002542 <HAL_GPIO_Init+0x1be>
 800253e:	2303      	movs	r3, #3
 8002540:	e006      	b.n	8002550 <HAL_GPIO_Init+0x1cc>
 8002542:	2305      	movs	r3, #5
 8002544:	e004      	b.n	8002550 <HAL_GPIO_Init+0x1cc>
 8002546:	2302      	movs	r3, #2
 8002548:	e002      	b.n	8002550 <HAL_GPIO_Init+0x1cc>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <HAL_GPIO_Init+0x1cc>
 800254e:	2300      	movs	r3, #0
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	2103      	movs	r1, #3
 8002554:	400a      	ands	r2, r1
 8002556:	00d2      	lsls	r2, r2, #3
 8002558:	4093      	lsls	r3, r2
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002560:	4936      	ldr	r1, [pc, #216]	; (800263c <HAL_GPIO_Init+0x2b8>)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	089b      	lsrs	r3, r3, #2
 8002566:	3318      	adds	r3, #24
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800256e:	4b33      	ldr	r3, [pc, #204]	; (800263c <HAL_GPIO_Init+0x2b8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	43da      	mvns	r2, r3
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	035b      	lsls	r3, r3, #13
 8002586:	4013      	ands	r3, r2
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002592:	4b2a      	ldr	r3, [pc, #168]	; (800263c <HAL_GPIO_Init+0x2b8>)
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002598:	4b28      	ldr	r3, [pc, #160]	; (800263c <HAL_GPIO_Init+0x2b8>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	43da      	mvns	r2, r3
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	2380      	movs	r3, #128	; 0x80
 80025ae:	039b      	lsls	r3, r3, #14
 80025b0:	4013      	ands	r3, r2
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025bc:	4b1f      	ldr	r3, [pc, #124]	; (800263c <HAL_GPIO_Init+0x2b8>)
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025c2:	4a1e      	ldr	r2, [pc, #120]	; (800263c <HAL_GPIO_Init+0x2b8>)
 80025c4:	2384      	movs	r3, #132	; 0x84
 80025c6:	58d3      	ldr	r3, [r2, r3]
 80025c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	43da      	mvns	r2, r3
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	029b      	lsls	r3, r3, #10
 80025dc:	4013      	ands	r3, r2
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025e8:	4914      	ldr	r1, [pc, #80]	; (800263c <HAL_GPIO_Init+0x2b8>)
 80025ea:	2284      	movs	r2, #132	; 0x84
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80025f0:	4a12      	ldr	r2, [pc, #72]	; (800263c <HAL_GPIO_Init+0x2b8>)
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	58d3      	ldr	r3, [r2, r3]
 80025f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	43da      	mvns	r2, r3
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	025b      	lsls	r3, r3, #9
 800260a:	4013      	ands	r3, r2
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002616:	4909      	ldr	r1, [pc, #36]	; (800263c <HAL_GPIO_Init+0x2b8>)
 8002618:	2280      	movs	r2, #128	; 0x80
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	3301      	adds	r3, #1
 8002622:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	40da      	lsrs	r2, r3
 800262c:	1e13      	subs	r3, r2, #0
 800262e:	d000      	beq.n	8002632 <HAL_GPIO_Init+0x2ae>
 8002630:	e6b0      	b.n	8002394 <HAL_GPIO_Init+0x10>
  }
}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	46c0      	nop			; (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	b006      	add	sp, #24
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021800 	.word	0x40021800
 8002640:	50000400 	.word	0x50000400
 8002644:	50000800 	.word	0x50000800
 8002648:	50000c00 	.word	0x50000c00

0800264c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	0008      	movs	r0, r1
 8002656:	0011      	movs	r1, r2
 8002658:	1cbb      	adds	r3, r7, #2
 800265a:	1c02      	adds	r2, r0, #0
 800265c:	801a      	strh	r2, [r3, #0]
 800265e:	1c7b      	adds	r3, r7, #1
 8002660:	1c0a      	adds	r2, r1, #0
 8002662:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002664:	1c7b      	adds	r3, r7, #1
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d004      	beq.n	8002676 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800266c:	1cbb      	adds	r3, r7, #2
 800266e:	881a      	ldrh	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002674:	e003      	b.n	800267e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002676:	1cbb      	adds	r3, r7, #2
 8002678:	881a      	ldrh	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	46bd      	mov	sp, r7
 8002682:	b002      	add	sp, #8
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b084      	sub	sp, #16
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	000a      	movs	r2, r1
 8002690:	1cbb      	adds	r3, r7, #2
 8002692:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800269a:	1cbb      	adds	r3, r7, #2
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4013      	ands	r3, r2
 80026a2:	041a      	lsls	r2, r3, #16
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	1cb9      	adds	r1, r7, #2
 80026aa:	8809      	ldrh	r1, [r1, #0]
 80026ac:	400b      	ands	r3, r1
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	619a      	str	r2, [r3, #24]
}
 80026b4:	46c0      	nop			; (mov r8, r8)
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b004      	add	sp, #16
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a19      	ldr	r2, [pc, #100]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	0019      	movs	r1, r3
 80026ce:	4b17      	ldr	r3, [pc, #92]	; (800272c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	429a      	cmp	r2, r3
 80026de:	d11f      	bne.n	8002720 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80026e0:	4b14      	ldr	r3, [pc, #80]	; (8002734 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	0013      	movs	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	189b      	adds	r3, r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4912      	ldr	r1, [pc, #72]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80026ee:	0018      	movs	r0, r3
 80026f0:	f7fd fd08 	bl	8000104 <__udivsi3>
 80026f4:	0003      	movs	r3, r0
 80026f6:	3301      	adds	r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026fa:	e008      	b.n	800270e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3b01      	subs	r3, #1
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	e001      	b.n	800270e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e009      	b.n	8002722 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002710:	695a      	ldr	r2, [r3, #20]
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	401a      	ands	r2, r3
 8002718:	2380      	movs	r3, #128	; 0x80
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	429a      	cmp	r2, r3
 800271e:	d0ed      	beq.n	80026fc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	0018      	movs	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	b004      	add	sp, #16
 8002728:	bd80      	pop	{r7, pc}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	40007000 	.word	0x40007000
 8002730:	fffff9ff 	.word	0xfffff9ff
 8002734:	20000008 	.word	0x20000008
 8002738:	000f4240 	.word	0x000f4240

0800273c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e2fe      	b.n	8002d4c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2201      	movs	r2, #1
 8002754:	4013      	ands	r3, r2
 8002756:	d100      	bne.n	800275a <HAL_RCC_OscConfig+0x1e>
 8002758:	e07c      	b.n	8002854 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800275a:	4bc3      	ldr	r3, [pc, #780]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2238      	movs	r2, #56	; 0x38
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002764:	4bc0      	ldr	r3, [pc, #768]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	2203      	movs	r2, #3
 800276a:	4013      	ands	r3, r2
 800276c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	2b10      	cmp	r3, #16
 8002772:	d102      	bne.n	800277a <HAL_RCC_OscConfig+0x3e>
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	2b03      	cmp	r3, #3
 8002778:	d002      	beq.n	8002780 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	2b08      	cmp	r3, #8
 800277e:	d10b      	bne.n	8002798 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002780:	4bb9      	ldr	r3, [pc, #740]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	029b      	lsls	r3, r3, #10
 8002788:	4013      	ands	r3, r2
 800278a:	d062      	beq.n	8002852 <HAL_RCC_OscConfig+0x116>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d15e      	bne.n	8002852 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e2d9      	b.n	8002d4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	025b      	lsls	r3, r3, #9
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d107      	bne.n	80027b4 <HAL_RCC_OscConfig+0x78>
 80027a4:	4bb0      	ldr	r3, [pc, #704]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4baf      	ldr	r3, [pc, #700]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80027aa:	2180      	movs	r1, #128	; 0x80
 80027ac:	0249      	lsls	r1, r1, #9
 80027ae:	430a      	orrs	r2, r1
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	e020      	b.n	80027f6 <HAL_RCC_OscConfig+0xba>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	23a0      	movs	r3, #160	; 0xa0
 80027ba:	02db      	lsls	r3, r3, #11
 80027bc:	429a      	cmp	r2, r3
 80027be:	d10e      	bne.n	80027de <HAL_RCC_OscConfig+0xa2>
 80027c0:	4ba9      	ldr	r3, [pc, #676]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4ba8      	ldr	r3, [pc, #672]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80027c6:	2180      	movs	r1, #128	; 0x80
 80027c8:	02c9      	lsls	r1, r1, #11
 80027ca:	430a      	orrs	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	4ba6      	ldr	r3, [pc, #664]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	4ba5      	ldr	r3, [pc, #660]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80027d4:	2180      	movs	r1, #128	; 0x80
 80027d6:	0249      	lsls	r1, r1, #9
 80027d8:	430a      	orrs	r2, r1
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	e00b      	b.n	80027f6 <HAL_RCC_OscConfig+0xba>
 80027de:	4ba2      	ldr	r3, [pc, #648]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	4ba1      	ldr	r3, [pc, #644]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80027e4:	49a1      	ldr	r1, [pc, #644]	; (8002a6c <HAL_RCC_OscConfig+0x330>)
 80027e6:	400a      	ands	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	4b9f      	ldr	r3, [pc, #636]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	4b9e      	ldr	r3, [pc, #632]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80027f0:	499f      	ldr	r1, [pc, #636]	; (8002a70 <HAL_RCC_OscConfig+0x334>)
 80027f2:	400a      	ands	r2, r1
 80027f4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d014      	beq.n	8002828 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7fe fdaf 	bl	8001360 <HAL_GetTick>
 8002802:	0003      	movs	r3, r0
 8002804:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002808:	f7fe fdaa 	bl	8001360 <HAL_GetTick>
 800280c:	0002      	movs	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b64      	cmp	r3, #100	; 0x64
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e298      	b.n	8002d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800281a:	4b93      	ldr	r3, [pc, #588]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	029b      	lsls	r3, r3, #10
 8002822:	4013      	ands	r3, r2
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0xcc>
 8002826:	e015      	b.n	8002854 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002828:	f7fe fd9a 	bl	8001360 <HAL_GetTick>
 800282c:	0003      	movs	r3, r0
 800282e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002832:	f7fe fd95 	bl	8001360 <HAL_GetTick>
 8002836:	0002      	movs	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b64      	cmp	r3, #100	; 0x64
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e283      	b.n	8002d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002844:	4b88      	ldr	r3, [pc, #544]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	029b      	lsls	r3, r3, #10
 800284c:	4013      	ands	r3, r2
 800284e:	d1f0      	bne.n	8002832 <HAL_RCC_OscConfig+0xf6>
 8002850:	e000      	b.n	8002854 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002852:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2202      	movs	r2, #2
 800285a:	4013      	ands	r3, r2
 800285c:	d100      	bne.n	8002860 <HAL_RCC_OscConfig+0x124>
 800285e:	e099      	b.n	8002994 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002860:	4b81      	ldr	r3, [pc, #516]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2238      	movs	r2, #56	; 0x38
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800286a:	4b7f      	ldr	r3, [pc, #508]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2203      	movs	r2, #3
 8002870:	4013      	ands	r3, r2
 8002872:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b10      	cmp	r3, #16
 8002878:	d102      	bne.n	8002880 <HAL_RCC_OscConfig+0x144>
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d002      	beq.n	8002886 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d135      	bne.n	80028f2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002886:	4b78      	ldr	r3, [pc, #480]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4013      	ands	r3, r2
 8002890:	d005      	beq.n	800289e <HAL_RCC_OscConfig+0x162>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e256      	b.n	8002d4c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289e:	4b72      	ldr	r3, [pc, #456]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	4a74      	ldr	r2, [pc, #464]	; (8002a74 <HAL_RCC_OscConfig+0x338>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	0019      	movs	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	021a      	lsls	r2, r3, #8
 80028ae:	4b6e      	ldr	r3, [pc, #440]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80028b0:	430a      	orrs	r2, r1
 80028b2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d112      	bne.n	80028e0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80028ba:	4b6b      	ldr	r3, [pc, #428]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a6e      	ldr	r2, [pc, #440]	; (8002a78 <HAL_RCC_OscConfig+0x33c>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	4b67      	ldr	r3, [pc, #412]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80028ca:	430a      	orrs	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80028ce:	4b66      	ldr	r3, [pc, #408]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	0adb      	lsrs	r3, r3, #11
 80028d4:	2207      	movs	r2, #7
 80028d6:	4013      	ands	r3, r2
 80028d8:	4a68      	ldr	r2, [pc, #416]	; (8002a7c <HAL_RCC_OscConfig+0x340>)
 80028da:	40da      	lsrs	r2, r3
 80028dc:	4b68      	ldr	r3, [pc, #416]	; (8002a80 <HAL_RCC_OscConfig+0x344>)
 80028de:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028e0:	4b68      	ldr	r3, [pc, #416]	; (8002a84 <HAL_RCC_OscConfig+0x348>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7fe fcdf 	bl	80012a8 <HAL_InitTick>
 80028ea:	1e03      	subs	r3, r0, #0
 80028ec:	d051      	beq.n	8002992 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e22c      	b.n	8002d4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d030      	beq.n	800295c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80028fa:	4b5b      	ldr	r3, [pc, #364]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a5e      	ldr	r2, [pc, #376]	; (8002a78 <HAL_RCC_OscConfig+0x33c>)
 8002900:	4013      	ands	r3, r2
 8002902:	0019      	movs	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	4b57      	ldr	r3, [pc, #348]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 800290a:	430a      	orrs	r2, r1
 800290c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800290e:	4b56      	ldr	r3, [pc, #344]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	4b55      	ldr	r3, [pc, #340]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002914:	2180      	movs	r1, #128	; 0x80
 8002916:	0049      	lsls	r1, r1, #1
 8002918:	430a      	orrs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7fe fd20 	bl	8001360 <HAL_GetTick>
 8002920:	0003      	movs	r3, r0
 8002922:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002926:	f7fe fd1b 	bl	8001360 <HAL_GetTick>
 800292a:	0002      	movs	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e209      	b.n	8002d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002938:	4b4b      	ldr	r3, [pc, #300]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4013      	ands	r3, r2
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b48      	ldr	r3, [pc, #288]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4a4a      	ldr	r2, [pc, #296]	; (8002a74 <HAL_RCC_OscConfig+0x338>)
 800294a:	4013      	ands	r3, r2
 800294c:	0019      	movs	r1, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	021a      	lsls	r2, r3, #8
 8002954:	4b44      	ldr	r3, [pc, #272]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	e01b      	b.n	8002994 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800295c:	4b42      	ldr	r3, [pc, #264]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	4b41      	ldr	r3, [pc, #260]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002962:	4949      	ldr	r1, [pc, #292]	; (8002a88 <HAL_RCC_OscConfig+0x34c>)
 8002964:	400a      	ands	r2, r1
 8002966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002968:	f7fe fcfa 	bl	8001360 <HAL_GetTick>
 800296c:	0003      	movs	r3, r0
 800296e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002972:	f7fe fcf5 	bl	8001360 <HAL_GetTick>
 8002976:	0002      	movs	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e1e3      	b.n	8002d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002984:	4b38      	ldr	r3, [pc, #224]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4013      	ands	r3, r2
 800298e:	d1f0      	bne.n	8002972 <HAL_RCC_OscConfig+0x236>
 8002990:	e000      	b.n	8002994 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002992:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2208      	movs	r2, #8
 800299a:	4013      	ands	r3, r2
 800299c:	d047      	beq.n	8002a2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800299e:	4b32      	ldr	r3, [pc, #200]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	2238      	movs	r2, #56	; 0x38
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b18      	cmp	r3, #24
 80029a8:	d10a      	bne.n	80029c0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80029aa:	4b2f      	ldr	r3, [pc, #188]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80029ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ae:	2202      	movs	r2, #2
 80029b0:	4013      	ands	r3, r2
 80029b2:	d03c      	beq.n	8002a2e <HAL_RCC_OscConfig+0x2f2>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d138      	bne.n	8002a2e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e1c5      	b.n	8002d4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d019      	beq.n	80029fc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80029c8:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80029ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029cc:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80029ce:	2101      	movs	r1, #1
 80029d0:	430a      	orrs	r2, r1
 80029d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fcc4 	bl	8001360 <HAL_GetTick>
 80029d8:	0003      	movs	r3, r0
 80029da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029de:	f7fe fcbf 	bl	8001360 <HAL_GetTick>
 80029e2:	0002      	movs	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e1ad      	b.n	8002d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80029f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f4:	2202      	movs	r2, #2
 80029f6:	4013      	ands	r3, r2
 80029f8:	d0f1      	beq.n	80029de <HAL_RCC_OscConfig+0x2a2>
 80029fa:	e018      	b.n	8002a2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80029fc:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80029fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a00:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002a02:	2101      	movs	r1, #1
 8002a04:	438a      	bics	r2, r1
 8002a06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7fe fcaa 	bl	8001360 <HAL_GetTick>
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a12:	f7fe fca5 	bl	8001360 <HAL_GetTick>
 8002a16:	0002      	movs	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e193      	b.n	8002d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a24:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a28:	2202      	movs	r2, #2
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d1f1      	bne.n	8002a12 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2204      	movs	r2, #4
 8002a34:	4013      	ands	r3, r2
 8002a36:	d100      	bne.n	8002a3a <HAL_RCC_OscConfig+0x2fe>
 8002a38:	e0c6      	b.n	8002bc8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a3a:	231f      	movs	r3, #31
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2238      	movs	r2, #56	; 0x38
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	d11e      	bne.n	8002a8c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a52:	2202      	movs	r2, #2
 8002a54:	4013      	ands	r3, r2
 8002a56:	d100      	bne.n	8002a5a <HAL_RCC_OscConfig+0x31e>
 8002a58:	e0b6      	b.n	8002bc8 <HAL_RCC_OscConfig+0x48c>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d000      	beq.n	8002a64 <HAL_RCC_OscConfig+0x328>
 8002a62:	e0b1      	b.n	8002bc8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e171      	b.n	8002d4c <HAL_RCC_OscConfig+0x610>
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	fffeffff 	.word	0xfffeffff
 8002a70:	fffbffff 	.word	0xfffbffff
 8002a74:	ffff80ff 	.word	0xffff80ff
 8002a78:	ffffc7ff 	.word	0xffffc7ff
 8002a7c:	00f42400 	.word	0x00f42400
 8002a80:	20000008 	.word	0x20000008
 8002a84:	20000000 	.word	0x20000000
 8002a88:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a8c:	4bb1      	ldr	r3, [pc, #708]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002a8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	055b      	lsls	r3, r3, #21
 8002a94:	4013      	ands	r3, r2
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_OscConfig+0x360>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <HAL_RCC_OscConfig+0x362>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d011      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002aa2:	4bac      	ldr	r3, [pc, #688]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002aa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002aa6:	4bab      	ldr	r3, [pc, #684]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002aa8:	2180      	movs	r1, #128	; 0x80
 8002aaa:	0549      	lsls	r1, r1, #21
 8002aac:	430a      	orrs	r2, r1
 8002aae:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ab0:	4ba8      	ldr	r3, [pc, #672]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	055b      	lsls	r3, r3, #21
 8002ab8:	4013      	ands	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002abe:	231f      	movs	r3, #31
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac6:	4ba4      	ldr	r3, [pc, #656]	; (8002d58 <HAL_RCC_OscConfig+0x61c>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	2380      	movs	r3, #128	; 0x80
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d11a      	bne.n	8002b08 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ad2:	4ba1      	ldr	r3, [pc, #644]	; (8002d58 <HAL_RCC_OscConfig+0x61c>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	4ba0      	ldr	r3, [pc, #640]	; (8002d58 <HAL_RCC_OscConfig+0x61c>)
 8002ad8:	2180      	movs	r1, #128	; 0x80
 8002ada:	0049      	lsls	r1, r1, #1
 8002adc:	430a      	orrs	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fc3e 	bl	8001360 <HAL_GetTick>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aea:	f7fe fc39 	bl	8001360 <HAL_GetTick>
 8002aee:	0002      	movs	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e127      	b.n	8002d4c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002afc:	4b96      	ldr	r3, [pc, #600]	; (8002d58 <HAL_RCC_OscConfig+0x61c>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	4013      	ands	r3, r2
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d106      	bne.n	8002b1e <HAL_RCC_OscConfig+0x3e2>
 8002b10:	4b90      	ldr	r3, [pc, #576]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002b12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b14:	4b8f      	ldr	r3, [pc, #572]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002b16:	2101      	movs	r1, #1
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b1c:	e01c      	b.n	8002b58 <HAL_RCC_OscConfig+0x41c>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b05      	cmp	r3, #5
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCC_OscConfig+0x404>
 8002b26:	4b8b      	ldr	r3, [pc, #556]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002b28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b2a:	4b8a      	ldr	r3, [pc, #552]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002b2c:	2104      	movs	r1, #4
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b32:	4b88      	ldr	r3, [pc, #544]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002b34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b36:	4b87      	ldr	r3, [pc, #540]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002b38:	2101      	movs	r1, #1
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b3e:	e00b      	b.n	8002b58 <HAL_RCC_OscConfig+0x41c>
 8002b40:	4b84      	ldr	r3, [pc, #528]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002b42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b44:	4b83      	ldr	r3, [pc, #524]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002b46:	2101      	movs	r1, #1
 8002b48:	438a      	bics	r2, r1
 8002b4a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b4c:	4b81      	ldr	r3, [pc, #516]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002b4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b50:	4b80      	ldr	r3, [pc, #512]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002b52:	2104      	movs	r1, #4
 8002b54:	438a      	bics	r2, r1
 8002b56:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d014      	beq.n	8002b8a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe fbfe 	bl	8001360 <HAL_GetTick>
 8002b64:	0003      	movs	r3, r0
 8002b66:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b68:	e009      	b.n	8002b7e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6a:	f7fe fbf9 	bl	8001360 <HAL_GetTick>
 8002b6e:	0002      	movs	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	4a79      	ldr	r2, [pc, #484]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e0e6      	b.n	8002d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b7e:	4b75      	ldr	r3, [pc, #468]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b82:	2202      	movs	r2, #2
 8002b84:	4013      	ands	r3, r2
 8002b86:	d0f0      	beq.n	8002b6a <HAL_RCC_OscConfig+0x42e>
 8002b88:	e013      	b.n	8002bb2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8a:	f7fe fbe9 	bl	8001360 <HAL_GetTick>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b92:	e009      	b.n	8002ba8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b94:	f7fe fbe4 	bl	8001360 <HAL_GetTick>
 8002b98:	0002      	movs	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	4a6f      	ldr	r2, [pc, #444]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e0d1      	b.n	8002d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ba8:	4b6a      	ldr	r3, [pc, #424]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bac:	2202      	movs	r2, #2
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002bb2:	231f      	movs	r3, #31
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d105      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002bbc:	4b65      	ldr	r3, [pc, #404]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bc0:	4b64      	ldr	r3, [pc, #400]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002bc2:	4967      	ldr	r1, [pc, #412]	; (8002d60 <HAL_RCC_OscConfig+0x624>)
 8002bc4:	400a      	ands	r2, r1
 8002bc6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d100      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x496>
 8002bd0:	e0bb      	b.n	8002d4a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bd2:	4b60      	ldr	r3, [pc, #384]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2238      	movs	r2, #56	; 0x38
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b10      	cmp	r3, #16
 8002bdc:	d100      	bne.n	8002be0 <HAL_RCC_OscConfig+0x4a4>
 8002bde:	e07b      	b.n	8002cd8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d156      	bne.n	8002c96 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be8:	4b5a      	ldr	r3, [pc, #360]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4b59      	ldr	r3, [pc, #356]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002bee:	495d      	ldr	r1, [pc, #372]	; (8002d64 <HAL_RCC_OscConfig+0x628>)
 8002bf0:	400a      	ands	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fbb4 	bl	8001360 <HAL_GetTick>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfe:	f7fe fbaf 	bl	8001360 <HAL_GetTick>
 8002c02:	0002      	movs	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e09d      	b.n	8002d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c10:	4b50      	ldr	r3, [pc, #320]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	049b      	lsls	r3, r3, #18
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d1f0      	bne.n	8002bfe <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c1c:	4b4d      	ldr	r3, [pc, #308]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4a51      	ldr	r2, [pc, #324]	; (8002d68 <HAL_RCC_OscConfig+0x62c>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	0019      	movs	r1, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1a      	ldr	r2, [r3, #32]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	021b      	lsls	r3, r3, #8
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	4b42      	ldr	r3, [pc, #264]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c50:	4b40      	ldr	r3, [pc, #256]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4b3f      	ldr	r3, [pc, #252]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002c56:	2180      	movs	r1, #128	; 0x80
 8002c58:	0449      	lsls	r1, r1, #17
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002c5e:	4b3d      	ldr	r3, [pc, #244]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	4b3c      	ldr	r3, [pc, #240]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002c64:	2180      	movs	r1, #128	; 0x80
 8002c66:	0549      	lsls	r1, r1, #21
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6c:	f7fe fb78 	bl	8001360 <HAL_GetTick>
 8002c70:	0003      	movs	r3, r0
 8002c72:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c76:	f7fe fb73 	bl	8001360 <HAL_GetTick>
 8002c7a:	0002      	movs	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e061      	b.n	8002d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c88:	4b32      	ldr	r3, [pc, #200]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	2380      	movs	r3, #128	; 0x80
 8002c8e:	049b      	lsls	r3, r3, #18
 8002c90:	4013      	ands	r3, r2
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x53a>
 8002c94:	e059      	b.n	8002d4a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c96:	4b2f      	ldr	r3, [pc, #188]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	4b2e      	ldr	r3, [pc, #184]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002c9c:	4931      	ldr	r1, [pc, #196]	; (8002d64 <HAL_RCC_OscConfig+0x628>)
 8002c9e:	400a      	ands	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca2:	f7fe fb5d 	bl	8001360 <HAL_GetTick>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cac:	f7fe fb58 	bl	8001360 <HAL_GetTick>
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e046      	b.n	8002d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cbe:	4b25      	ldr	r3, [pc, #148]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	049b      	lsls	r3, r3, #18
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002cca:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002cd0:	4926      	ldr	r1, [pc, #152]	; (8002d6c <HAL_RCC_OscConfig+0x630>)
 8002cd2:	400a      	ands	r2, r1
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	e038      	b.n	8002d4a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e033      	b.n	8002d4c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_RCC_OscConfig+0x618>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2203      	movs	r2, #3
 8002cee:	401a      	ands	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d126      	bne.n	8002d46 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	2270      	movs	r2, #112	; 0x70
 8002cfc:	401a      	ands	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d11f      	bne.n	8002d46 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	23fe      	movs	r3, #254	; 0xfe
 8002d0a:	01db      	lsls	r3, r3, #7
 8002d0c:	401a      	ands	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d12:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d116      	bne.n	8002d46 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	23f8      	movs	r3, #248	; 0xf8
 8002d1c:	039b      	lsls	r3, r3, #14
 8002d1e:	401a      	ands	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d10e      	bne.n	8002d46 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	23e0      	movs	r3, #224	; 0xe0
 8002d2c:	051b      	lsls	r3, r3, #20
 8002d2e:	401a      	ands	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d106      	bne.n	8002d46 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	0f5b      	lsrs	r3, r3, #29
 8002d3c:	075a      	lsls	r2, r3, #29
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d001      	beq.n	8002d4a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b008      	add	sp, #32
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40007000 	.word	0x40007000
 8002d5c:	00001388 	.word	0x00001388
 8002d60:	efffffff 	.word	0xefffffff
 8002d64:	feffffff 	.word	0xfeffffff
 8002d68:	11c1808c 	.word	0x11c1808c
 8002d6c:	eefefffc 	.word	0xeefefffc

08002d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0e9      	b.n	8002f58 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d84:	4b76      	ldr	r3, [pc, #472]	; (8002f60 <HAL_RCC_ClockConfig+0x1f0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2207      	movs	r2, #7
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d91e      	bls.n	8002dd0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d92:	4b73      	ldr	r3, [pc, #460]	; (8002f60 <HAL_RCC_ClockConfig+0x1f0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2207      	movs	r2, #7
 8002d98:	4393      	bics	r3, r2
 8002d9a:	0019      	movs	r1, r3
 8002d9c:	4b70      	ldr	r3, [pc, #448]	; (8002f60 <HAL_RCC_ClockConfig+0x1f0>)
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002da4:	f7fe fadc 	bl	8001360 <HAL_GetTick>
 8002da8:	0003      	movs	r3, r0
 8002daa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002dac:	e009      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dae:	f7fe fad7 	bl	8001360 <HAL_GetTick>
 8002db2:	0002      	movs	r2, r0
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	4a6a      	ldr	r2, [pc, #424]	; (8002f64 <HAL_RCC_ClockConfig+0x1f4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e0ca      	b.n	8002f58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002dc2:	4b67      	ldr	r3, [pc, #412]	; (8002f60 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2207      	movs	r2, #7
 8002dc8:	4013      	ands	r3, r2
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d1ee      	bne.n	8002dae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d015      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2204      	movs	r2, #4
 8002de0:	4013      	ands	r3, r2
 8002de2:	d006      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002de4:	4b60      	ldr	r3, [pc, #384]	; (8002f68 <HAL_RCC_ClockConfig+0x1f8>)
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	4b5f      	ldr	r3, [pc, #380]	; (8002f68 <HAL_RCC_ClockConfig+0x1f8>)
 8002dea:	21e0      	movs	r1, #224	; 0xe0
 8002dec:	01c9      	lsls	r1, r1, #7
 8002dee:	430a      	orrs	r2, r1
 8002df0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df2:	4b5d      	ldr	r3, [pc, #372]	; (8002f68 <HAL_RCC_ClockConfig+0x1f8>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	4a5d      	ldr	r2, [pc, #372]	; (8002f6c <HAL_RCC_ClockConfig+0x1fc>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	4b59      	ldr	r3, [pc, #356]	; (8002f68 <HAL_RCC_ClockConfig+0x1f8>)
 8002e02:	430a      	orrs	r2, r1
 8002e04:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d057      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e18:	4b53      	ldr	r3, [pc, #332]	; (8002f68 <HAL_RCC_ClockConfig+0x1f8>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	029b      	lsls	r3, r3, #10
 8002e20:	4013      	ands	r3, r2
 8002e22:	d12b      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e097      	b.n	8002f58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d107      	bne.n	8002e40 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e30:	4b4d      	ldr	r3, [pc, #308]	; (8002f68 <HAL_RCC_ClockConfig+0x1f8>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	049b      	lsls	r3, r3, #18
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d11f      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e08b      	b.n	8002f58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d107      	bne.n	8002e58 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e48:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <HAL_RCC_ClockConfig+0x1f8>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4013      	ands	r3, r2
 8002e52:	d113      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e07f      	b.n	8002f58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d106      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e60:	4b41      	ldr	r3, [pc, #260]	; (8002f68 <HAL_RCC_ClockConfig+0x1f8>)
 8002e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e64:	2202      	movs	r2, #2
 8002e66:	4013      	ands	r3, r2
 8002e68:	d108      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e074      	b.n	8002f58 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e6e:	4b3e      	ldr	r3, [pc, #248]	; (8002f68 <HAL_RCC_ClockConfig+0x1f8>)
 8002e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e72:	2202      	movs	r2, #2
 8002e74:	4013      	ands	r3, r2
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e06d      	b.n	8002f58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e7c:	4b3a      	ldr	r3, [pc, #232]	; (8002f68 <HAL_RCC_ClockConfig+0x1f8>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2207      	movs	r2, #7
 8002e82:	4393      	bics	r3, r2
 8002e84:	0019      	movs	r1, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	4b37      	ldr	r3, [pc, #220]	; (8002f68 <HAL_RCC_ClockConfig+0x1f8>)
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e90:	f7fe fa66 	bl	8001360 <HAL_GetTick>
 8002e94:	0003      	movs	r3, r0
 8002e96:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e98:	e009      	b.n	8002eae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e9a:	f7fe fa61 	bl	8001360 <HAL_GetTick>
 8002e9e:	0002      	movs	r2, r0
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	4a2f      	ldr	r2, [pc, #188]	; (8002f64 <HAL_RCC_ClockConfig+0x1f4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e054      	b.n	8002f58 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	4b2e      	ldr	r3, [pc, #184]	; (8002f68 <HAL_RCC_ClockConfig+0x1f8>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2238      	movs	r2, #56	; 0x38
 8002eb4:	401a      	ands	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d1ec      	bne.n	8002e9a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2207      	movs	r2, #7
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d21e      	bcs.n	8002f0c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2207      	movs	r2, #7
 8002ed4:	4393      	bics	r3, r2
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	4b21      	ldr	r3, [pc, #132]	; (8002f60 <HAL_RCC_ClockConfig+0x1f0>)
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ee0:	f7fe fa3e 	bl	8001360 <HAL_GetTick>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ee8:	e009      	b.n	8002efe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eea:	f7fe fa39 	bl	8001360 <HAL_GetTick>
 8002eee:	0002      	movs	r2, r0
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	4a1b      	ldr	r2, [pc, #108]	; (8002f64 <HAL_RCC_ClockConfig+0x1f4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e02c      	b.n	8002f58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002efe:	4b18      	ldr	r3, [pc, #96]	; (8002f60 <HAL_RCC_ClockConfig+0x1f0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2207      	movs	r2, #7
 8002f04:	4013      	ands	r3, r2
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d1ee      	bne.n	8002eea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2204      	movs	r2, #4
 8002f12:	4013      	ands	r3, r2
 8002f14:	d009      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002f16:	4b14      	ldr	r3, [pc, #80]	; (8002f68 <HAL_RCC_ClockConfig+0x1f8>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	4a15      	ldr	r2, [pc, #84]	; (8002f70 <HAL_RCC_ClockConfig+0x200>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	0019      	movs	r1, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <HAL_RCC_ClockConfig+0x1f8>)
 8002f26:	430a      	orrs	r2, r1
 8002f28:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002f2a:	f000 f829 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 8002f2e:	0001      	movs	r1, r0
 8002f30:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <HAL_RCC_ClockConfig+0x1f8>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	0a1b      	lsrs	r3, r3, #8
 8002f36:	220f      	movs	r2, #15
 8002f38:	401a      	ands	r2, r3
 8002f3a:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <HAL_RCC_ClockConfig+0x204>)
 8002f3c:	0092      	lsls	r2, r2, #2
 8002f3e:	58d3      	ldr	r3, [r2, r3]
 8002f40:	221f      	movs	r2, #31
 8002f42:	4013      	ands	r3, r2
 8002f44:	000a      	movs	r2, r1
 8002f46:	40da      	lsrs	r2, r3
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_RCC_ClockConfig+0x208>)
 8002f4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_RCC_ClockConfig+0x20c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	0018      	movs	r0, r3
 8002f52:	f7fe f9a9 	bl	80012a8 <HAL_InitTick>
 8002f56:	0003      	movs	r3, r0
}
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b004      	add	sp, #16
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40022000 	.word	0x40022000
 8002f64:	00001388 	.word	0x00001388
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	fffff0ff 	.word	0xfffff0ff
 8002f70:	ffff8fff 	.word	0xffff8fff
 8002f74:	080043c8 	.word	0x080043c8
 8002f78:	20000008 	.word	0x20000008
 8002f7c:	20000000 	.word	0x20000000

08002f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f86:	4b3c      	ldr	r3, [pc, #240]	; (8003078 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2238      	movs	r2, #56	; 0x38
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d10f      	bne.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f90:	4b39      	ldr	r3, [pc, #228]	; (8003078 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	0adb      	lsrs	r3, r3, #11
 8002f96:	2207      	movs	r2, #7
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	0013      	movs	r3, r2
 8002fa0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002fa2:	6839      	ldr	r1, [r7, #0]
 8002fa4:	4835      	ldr	r0, [pc, #212]	; (800307c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002fa6:	f7fd f8ad 	bl	8000104 <__udivsi3>
 8002faa:	0003      	movs	r3, r0
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	e05d      	b.n	800306c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fb0:	4b31      	ldr	r3, [pc, #196]	; (8003078 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2238      	movs	r2, #56	; 0x38
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d102      	bne.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fbc:	4b30      	ldr	r3, [pc, #192]	; (8003080 <HAL_RCC_GetSysClockFreq+0x100>)
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	e054      	b.n	800306c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fc2:	4b2d      	ldr	r3, [pc, #180]	; (8003078 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2238      	movs	r2, #56	; 0x38
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b10      	cmp	r3, #16
 8002fcc:	d138      	bne.n	8003040 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002fce:	4b2a      	ldr	r3, [pc, #168]	; (8003078 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fd8:	4b27      	ldr	r3, [pc, #156]	; (8003078 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	091b      	lsrs	r3, r3, #4
 8002fde:	2207      	movs	r2, #7
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d10d      	bne.n	8003008 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	4824      	ldr	r0, [pc, #144]	; (8003080 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ff0:	f7fd f888 	bl	8000104 <__udivsi3>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	0019      	movs	r1, r3
 8002ff8:	4b1f      	ldr	r3, [pc, #124]	; (8003078 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	0a1b      	lsrs	r3, r3, #8
 8002ffe:	227f      	movs	r2, #127	; 0x7f
 8003000:	4013      	ands	r3, r2
 8003002:	434b      	muls	r3, r1
 8003004:	617b      	str	r3, [r7, #20]
        break;
 8003006:	e00d      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	481c      	ldr	r0, [pc, #112]	; (800307c <HAL_RCC_GetSysClockFreq+0xfc>)
 800300c:	f7fd f87a 	bl	8000104 <__udivsi3>
 8003010:	0003      	movs	r3, r0
 8003012:	0019      	movs	r1, r3
 8003014:	4b18      	ldr	r3, [pc, #96]	; (8003078 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	0a1b      	lsrs	r3, r3, #8
 800301a:	227f      	movs	r2, #127	; 0x7f
 800301c:	4013      	ands	r3, r2
 800301e:	434b      	muls	r3, r1
 8003020:	617b      	str	r3, [r7, #20]
        break;
 8003022:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003024:	4b14      	ldr	r3, [pc, #80]	; (8003078 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	0f5b      	lsrs	r3, r3, #29
 800302a:	2207      	movs	r2, #7
 800302c:	4013      	ands	r3, r2
 800302e:	3301      	adds	r3, #1
 8003030:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	6978      	ldr	r0, [r7, #20]
 8003036:	f7fd f865 	bl	8000104 <__udivsi3>
 800303a:	0003      	movs	r3, r0
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	e015      	b.n	800306c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003040:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2238      	movs	r2, #56	; 0x38
 8003046:	4013      	ands	r3, r2
 8003048:	2b20      	cmp	r3, #32
 800304a:	d103      	bne.n	8003054 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	e00b      	b.n	800306c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003054:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2238      	movs	r2, #56	; 0x38
 800305a:	4013      	ands	r3, r2
 800305c:	2b18      	cmp	r3, #24
 800305e:	d103      	bne.n	8003068 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003060:	23fa      	movs	r3, #250	; 0xfa
 8003062:	01db      	lsls	r3, r3, #7
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	e001      	b.n	800306c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800306c:	693b      	ldr	r3, [r7, #16]
}
 800306e:	0018      	movs	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	b006      	add	sp, #24
 8003074:	bd80      	pop	{r7, pc}
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	40021000 	.word	0x40021000
 800307c:	00f42400 	.word	0x00f42400
 8003080:	007a1200 	.word	0x007a1200

08003084 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e04a      	b.n	800312c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	223d      	movs	r2, #61	; 0x3d
 800309a:	5c9b      	ldrb	r3, [r3, r2]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d107      	bne.n	80030b2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	223c      	movs	r2, #60	; 0x3c
 80030a6:	2100      	movs	r1, #0
 80030a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	0018      	movs	r0, r3
 80030ae:	f001 f87d 	bl	80041ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	223d      	movs	r2, #61	; 0x3d
 80030b6:	2102      	movs	r1, #2
 80030b8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	0019      	movs	r1, r3
 80030c4:	0010      	movs	r0, r2
 80030c6:	f000 fa1f 	bl	8003508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2248      	movs	r2, #72	; 0x48
 80030ce:	2101      	movs	r1, #1
 80030d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	223e      	movs	r2, #62	; 0x3e
 80030d6:	2101      	movs	r1, #1
 80030d8:	5499      	strb	r1, [r3, r2]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	223f      	movs	r2, #63	; 0x3f
 80030de:	2101      	movs	r1, #1
 80030e0:	5499      	strb	r1, [r3, r2]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2240      	movs	r2, #64	; 0x40
 80030e6:	2101      	movs	r1, #1
 80030e8:	5499      	strb	r1, [r3, r2]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2241      	movs	r2, #65	; 0x41
 80030ee:	2101      	movs	r1, #1
 80030f0:	5499      	strb	r1, [r3, r2]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2242      	movs	r2, #66	; 0x42
 80030f6:	2101      	movs	r1, #1
 80030f8:	5499      	strb	r1, [r3, r2]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2243      	movs	r2, #67	; 0x43
 80030fe:	2101      	movs	r1, #1
 8003100:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2244      	movs	r2, #68	; 0x44
 8003106:	2101      	movs	r1, #1
 8003108:	5499      	strb	r1, [r3, r2]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2245      	movs	r2, #69	; 0x45
 800310e:	2101      	movs	r1, #1
 8003110:	5499      	strb	r1, [r3, r2]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2246      	movs	r2, #70	; 0x46
 8003116:	2101      	movs	r1, #1
 8003118:	5499      	strb	r1, [r3, r2]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2247      	movs	r2, #71	; 0x47
 800311e:	2101      	movs	r1, #1
 8003120:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	223d      	movs	r2, #61	; 0x3d
 8003126:	2101      	movs	r1, #1
 8003128:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	0018      	movs	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	b002      	add	sp, #8
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d108      	bne.n	8003156 <HAL_TIM_PWM_Start+0x22>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	223e      	movs	r2, #62	; 0x3e
 8003148:	5c9b      	ldrb	r3, [r3, r2]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	1e5a      	subs	r2, r3, #1
 8003150:	4193      	sbcs	r3, r2
 8003152:	b2db      	uxtb	r3, r3
 8003154:	e037      	b.n	80031c6 <HAL_TIM_PWM_Start+0x92>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b04      	cmp	r3, #4
 800315a:	d108      	bne.n	800316e <HAL_TIM_PWM_Start+0x3a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	223f      	movs	r2, #63	; 0x3f
 8003160:	5c9b      	ldrb	r3, [r3, r2]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	1e5a      	subs	r2, r3, #1
 8003168:	4193      	sbcs	r3, r2
 800316a:	b2db      	uxtb	r3, r3
 800316c:	e02b      	b.n	80031c6 <HAL_TIM_PWM_Start+0x92>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b08      	cmp	r3, #8
 8003172:	d108      	bne.n	8003186 <HAL_TIM_PWM_Start+0x52>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2240      	movs	r2, #64	; 0x40
 8003178:	5c9b      	ldrb	r3, [r3, r2]
 800317a:	b2db      	uxtb	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	1e5a      	subs	r2, r3, #1
 8003180:	4193      	sbcs	r3, r2
 8003182:	b2db      	uxtb	r3, r3
 8003184:	e01f      	b.n	80031c6 <HAL_TIM_PWM_Start+0x92>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b0c      	cmp	r3, #12
 800318a:	d108      	bne.n	800319e <HAL_TIM_PWM_Start+0x6a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2241      	movs	r2, #65	; 0x41
 8003190:	5c9b      	ldrb	r3, [r3, r2]
 8003192:	b2db      	uxtb	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	1e5a      	subs	r2, r3, #1
 8003198:	4193      	sbcs	r3, r2
 800319a:	b2db      	uxtb	r3, r3
 800319c:	e013      	b.n	80031c6 <HAL_TIM_PWM_Start+0x92>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b10      	cmp	r3, #16
 80031a2:	d108      	bne.n	80031b6 <HAL_TIM_PWM_Start+0x82>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2242      	movs	r2, #66	; 0x42
 80031a8:	5c9b      	ldrb	r3, [r3, r2]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	1e5a      	subs	r2, r3, #1
 80031b0:	4193      	sbcs	r3, r2
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	e007      	b.n	80031c6 <HAL_TIM_PWM_Start+0x92>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2243      	movs	r2, #67	; 0x43
 80031ba:	5c9b      	ldrb	r3, [r3, r2]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	1e5a      	subs	r2, r3, #1
 80031c2:	4193      	sbcs	r3, r2
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e08b      	b.n	80032e6 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d104      	bne.n	80031de <HAL_TIM_PWM_Start+0xaa>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	223e      	movs	r2, #62	; 0x3e
 80031d8:	2102      	movs	r1, #2
 80031da:	5499      	strb	r1, [r3, r2]
 80031dc:	e023      	b.n	8003226 <HAL_TIM_PWM_Start+0xf2>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d104      	bne.n	80031ee <HAL_TIM_PWM_Start+0xba>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	223f      	movs	r2, #63	; 0x3f
 80031e8:	2102      	movs	r1, #2
 80031ea:	5499      	strb	r1, [r3, r2]
 80031ec:	e01b      	b.n	8003226 <HAL_TIM_PWM_Start+0xf2>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d104      	bne.n	80031fe <HAL_TIM_PWM_Start+0xca>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2240      	movs	r2, #64	; 0x40
 80031f8:	2102      	movs	r1, #2
 80031fa:	5499      	strb	r1, [r3, r2]
 80031fc:	e013      	b.n	8003226 <HAL_TIM_PWM_Start+0xf2>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b0c      	cmp	r3, #12
 8003202:	d104      	bne.n	800320e <HAL_TIM_PWM_Start+0xda>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2241      	movs	r2, #65	; 0x41
 8003208:	2102      	movs	r1, #2
 800320a:	5499      	strb	r1, [r3, r2]
 800320c:	e00b      	b.n	8003226 <HAL_TIM_PWM_Start+0xf2>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b10      	cmp	r3, #16
 8003212:	d104      	bne.n	800321e <HAL_TIM_PWM_Start+0xea>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2242      	movs	r2, #66	; 0x42
 8003218:	2102      	movs	r1, #2
 800321a:	5499      	strb	r1, [r3, r2]
 800321c:	e003      	b.n	8003226 <HAL_TIM_PWM_Start+0xf2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2243      	movs	r2, #67	; 0x43
 8003222:	2102      	movs	r1, #2
 8003224:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6839      	ldr	r1, [r7, #0]
 800322c:	2201      	movs	r2, #1
 800322e:	0018      	movs	r0, r3
 8003230:	f000 fcbc 	bl	8003bac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a2d      	ldr	r2, [pc, #180]	; (80032f0 <HAL_TIM_PWM_Start+0x1bc>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00e      	beq.n	800325c <HAL_TIM_PWM_Start+0x128>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a2c      	ldr	r2, [pc, #176]	; (80032f4 <HAL_TIM_PWM_Start+0x1c0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d009      	beq.n	800325c <HAL_TIM_PWM_Start+0x128>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a2a      	ldr	r2, [pc, #168]	; (80032f8 <HAL_TIM_PWM_Start+0x1c4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d004      	beq.n	800325c <HAL_TIM_PWM_Start+0x128>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a29      	ldr	r2, [pc, #164]	; (80032fc <HAL_TIM_PWM_Start+0x1c8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d101      	bne.n	8003260 <HAL_TIM_PWM_Start+0x12c>
 800325c:	2301      	movs	r3, #1
 800325e:	e000      	b.n	8003262 <HAL_TIM_PWM_Start+0x12e>
 8003260:	2300      	movs	r3, #0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d008      	beq.n	8003278 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2180      	movs	r1, #128	; 0x80
 8003272:	0209      	lsls	r1, r1, #8
 8003274:	430a      	orrs	r2, r1
 8003276:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <HAL_TIM_PWM_Start+0x1bc>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00f      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x16e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	2380      	movs	r3, #128	; 0x80
 8003288:	05db      	lsls	r3, r3, #23
 800328a:	429a      	cmp	r2, r3
 800328c:	d009      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x16e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <HAL_TIM_PWM_Start+0x1cc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d004      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x16e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a15      	ldr	r2, [pc, #84]	; (80032f4 <HAL_TIM_PWM_Start+0x1c0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d116      	bne.n	80032d0 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4a16      	ldr	r2, [pc, #88]	; (8003304 <HAL_TIM_PWM_Start+0x1d0>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b06      	cmp	r3, #6
 80032b2:	d016      	beq.n	80032e2 <HAL_TIM_PWM_Start+0x1ae>
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	025b      	lsls	r3, r3, #9
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d011      	beq.n	80032e2 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2101      	movs	r1, #1
 80032ca:	430a      	orrs	r2, r1
 80032cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ce:	e008      	b.n	80032e2 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2101      	movs	r1, #1
 80032dc:	430a      	orrs	r2, r1
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	e000      	b.n	80032e4 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	0018      	movs	r0, r3
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b004      	add	sp, #16
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	40012c00 	.word	0x40012c00
 80032f4:	40014000 	.word	0x40014000
 80032f8:	40014400 	.word	0x40014400
 80032fc:	40014800 	.word	0x40014800
 8003300:	40000400 	.word	0x40000400
 8003304:	00010007 	.word	0x00010007

08003308 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003314:	2317      	movs	r3, #23
 8003316:	18fb      	adds	r3, r7, r3
 8003318:	2200      	movs	r2, #0
 800331a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	223c      	movs	r2, #60	; 0x3c
 8003320:	5c9b      	ldrb	r3, [r3, r2]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003326:	2302      	movs	r3, #2
 8003328:	e0e5      	b.n	80034f6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	223c      	movs	r2, #60	; 0x3c
 800332e:	2101      	movs	r1, #1
 8003330:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b14      	cmp	r3, #20
 8003336:	d900      	bls.n	800333a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003338:	e0d1      	b.n	80034de <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	009a      	lsls	r2, r3, #2
 800333e:	4b70      	ldr	r3, [pc, #448]	; (8003500 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003340:	18d3      	adds	r3, r2, r3
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	0011      	movs	r1, r2
 800334e:	0018      	movs	r0, r3
 8003350:	f000 f968 	bl	8003624 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2108      	movs	r1, #8
 8003360:	430a      	orrs	r2, r1
 8003362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2104      	movs	r1, #4
 8003370:	438a      	bics	r2, r1
 8003372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6999      	ldr	r1, [r3, #24]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	691a      	ldr	r2, [r3, #16]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	619a      	str	r2, [r3, #24]
      break;
 8003386:	e0af      	b.n	80034e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	0011      	movs	r1, r2
 8003390:	0018      	movs	r0, r3
 8003392:	f000 f9d1 	bl	8003738 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699a      	ldr	r2, [r3, #24]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2180      	movs	r1, #128	; 0x80
 80033a2:	0109      	lsls	r1, r1, #4
 80033a4:	430a      	orrs	r2, r1
 80033a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4954      	ldr	r1, [pc, #336]	; (8003504 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80033b4:	400a      	ands	r2, r1
 80033b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6999      	ldr	r1, [r3, #24]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	021a      	lsls	r2, r3, #8
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	619a      	str	r2, [r3, #24]
      break;
 80033cc:	e08c      	b.n	80034e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	0011      	movs	r1, r2
 80033d6:	0018      	movs	r0, r3
 80033d8:	f000 fa32 	bl	8003840 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	69da      	ldr	r2, [r3, #28]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2108      	movs	r1, #8
 80033e8:	430a      	orrs	r2, r1
 80033ea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	69da      	ldr	r2, [r3, #28]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2104      	movs	r1, #4
 80033f8:	438a      	bics	r2, r1
 80033fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69d9      	ldr	r1, [r3, #28]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	61da      	str	r2, [r3, #28]
      break;
 800340e:	e06b      	b.n	80034e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	0011      	movs	r1, r2
 8003418:	0018      	movs	r0, r3
 800341a:	f000 fa99 	bl	8003950 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69da      	ldr	r2, [r3, #28]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2180      	movs	r1, #128	; 0x80
 800342a:	0109      	lsls	r1, r1, #4
 800342c:	430a      	orrs	r2, r1
 800342e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	69da      	ldr	r2, [r3, #28]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4932      	ldr	r1, [pc, #200]	; (8003504 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800343c:	400a      	ands	r2, r1
 800343e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	69d9      	ldr	r1, [r3, #28]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	021a      	lsls	r2, r3, #8
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	61da      	str	r2, [r3, #28]
      break;
 8003454:	e048      	b.n	80034e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	0011      	movs	r1, r2
 800345e:	0018      	movs	r0, r3
 8003460:	f000 fae0 	bl	8003a24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2108      	movs	r1, #8
 8003470:	430a      	orrs	r2, r1
 8003472:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2104      	movs	r1, #4
 8003480:	438a      	bics	r2, r1
 8003482:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	691a      	ldr	r2, [r3, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003496:	e027      	b.n	80034e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	0011      	movs	r1, r2
 80034a0:	0018      	movs	r0, r3
 80034a2:	f000 fb1f 	bl	8003ae4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2180      	movs	r1, #128	; 0x80
 80034b2:	0109      	lsls	r1, r1, #4
 80034b4:	430a      	orrs	r2, r1
 80034b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4910      	ldr	r1, [pc, #64]	; (8003504 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80034c4:	400a      	ands	r2, r1
 80034c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	021a      	lsls	r2, r3, #8
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034dc:	e004      	b.n	80034e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80034de:	2317      	movs	r3, #23
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	2201      	movs	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]
      break;
 80034e6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	223c      	movs	r2, #60	; 0x3c
 80034ec:	2100      	movs	r1, #0
 80034ee:	5499      	strb	r1, [r3, r2]

  return status;
 80034f0:	2317      	movs	r3, #23
 80034f2:	18fb      	adds	r3, r7, r3
 80034f4:	781b      	ldrb	r3, [r3, #0]
}
 80034f6:	0018      	movs	r0, r3
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b006      	add	sp, #24
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	08004374 	.word	0x08004374
 8003504:	fffffbff 	.word	0xfffffbff

08003508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a3b      	ldr	r2, [pc, #236]	; (8003608 <TIM_Base_SetConfig+0x100>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d008      	beq.n	8003532 <TIM_Base_SetConfig+0x2a>
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	2380      	movs	r3, #128	; 0x80
 8003524:	05db      	lsls	r3, r3, #23
 8003526:	429a      	cmp	r2, r3
 8003528:	d003      	beq.n	8003532 <TIM_Base_SetConfig+0x2a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a37      	ldr	r2, [pc, #220]	; (800360c <TIM_Base_SetConfig+0x104>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d108      	bne.n	8003544 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2270      	movs	r2, #112	; 0x70
 8003536:	4393      	bics	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a30      	ldr	r2, [pc, #192]	; (8003608 <TIM_Base_SetConfig+0x100>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d018      	beq.n	800357e <TIM_Base_SetConfig+0x76>
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	2380      	movs	r3, #128	; 0x80
 8003550:	05db      	lsls	r3, r3, #23
 8003552:	429a      	cmp	r2, r3
 8003554:	d013      	beq.n	800357e <TIM_Base_SetConfig+0x76>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a2c      	ldr	r2, [pc, #176]	; (800360c <TIM_Base_SetConfig+0x104>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00f      	beq.n	800357e <TIM_Base_SetConfig+0x76>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a2b      	ldr	r2, [pc, #172]	; (8003610 <TIM_Base_SetConfig+0x108>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00b      	beq.n	800357e <TIM_Base_SetConfig+0x76>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a2a      	ldr	r2, [pc, #168]	; (8003614 <TIM_Base_SetConfig+0x10c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d007      	beq.n	800357e <TIM_Base_SetConfig+0x76>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a29      	ldr	r2, [pc, #164]	; (8003618 <TIM_Base_SetConfig+0x110>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d003      	beq.n	800357e <TIM_Base_SetConfig+0x76>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a28      	ldr	r2, [pc, #160]	; (800361c <TIM_Base_SetConfig+0x114>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d108      	bne.n	8003590 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4a27      	ldr	r2, [pc, #156]	; (8003620 <TIM_Base_SetConfig+0x118>)
 8003582:	4013      	ands	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4313      	orrs	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2280      	movs	r2, #128	; 0x80
 8003594:	4393      	bics	r3, r2
 8003596:	001a      	movs	r2, r3
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a13      	ldr	r2, [pc, #76]	; (8003608 <TIM_Base_SetConfig+0x100>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00b      	beq.n	80035d6 <TIM_Base_SetConfig+0xce>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a14      	ldr	r2, [pc, #80]	; (8003614 <TIM_Base_SetConfig+0x10c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d007      	beq.n	80035d6 <TIM_Base_SetConfig+0xce>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a13      	ldr	r2, [pc, #76]	; (8003618 <TIM_Base_SetConfig+0x110>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d003      	beq.n	80035d6 <TIM_Base_SetConfig+0xce>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a12      	ldr	r2, [pc, #72]	; (800361c <TIM_Base_SetConfig+0x114>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d103      	bne.n	80035de <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	2201      	movs	r2, #1
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d106      	bne.n	80035fe <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	2201      	movs	r2, #1
 80035f6:	4393      	bics	r3, r2
 80035f8:	001a      	movs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	611a      	str	r2, [r3, #16]
  }
}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	46bd      	mov	sp, r7
 8003602:	b004      	add	sp, #16
 8003604:	bd80      	pop	{r7, pc}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	40012c00 	.word	0x40012c00
 800360c:	40000400 	.word	0x40000400
 8003610:	40002000 	.word	0x40002000
 8003614:	40014000 	.word	0x40014000
 8003618:	40014400 	.word	0x40014400
 800361c:	40014800 	.word	0x40014800
 8003620:	fffffcff 	.word	0xfffffcff

08003624 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	2201      	movs	r2, #1
 800363a:	4393      	bics	r3, r2
 800363c:	001a      	movs	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4a32      	ldr	r2, [pc, #200]	; (800371c <TIM_OC1_SetConfig+0xf8>)
 8003652:	4013      	ands	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2203      	movs	r2, #3
 800365a:	4393      	bics	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	2202      	movs	r2, #2
 800366c:	4393      	bics	r3, r2
 800366e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a28      	ldr	r2, [pc, #160]	; (8003720 <TIM_OC1_SetConfig+0xfc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00b      	beq.n	800369a <TIM_OC1_SetConfig+0x76>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a27      	ldr	r2, [pc, #156]	; (8003724 <TIM_OC1_SetConfig+0x100>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d007      	beq.n	800369a <TIM_OC1_SetConfig+0x76>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a26      	ldr	r2, [pc, #152]	; (8003728 <TIM_OC1_SetConfig+0x104>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d003      	beq.n	800369a <TIM_OC1_SetConfig+0x76>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a25      	ldr	r2, [pc, #148]	; (800372c <TIM_OC1_SetConfig+0x108>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d10c      	bne.n	80036b4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2208      	movs	r2, #8
 800369e:	4393      	bics	r3, r2
 80036a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2204      	movs	r2, #4
 80036b0:	4393      	bics	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a1a      	ldr	r2, [pc, #104]	; (8003720 <TIM_OC1_SetConfig+0xfc>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00b      	beq.n	80036d4 <TIM_OC1_SetConfig+0xb0>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a19      	ldr	r2, [pc, #100]	; (8003724 <TIM_OC1_SetConfig+0x100>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d007      	beq.n	80036d4 <TIM_OC1_SetConfig+0xb0>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a18      	ldr	r2, [pc, #96]	; (8003728 <TIM_OC1_SetConfig+0x104>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_OC1_SetConfig+0xb0>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a17      	ldr	r2, [pc, #92]	; (800372c <TIM_OC1_SetConfig+0x108>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d111      	bne.n	80036f8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4a16      	ldr	r2, [pc, #88]	; (8003730 <TIM_OC1_SetConfig+0x10c>)
 80036d8:	4013      	ands	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4a15      	ldr	r2, [pc, #84]	; (8003734 <TIM_OC1_SetConfig+0x110>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	621a      	str	r2, [r3, #32]
}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	46bd      	mov	sp, r7
 8003716:	b006      	add	sp, #24
 8003718:	bd80      	pop	{r7, pc}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	fffeff8f 	.word	0xfffeff8f
 8003720:	40012c00 	.word	0x40012c00
 8003724:	40014000 	.word	0x40014000
 8003728:	40014400 	.word	0x40014400
 800372c:	40014800 	.word	0x40014800
 8003730:	fffffeff 	.word	0xfffffeff
 8003734:	fffffdff 	.word	0xfffffdff

08003738 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	2210      	movs	r2, #16
 800374e:	4393      	bics	r3, r2
 8003750:	001a      	movs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4a2e      	ldr	r2, [pc, #184]	; (8003820 <TIM_OC2_SetConfig+0xe8>)
 8003766:	4013      	ands	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4a2d      	ldr	r2, [pc, #180]	; (8003824 <TIM_OC2_SetConfig+0xec>)
 800376e:	4013      	ands	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2220      	movs	r2, #32
 8003782:	4393      	bics	r3, r2
 8003784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a24      	ldr	r2, [pc, #144]	; (8003828 <TIM_OC2_SetConfig+0xf0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d10d      	bne.n	80037b6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2280      	movs	r2, #128	; 0x80
 800379e:	4393      	bics	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2240      	movs	r2, #64	; 0x40
 80037b2:	4393      	bics	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a1b      	ldr	r2, [pc, #108]	; (8003828 <TIM_OC2_SetConfig+0xf0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00b      	beq.n	80037d6 <TIM_OC2_SetConfig+0x9e>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a1a      	ldr	r2, [pc, #104]	; (800382c <TIM_OC2_SetConfig+0xf4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d007      	beq.n	80037d6 <TIM_OC2_SetConfig+0x9e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a19      	ldr	r2, [pc, #100]	; (8003830 <TIM_OC2_SetConfig+0xf8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d003      	beq.n	80037d6 <TIM_OC2_SetConfig+0x9e>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a18      	ldr	r2, [pc, #96]	; (8003834 <TIM_OC2_SetConfig+0xfc>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d113      	bne.n	80037fe <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4a17      	ldr	r2, [pc, #92]	; (8003838 <TIM_OC2_SetConfig+0x100>)
 80037da:	4013      	ands	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	4a16      	ldr	r2, [pc, #88]	; (800383c <TIM_OC2_SetConfig+0x104>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	621a      	str	r2, [r3, #32]
}
 8003818:	46c0      	nop			; (mov r8, r8)
 800381a:	46bd      	mov	sp, r7
 800381c:	b006      	add	sp, #24
 800381e:	bd80      	pop	{r7, pc}
 8003820:	feff8fff 	.word	0xfeff8fff
 8003824:	fffffcff 	.word	0xfffffcff
 8003828:	40012c00 	.word	0x40012c00
 800382c:	40014000 	.word	0x40014000
 8003830:	40014400 	.word	0x40014400
 8003834:	40014800 	.word	0x40014800
 8003838:	fffffbff 	.word	0xfffffbff
 800383c:	fffff7ff 	.word	0xfffff7ff

08003840 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	4a33      	ldr	r2, [pc, #204]	; (8003924 <TIM_OC3_SetConfig+0xe4>)
 8003856:	401a      	ands	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4a2f      	ldr	r2, [pc, #188]	; (8003928 <TIM_OC3_SetConfig+0xe8>)
 800386c:	4013      	ands	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2203      	movs	r2, #3
 8003874:	4393      	bics	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	4a29      	ldr	r2, [pc, #164]	; (800392c <TIM_OC3_SetConfig+0xec>)
 8003886:	4013      	ands	r3, r2
 8003888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	021b      	lsls	r3, r3, #8
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	4313      	orrs	r3, r2
 8003894:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a25      	ldr	r2, [pc, #148]	; (8003930 <TIM_OC3_SetConfig+0xf0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d10d      	bne.n	80038ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	4a24      	ldr	r2, [pc, #144]	; (8003934 <TIM_OC3_SetConfig+0xf4>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	021b      	lsls	r3, r3, #8
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	4a20      	ldr	r2, [pc, #128]	; (8003938 <TIM_OC3_SetConfig+0xf8>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a1c      	ldr	r2, [pc, #112]	; (8003930 <TIM_OC3_SetConfig+0xf0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00b      	beq.n	80038da <TIM_OC3_SetConfig+0x9a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a1d      	ldr	r2, [pc, #116]	; (800393c <TIM_OC3_SetConfig+0xfc>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d007      	beq.n	80038da <TIM_OC3_SetConfig+0x9a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a1c      	ldr	r2, [pc, #112]	; (8003940 <TIM_OC3_SetConfig+0x100>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d003      	beq.n	80038da <TIM_OC3_SetConfig+0x9a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a1b      	ldr	r2, [pc, #108]	; (8003944 <TIM_OC3_SetConfig+0x104>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d113      	bne.n	8003902 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4a1a      	ldr	r2, [pc, #104]	; (8003948 <TIM_OC3_SetConfig+0x108>)
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4a19      	ldr	r2, [pc, #100]	; (800394c <TIM_OC3_SetConfig+0x10c>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	621a      	str	r2, [r3, #32]
}
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	b006      	add	sp, #24
 8003922:	bd80      	pop	{r7, pc}
 8003924:	fffffeff 	.word	0xfffffeff
 8003928:	fffeff8f 	.word	0xfffeff8f
 800392c:	fffffdff 	.word	0xfffffdff
 8003930:	40012c00 	.word	0x40012c00
 8003934:	fffff7ff 	.word	0xfffff7ff
 8003938:	fffffbff 	.word	0xfffffbff
 800393c:	40014000 	.word	0x40014000
 8003940:	40014400 	.word	0x40014400
 8003944:	40014800 	.word	0x40014800
 8003948:	ffffefff 	.word	0xffffefff
 800394c:	ffffdfff 	.word	0xffffdfff

08003950 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	4a26      	ldr	r2, [pc, #152]	; (8003a00 <TIM_OC4_SetConfig+0xb0>)
 8003966:	401a      	ands	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4a22      	ldr	r2, [pc, #136]	; (8003a04 <TIM_OC4_SetConfig+0xb4>)
 800397c:	4013      	ands	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4a21      	ldr	r2, [pc, #132]	; (8003a08 <TIM_OC4_SetConfig+0xb8>)
 8003984:	4013      	ands	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	4a1d      	ldr	r2, [pc, #116]	; (8003a0c <TIM_OC4_SetConfig+0xbc>)
 8003998:	4013      	ands	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	031b      	lsls	r3, r3, #12
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a19      	ldr	r2, [pc, #100]	; (8003a10 <TIM_OC4_SetConfig+0xc0>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d00b      	beq.n	80039c8 <TIM_OC4_SetConfig+0x78>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a18      	ldr	r2, [pc, #96]	; (8003a14 <TIM_OC4_SetConfig+0xc4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d007      	beq.n	80039c8 <TIM_OC4_SetConfig+0x78>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a17      	ldr	r2, [pc, #92]	; (8003a18 <TIM_OC4_SetConfig+0xc8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d003      	beq.n	80039c8 <TIM_OC4_SetConfig+0x78>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a16      	ldr	r2, [pc, #88]	; (8003a1c <TIM_OC4_SetConfig+0xcc>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d109      	bne.n	80039dc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	4a15      	ldr	r2, [pc, #84]	; (8003a20 <TIM_OC4_SetConfig+0xd0>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	019b      	lsls	r3, r3, #6
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4313      	orrs	r3, r2
 80039da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	621a      	str	r2, [r3, #32]
}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b006      	add	sp, #24
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	ffffefff 	.word	0xffffefff
 8003a04:	feff8fff 	.word	0xfeff8fff
 8003a08:	fffffcff 	.word	0xfffffcff
 8003a0c:	ffffdfff 	.word	0xffffdfff
 8003a10:	40012c00 	.word	0x40012c00
 8003a14:	40014000 	.word	0x40014000
 8003a18:	40014400 	.word	0x40014400
 8003a1c:	40014800 	.word	0x40014800
 8003a20:	ffffbfff 	.word	0xffffbfff

08003a24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	4a23      	ldr	r2, [pc, #140]	; (8003ac8 <TIM_OC5_SetConfig+0xa4>)
 8003a3a:	401a      	ands	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4a1f      	ldr	r2, [pc, #124]	; (8003acc <TIM_OC5_SetConfig+0xa8>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4a1b      	ldr	r2, [pc, #108]	; (8003ad0 <TIM_OC5_SetConfig+0xac>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	041b      	lsls	r3, r3, #16
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a17      	ldr	r2, [pc, #92]	; (8003ad4 <TIM_OC5_SetConfig+0xb0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00b      	beq.n	8003a92 <TIM_OC5_SetConfig+0x6e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a16      	ldr	r2, [pc, #88]	; (8003ad8 <TIM_OC5_SetConfig+0xb4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d007      	beq.n	8003a92 <TIM_OC5_SetConfig+0x6e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a15      	ldr	r2, [pc, #84]	; (8003adc <TIM_OC5_SetConfig+0xb8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d003      	beq.n	8003a92 <TIM_OC5_SetConfig+0x6e>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a14      	ldr	r2, [pc, #80]	; (8003ae0 <TIM_OC5_SetConfig+0xbc>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d109      	bne.n	8003aa6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	4a0c      	ldr	r2, [pc, #48]	; (8003ac8 <TIM_OC5_SetConfig+0xa4>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	021b      	lsls	r3, r3, #8
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	621a      	str	r2, [r3, #32]
}
 8003ac0:	46c0      	nop			; (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b006      	add	sp, #24
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	fffeffff 	.word	0xfffeffff
 8003acc:	fffeff8f 	.word	0xfffeff8f
 8003ad0:	fffdffff 	.word	0xfffdffff
 8003ad4:	40012c00 	.word	0x40012c00
 8003ad8:	40014000 	.word	0x40014000
 8003adc:	40014400 	.word	0x40014400
 8003ae0:	40014800 	.word	0x40014800

08003ae4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	4a24      	ldr	r2, [pc, #144]	; (8003b8c <TIM_OC6_SetConfig+0xa8>)
 8003afa:	401a      	ands	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4a20      	ldr	r2, [pc, #128]	; (8003b90 <TIM_OC6_SetConfig+0xac>)
 8003b10:	4013      	ands	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4a1c      	ldr	r2, [pc, #112]	; (8003b94 <TIM_OC6_SetConfig+0xb0>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	051b      	lsls	r3, r3, #20
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a18      	ldr	r2, [pc, #96]	; (8003b98 <TIM_OC6_SetConfig+0xb4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00b      	beq.n	8003b54 <TIM_OC6_SetConfig+0x70>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <TIM_OC6_SetConfig+0xb8>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d007      	beq.n	8003b54 <TIM_OC6_SetConfig+0x70>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a16      	ldr	r2, [pc, #88]	; (8003ba0 <TIM_OC6_SetConfig+0xbc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d003      	beq.n	8003b54 <TIM_OC6_SetConfig+0x70>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a15      	ldr	r2, [pc, #84]	; (8003ba4 <TIM_OC6_SetConfig+0xc0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d109      	bne.n	8003b68 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	4a14      	ldr	r2, [pc, #80]	; (8003ba8 <TIM_OC6_SetConfig+0xc4>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	029b      	lsls	r3, r3, #10
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	621a      	str	r2, [r3, #32]
}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b006      	add	sp, #24
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	ffefffff 	.word	0xffefffff
 8003b90:	feff8fff 	.word	0xfeff8fff
 8003b94:	ffdfffff 	.word	0xffdfffff
 8003b98:	40012c00 	.word	0x40012c00
 8003b9c:	40014000 	.word	0x40014000
 8003ba0:	40014400 	.word	0x40014400
 8003ba4:	40014800 	.word	0x40014800
 8003ba8:	fffbffff 	.word	0xfffbffff

08003bac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	221f      	movs	r2, #31
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	409a      	lsls	r2, r3
 8003bc2:	0013      	movs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	43d2      	mvns	r2, r2
 8003bce:	401a      	ands	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a1a      	ldr	r2, [r3, #32]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	211f      	movs	r1, #31
 8003bdc:	400b      	ands	r3, r1
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4099      	lsls	r1, r3
 8003be2:	000b      	movs	r3, r1
 8003be4:	431a      	orrs	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	621a      	str	r2, [r3, #32]
}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b006      	add	sp, #24
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	223c      	movs	r2, #60	; 0x3c
 8003c02:	5c9b      	ldrb	r3, [r3, r2]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e055      	b.n	8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	223c      	movs	r2, #60	; 0x3c
 8003c10:	2101      	movs	r1, #1
 8003c12:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	223d      	movs	r2, #61	; 0x3d
 8003c18:	2102      	movs	r1, #2
 8003c1a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a23      	ldr	r2, [pc, #140]	; (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d108      	bne.n	8003c48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4a22      	ldr	r2, [pc, #136]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2270      	movs	r2, #112	; 0x70
 8003c4c:	4393      	bics	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a16      	ldr	r2, [pc, #88]	; (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00f      	beq.n	8003c8c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	2380      	movs	r3, #128	; 0x80
 8003c72:	05db      	lsls	r3, r3, #23
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d009      	beq.n	8003c8c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a12      	ldr	r2, [pc, #72]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d004      	beq.n	8003c8c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a11      	ldr	r2, [pc, #68]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d10c      	bne.n	8003ca6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2280      	movs	r2, #128	; 0x80
 8003c90:	4393      	bics	r3, r2
 8003c92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	223d      	movs	r2, #61	; 0x3d
 8003caa:	2101      	movs	r1, #1
 8003cac:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	223c      	movs	r2, #60	; 0x3c
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	0018      	movs	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b004      	add	sp, #16
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40012c00 	.word	0x40012c00
 8003cc4:	ff0fffff 	.word	0xff0fffff
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	40014000 	.word	0x40014000

08003cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003cd6:	f7fd fac7 	bl	8001268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003cda:	f000 f85b 	bl	8003d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003cde:	f000 f97d 	bl	8003fdc <MX_GPIO_Init>
  MX_ADC1_Init();
 8003ce2:	f000 f8b5 	bl	8003e50 <MX_ADC1_Init>
  MX_TIM2_Init();
 8003ce6:	f000 f919 	bl	8003f1c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003cea:	4b25      	ldr	r3, [pc, #148]	; (8003d80 <main+0xb0>)
 8003cec:	2100      	movs	r1, #0
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f7ff fa20 	bl	8003134 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_IT(&hadc1);
 8003cf4:	4b23      	ldr	r3, [pc, #140]	; (8003d84 <main+0xb4>)
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f7fd fe3c 	bl	8001974 <HAL_ADC_Start_IT>

	uint16_t target = 4200;
 8003cfc:	1dbb      	adds	r3, r7, #6
 8003cfe:	4a22      	ldr	r2, [pc, #136]	; (8003d88 <main+0xb8>)
 8003d00:	801a      	strh	r2, [r3, #0]
	uint16_t maxd = 320;
 8003d02:	1d3b      	adds	r3, r7, #4
 8003d04:	22a0      	movs	r2, #160	; 0xa0
 8003d06:	0052      	lsls	r2, r2, #1
 8003d08:	801a      	strh	r2, [r3, #0]
	uint16_t mind = 0;
 8003d0a:	1cbb      	adds	r3, r7, #2
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

//		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm);
		if(adc<target || pwm<maxd) pwm++;
 8003d10:	1dbb      	adds	r3, r7, #6
 8003d12:	881a      	ldrh	r2, [r3, #0]
 8003d14:	4b1d      	ldr	r3, [pc, #116]	; (8003d8c <main+0xbc>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d806      	bhi.n	8003d2a <main+0x5a>
 8003d1c:	4b1c      	ldr	r3, [pc, #112]	; (8003d90 <main+0xc0>)
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	1d3a      	adds	r2, r7, #4
 8003d24:	8812      	ldrh	r2, [r2, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d907      	bls.n	8003d3a <main+0x6a>
 8003d2a:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <main+0xc0>)
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3301      	adds	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	4b16      	ldr	r3, [pc, #88]	; (8003d90 <main+0xc0>)
 8003d36:	801a      	strh	r2, [r3, #0]
 8003d38:	e013      	b.n	8003d62 <main+0x92>
		else if(adc>target|| pwm>mind) pwm--;
 8003d3a:	1dbb      	adds	r3, r7, #6
 8003d3c:	881a      	ldrh	r2, [r3, #0]
 8003d3e:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <main+0xbc>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d306      	bcc.n	8003d54 <main+0x84>
 8003d46:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <main+0xc0>)
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	1cba      	adds	r2, r7, #2
 8003d4e:	8812      	ldrh	r2, [r2, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d206      	bcs.n	8003d62 <main+0x92>
 8003d54:	4b0e      	ldr	r3, [pc, #56]	; (8003d90 <main+0xc0>)
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <main+0xc0>)
 8003d60:	801a      	strh	r2, [r3, #0]

		if(pwm<maxd) TIM2->CCR1 = pwm;
 8003d62:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <main+0xc0>)
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	1d3a      	adds	r2, r7, #4
 8003d6a:	8812      	ldrh	r2, [r2, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d9cf      	bls.n	8003d10 <main+0x40>
 8003d70:	4b07      	ldr	r3, [pc, #28]	; (8003d90 <main+0xc0>)
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	2380      	movs	r3, #128	; 0x80
 8003d78:	05db      	lsls	r3, r3, #23
 8003d7a:	635a      	str	r2, [r3, #52]	; 0x34
		if(adc<target || pwm<maxd) pwm++;
 8003d7c:	e7c8      	b.n	8003d10 <main+0x40>
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	20000090 	.word	0x20000090
 8003d84:	2000002c 	.word	0x2000002c
 8003d88:	00001068 	.word	0x00001068
 8003d8c:	200000dc 	.word	0x200000dc
 8003d90:	200000e0 	.word	0x200000e0

08003d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d94:	b590      	push	{r4, r7, lr}
 8003d96:	b093      	sub	sp, #76	; 0x4c
 8003d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d9a:	2410      	movs	r4, #16
 8003d9c:	193b      	adds	r3, r7, r4
 8003d9e:	0018      	movs	r0, r3
 8003da0:	2338      	movs	r3, #56	; 0x38
 8003da2:	001a      	movs	r2, r3
 8003da4:	2100      	movs	r1, #0
 8003da6:	f000 faac 	bl	8004302 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003daa:	003b      	movs	r3, r7
 8003dac:	0018      	movs	r0, r3
 8003dae:	2310      	movs	r3, #16
 8003db0:	001a      	movs	r2, r3
 8003db2:	2100      	movs	r1, #0
 8003db4:	f000 faa5 	bl	8004302 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f7fe fc7d 	bl	80026bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003dc2:	193b      	adds	r3, r7, r4
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003dc8:	193b      	adds	r3, r7, r4
 8003dca:	2280      	movs	r2, #128	; 0x80
 8003dcc:	0052      	lsls	r2, r2, #1
 8003dce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003dd0:	0021      	movs	r1, r4
 8003dd2:	187b      	adds	r3, r7, r1
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003dd8:	187b      	adds	r3, r7, r1
 8003dda:	2240      	movs	r2, #64	; 0x40
 8003ddc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003dde:	187b      	adds	r3, r7, r1
 8003de0:	2202      	movs	r2, #2
 8003de2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003de4:	187b      	adds	r3, r7, r1
 8003de6:	2202      	movs	r2, #2
 8003de8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003dea:	187b      	adds	r3, r7, r1
 8003dec:	2200      	movs	r2, #0
 8003dee:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003df0:	187b      	adds	r3, r7, r1
 8003df2:	2208      	movs	r2, #8
 8003df4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003df6:	187b      	adds	r3, r7, r1
 8003df8:	2280      	movs	r2, #128	; 0x80
 8003dfa:	0292      	lsls	r2, r2, #10
 8003dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003dfe:	187b      	adds	r3, r7, r1
 8003e00:	2280      	movs	r2, #128	; 0x80
 8003e02:	0492      	lsls	r2, r2, #18
 8003e04:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003e06:	187b      	adds	r3, r7, r1
 8003e08:	2280      	movs	r2, #128	; 0x80
 8003e0a:	0592      	lsls	r2, r2, #22
 8003e0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e0e:	187b      	adds	r3, r7, r1
 8003e10:	0018      	movs	r0, r3
 8003e12:	f7fe fc93 	bl	800273c <HAL_RCC_OscConfig>
 8003e16:	1e03      	subs	r3, r0, #0
 8003e18:	d001      	beq.n	8003e1e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8003e1a:	f000 f94d 	bl	80040b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e1e:	003b      	movs	r3, r7
 8003e20:	2207      	movs	r2, #7
 8003e22:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e24:	003b      	movs	r3, r7
 8003e26:	2202      	movs	r2, #2
 8003e28:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e2a:	003b      	movs	r3, r7
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e30:	003b      	movs	r3, r7
 8003e32:	2200      	movs	r2, #0
 8003e34:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e36:	003b      	movs	r3, r7
 8003e38:	2102      	movs	r1, #2
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f7fe ff98 	bl	8002d70 <HAL_RCC_ClockConfig>
 8003e40:	1e03      	subs	r3, r0, #0
 8003e42:	d001      	beq.n	8003e48 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003e44:	f000 f938 	bl	80040b8 <Error_Handler>
  }
}
 8003e48:	46c0      	nop			; (mov r8, r8)
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b013      	add	sp, #76	; 0x4c
 8003e4e:	bd90      	pop	{r4, r7, pc}

08003e50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003e56:	1d3b      	adds	r3, r7, #4
 8003e58:	0018      	movs	r0, r3
 8003e5a:	230c      	movs	r3, #12
 8003e5c:	001a      	movs	r2, r3
 8003e5e:	2100      	movs	r1, #0
 8003e60:	f000 fa4f 	bl	8004302 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003e64:	4b2b      	ldr	r3, [pc, #172]	; (8003f14 <MX_ADC1_Init+0xc4>)
 8003e66:	4a2c      	ldr	r2, [pc, #176]	; (8003f18 <MX_ADC1_Init+0xc8>)
 8003e68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003e6a:	4b2a      	ldr	r3, [pc, #168]	; (8003f14 <MX_ADC1_Init+0xc4>)
 8003e6c:	2280      	movs	r2, #128	; 0x80
 8003e6e:	05d2      	lsls	r2, r2, #23
 8003e70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003e72:	4b28      	ldr	r3, [pc, #160]	; (8003f14 <MX_ADC1_Init+0xc4>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003e78:	4b26      	ldr	r3, [pc, #152]	; (8003f14 <MX_ADC1_Init+0xc4>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003e7e:	4b25      	ldr	r3, [pc, #148]	; (8003f14 <MX_ADC1_Init+0xc4>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003e84:	4b23      	ldr	r3, [pc, #140]	; (8003f14 <MX_ADC1_Init+0xc4>)
 8003e86:	2204      	movs	r2, #4
 8003e88:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003e8a:	4b22      	ldr	r3, [pc, #136]	; (8003f14 <MX_ADC1_Init+0xc4>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003e90:	4b20      	ldr	r3, [pc, #128]	; (8003f14 <MX_ADC1_Init+0xc4>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003e96:	4b1f      	ldr	r3, [pc, #124]	; (8003f14 <MX_ADC1_Init+0xc4>)
 8003e98:	2201      	movs	r2, #1
 8003e9a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8003e9c:	4b1d      	ldr	r3, [pc, #116]	; (8003f14 <MX_ADC1_Init+0xc4>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ea2:	4b1c      	ldr	r3, [pc, #112]	; (8003f14 <MX_ADC1_Init+0xc4>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ea8:	4b1a      	ldr	r3, [pc, #104]	; (8003f14 <MX_ADC1_Init+0xc4>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003eae:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <MX_ADC1_Init+0xc4>)
 8003eb0:	222c      	movs	r2, #44	; 0x2c
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003eb6:	4b17      	ldr	r3, [pc, #92]	; (8003f14 <MX_ADC1_Init+0xc4>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003ebc:	4b15      	ldr	r3, [pc, #84]	; (8003f14 <MX_ADC1_Init+0xc4>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8003ec2:	4b14      	ldr	r3, [pc, #80]	; (8003f14 <MX_ADC1_Init+0xc4>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003ec8:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <MX_ADC1_Init+0xc4>)
 8003eca:	223c      	movs	r2, #60	; 0x3c
 8003ecc:	2100      	movs	r1, #0
 8003ece:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003ed0:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <MX_ADC1_Init+0xc4>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ed6:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <MX_ADC1_Init+0xc4>)
 8003ed8:	0018      	movs	r0, r3
 8003eda:	f7fd fba3 	bl	8001624 <HAL_ADC_Init>
 8003ede:	1e03      	subs	r3, r0, #0
 8003ee0:	d001      	beq.n	8003ee6 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8003ee2:	f000 f8e9 	bl	80040b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003ee6:	1d3b      	adds	r3, r7, #4
 8003ee8:	2201      	movs	r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003eec:	1d3b      	adds	r3, r7, #4
 8003eee:	2200      	movs	r2, #0
 8003ef0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003ef2:	1d3b      	adds	r3, r7, #4
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ef8:	1d3a      	adds	r2, r7, #4
 8003efa:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <MX_ADC1_Init+0xc4>)
 8003efc:	0011      	movs	r1, r2
 8003efe:	0018      	movs	r0, r3
 8003f00:	f7fd fee4 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8003f04:	1e03      	subs	r3, r0, #0
 8003f06:	d001      	beq.n	8003f0c <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8003f08:	f000 f8d6 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003f0c:	46c0      	nop			; (mov r8, r8)
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b004      	add	sp, #16
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	2000002c 	.word	0x2000002c
 8003f18:	40012400 	.word	0x40012400

08003f1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	; 0x28
 8003f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f22:	231c      	movs	r3, #28
 8003f24:	18fb      	adds	r3, r7, r3
 8003f26:	0018      	movs	r0, r3
 8003f28:	230c      	movs	r3, #12
 8003f2a:	001a      	movs	r2, r3
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	f000 f9e8 	bl	8004302 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f32:	003b      	movs	r3, r7
 8003f34:	0018      	movs	r0, r3
 8003f36:	231c      	movs	r3, #28
 8003f38:	001a      	movs	r2, r3
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	f000 f9e1 	bl	8004302 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f40:	4b25      	ldr	r3, [pc, #148]	; (8003fd8 <MX_TIM2_Init+0xbc>)
 8003f42:	2280      	movs	r2, #128	; 0x80
 8003f44:	05d2      	lsls	r2, r2, #23
 8003f46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003f48:	4b23      	ldr	r3, [pc, #140]	; (8003fd8 <MX_TIM2_Init+0xbc>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f4e:	4b22      	ldr	r3, [pc, #136]	; (8003fd8 <MX_TIM2_Init+0xbc>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 640;
 8003f54:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <MX_TIM2_Init+0xbc>)
 8003f56:	22a0      	movs	r2, #160	; 0xa0
 8003f58:	0092      	lsls	r2, r2, #2
 8003f5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f5c:	4b1e      	ldr	r3, [pc, #120]	; (8003fd8 <MX_TIM2_Init+0xbc>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f62:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <MX_TIM2_Init+0xbc>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003f68:	4b1b      	ldr	r3, [pc, #108]	; (8003fd8 <MX_TIM2_Init+0xbc>)
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f7ff f88a 	bl	8003084 <HAL_TIM_PWM_Init>
 8003f70:	1e03      	subs	r3, r0, #0
 8003f72:	d001      	beq.n	8003f78 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003f74:	f000 f8a0 	bl	80040b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f78:	211c      	movs	r1, #28
 8003f7a:	187b      	adds	r3, r7, r1
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f80:	187b      	adds	r3, r7, r1
 8003f82:	2200      	movs	r2, #0
 8003f84:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f86:	187a      	adds	r2, r7, r1
 8003f88:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <MX_TIM2_Init+0xbc>)
 8003f8a:	0011      	movs	r1, r2
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f7ff fe31 	bl	8003bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8003f92:	1e03      	subs	r3, r0, #0
 8003f94:	d001      	beq.n	8003f9a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003f96:	f000 f88f 	bl	80040b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f9a:	003b      	movs	r3, r7
 8003f9c:	2260      	movs	r2, #96	; 0x60
 8003f9e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 8003fa0:	003b      	movs	r3, r7
 8003fa2:	220a      	movs	r2, #10
 8003fa4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fa6:	003b      	movs	r3, r7
 8003fa8:	2200      	movs	r2, #0
 8003faa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fac:	003b      	movs	r3, r7
 8003fae:	2200      	movs	r2, #0
 8003fb0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fb2:	0039      	movs	r1, r7
 8003fb4:	4b08      	ldr	r3, [pc, #32]	; (8003fd8 <MX_TIM2_Init+0xbc>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f7ff f9a5 	bl	8003308 <HAL_TIM_PWM_ConfigChannel>
 8003fbe:	1e03      	subs	r3, r0, #0
 8003fc0:	d001      	beq.n	8003fc6 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8003fc2:	f000 f879 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003fc6:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <MX_TIM2_Init+0xbc>)
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f000 f90b 	bl	80041e4 <HAL_TIM_MspPostInit>

}
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	b00a      	add	sp, #40	; 0x28
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	20000090 	.word	0x20000090

08003fdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b089      	sub	sp, #36	; 0x24
 8003fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe2:	240c      	movs	r4, #12
 8003fe4:	193b      	adds	r3, r7, r4
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	2314      	movs	r3, #20
 8003fea:	001a      	movs	r2, r3
 8003fec:	2100      	movs	r1, #0
 8003fee:	f000 f988 	bl	8004302 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ff2:	4b1a      	ldr	r3, [pc, #104]	; (800405c <MX_GPIO_Init+0x80>)
 8003ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ff6:	4b19      	ldr	r3, [pc, #100]	; (800405c <MX_GPIO_Init+0x80>)
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	635a      	str	r2, [r3, #52]	; 0x34
 8003ffe:	4b17      	ldr	r3, [pc, #92]	; (800405c <MX_GPIO_Init+0x80>)
 8004000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004002:	2201      	movs	r2, #1
 8004004:	4013      	ands	r3, r2
 8004006:	60bb      	str	r3, [r7, #8]
 8004008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800400a:	4b14      	ldr	r3, [pc, #80]	; (800405c <MX_GPIO_Init+0x80>)
 800400c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800400e:	4b13      	ldr	r3, [pc, #76]	; (800405c <MX_GPIO_Init+0x80>)
 8004010:	2102      	movs	r1, #2
 8004012:	430a      	orrs	r2, r1
 8004014:	635a      	str	r2, [r3, #52]	; 0x34
 8004016:	4b11      	ldr	r3, [pc, #68]	; (800405c <MX_GPIO_Init+0x80>)
 8004018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401a:	2202      	movs	r2, #2
 800401c:	4013      	ands	r3, r2
 800401e:	607b      	str	r3, [r7, #4]
 8004020:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8004022:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <MX_GPIO_Init+0x84>)
 8004024:	2200      	movs	r2, #0
 8004026:	2102      	movs	r1, #2
 8004028:	0018      	movs	r0, r3
 800402a:	f7fe fb0f 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800402e:	0021      	movs	r1, r4
 8004030:	187b      	adds	r3, r7, r1
 8004032:	2202      	movs	r2, #2
 8004034:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004036:	187b      	adds	r3, r7, r1
 8004038:	2201      	movs	r2, #1
 800403a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403c:	187b      	adds	r3, r7, r1
 800403e:	2200      	movs	r2, #0
 8004040:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004042:	187b      	adds	r3, r7, r1
 8004044:	2200      	movs	r2, #0
 8004046:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004048:	187b      	adds	r3, r7, r1
 800404a:	4a05      	ldr	r2, [pc, #20]	; (8004060 <MX_GPIO_Init+0x84>)
 800404c:	0019      	movs	r1, r3
 800404e:	0010      	movs	r0, r2
 8004050:	f7fe f998 	bl	8002384 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004054:	46c0      	nop			; (mov r8, r8)
 8004056:	46bd      	mov	sp, r7
 8004058:	b009      	add	sp, #36	; 0x24
 800405a:	bd90      	pop	{r4, r7, pc}
 800405c:	40021000 	.word	0x40021000
 8004060:	50000400 	.word	0x50000400

08004064 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800406c:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <HAL_ADC_ConvCpltCallback+0x44>)
 800406e:	2102      	movs	r1, #2
 8004070:	0018      	movs	r0, r3
 8004072:	f7fe fb08 	bl	8002686 <HAL_GPIO_TogglePin>
	adc = HAL_ADC_GetValue(hadc)*18.6;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	0018      	movs	r0, r3
 800407a:	f7fd fcf3 	bl	8001a64 <HAL_ADC_GetValue>
 800407e:	0003      	movs	r3, r0
 8004080:	0018      	movs	r0, r3
 8004082:	f7fc ff63 	bl	8000f4c <__aeabi_ui2d>
 8004086:	4a09      	ldr	r2, [pc, #36]	; (80040ac <HAL_ADC_ConvCpltCallback+0x48>)
 8004088:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <HAL_ADC_ConvCpltCallback+0x4c>)
 800408a:	f7fc f8e5 	bl	8000258 <__aeabi_dmul>
 800408e:	0002      	movs	r2, r0
 8004090:	000b      	movs	r3, r1
 8004092:	0010      	movs	r0, r2
 8004094:	0019      	movs	r1, r3
 8004096:	f7fc f8c1 	bl	800021c <__aeabi_d2uiz>
 800409a:	0002      	movs	r2, r0
 800409c:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <HAL_ADC_ConvCpltCallback+0x50>)
 800409e:	601a      	str	r2, [r3, #0]
}
 80040a0:	46c0      	nop			; (mov r8, r8)
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b002      	add	sp, #8
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	50000400 	.word	0x50000400
 80040ac:	9999999a 	.word	0x9999999a
 80040b0:	40329999 	.word	0x40329999
 80040b4:	200000dc 	.word	0x200000dc

080040b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80040bc:	b672      	cpsid	i
}
 80040be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80040c0:	e7fe      	b.n	80040c0 <Error_Handler+0x8>
	...

080040c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ca:	4b11      	ldr	r3, [pc, #68]	; (8004110 <HAL_MspInit+0x4c>)
 80040cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ce:	4b10      	ldr	r3, [pc, #64]	; (8004110 <HAL_MspInit+0x4c>)
 80040d0:	2101      	movs	r1, #1
 80040d2:	430a      	orrs	r2, r1
 80040d4:	641a      	str	r2, [r3, #64]	; 0x40
 80040d6:	4b0e      	ldr	r3, [pc, #56]	; (8004110 <HAL_MspInit+0x4c>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	2201      	movs	r2, #1
 80040dc:	4013      	ands	r3, r2
 80040de:	607b      	str	r3, [r7, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040e2:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <HAL_MspInit+0x4c>)
 80040e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040e6:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <HAL_MspInit+0x4c>)
 80040e8:	2180      	movs	r1, #128	; 0x80
 80040ea:	0549      	lsls	r1, r1, #21
 80040ec:	430a      	orrs	r2, r1
 80040ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80040f0:	4b07      	ldr	r3, [pc, #28]	; (8004110 <HAL_MspInit+0x4c>)
 80040f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040f4:	2380      	movs	r3, #128	; 0x80
 80040f6:	055b      	lsls	r3, r3, #21
 80040f8:	4013      	ands	r3, r2
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 80040fe:	2380      	movs	r3, #128	; 0x80
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	0018      	movs	r0, r3
 8004104:	f7fd f936 	bl	8001374 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004108:	46c0      	nop			; (mov r8, r8)
 800410a:	46bd      	mov	sp, r7
 800410c:	b002      	add	sp, #8
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40021000 	.word	0x40021000

08004114 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004114:	b590      	push	{r4, r7, lr}
 8004116:	b08b      	sub	sp, #44	; 0x2c
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800411c:	2414      	movs	r4, #20
 800411e:	193b      	adds	r3, r7, r4
 8004120:	0018      	movs	r0, r3
 8004122:	2314      	movs	r3, #20
 8004124:	001a      	movs	r2, r3
 8004126:	2100      	movs	r1, #0
 8004128:	f000 f8eb 	bl	8004302 <memset>
  if(hadc->Instance==ADC1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a1c      	ldr	r2, [pc, #112]	; (80041a4 <HAL_ADC_MspInit+0x90>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d131      	bne.n	800419a <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004136:	4b1c      	ldr	r3, [pc, #112]	; (80041a8 <HAL_ADC_MspInit+0x94>)
 8004138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800413a:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <HAL_ADC_MspInit+0x94>)
 800413c:	2180      	movs	r1, #128	; 0x80
 800413e:	0349      	lsls	r1, r1, #13
 8004140:	430a      	orrs	r2, r1
 8004142:	641a      	str	r2, [r3, #64]	; 0x40
 8004144:	4b18      	ldr	r3, [pc, #96]	; (80041a8 <HAL_ADC_MspInit+0x94>)
 8004146:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004148:	2380      	movs	r3, #128	; 0x80
 800414a:	035b      	lsls	r3, r3, #13
 800414c:	4013      	ands	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004152:	4b15      	ldr	r3, [pc, #84]	; (80041a8 <HAL_ADC_MspInit+0x94>)
 8004154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004156:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <HAL_ADC_MspInit+0x94>)
 8004158:	2101      	movs	r1, #1
 800415a:	430a      	orrs	r2, r1
 800415c:	635a      	str	r2, [r3, #52]	; 0x34
 800415e:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <HAL_ADC_MspInit+0x94>)
 8004160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004162:	2201      	movs	r2, #1
 8004164:	4013      	ands	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = VOLTAGE_Pin|CURRENT_Pin;
 800416a:	193b      	adds	r3, r7, r4
 800416c:	2205      	movs	r2, #5
 800416e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004170:	193b      	adds	r3, r7, r4
 8004172:	2203      	movs	r2, #3
 8004174:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004176:	193b      	adds	r3, r7, r4
 8004178:	2200      	movs	r2, #0
 800417a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800417c:	193a      	adds	r2, r7, r4
 800417e:	23a0      	movs	r3, #160	; 0xa0
 8004180:	05db      	lsls	r3, r3, #23
 8004182:	0011      	movs	r1, r2
 8004184:	0018      	movs	r0, r3
 8004186:	f7fe f8fd 	bl	8002384 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 800418a:	2200      	movs	r2, #0
 800418c:	2100      	movs	r1, #0
 800418e:	200c      	movs	r0, #12
 8004190:	f7fe f8c6 	bl	8002320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8004194:	200c      	movs	r0, #12
 8004196:	f7fe f8d8 	bl	800234a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	46bd      	mov	sp, r7
 800419e:	b00b      	add	sp, #44	; 0x2c
 80041a0:	bd90      	pop	{r4, r7, pc}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	40012400 	.word	0x40012400
 80041a8:	40021000 	.word	0x40021000

080041ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	2380      	movs	r3, #128	; 0x80
 80041ba:	05db      	lsls	r3, r3, #23
 80041bc:	429a      	cmp	r2, r3
 80041be:	d10b      	bne.n	80041d8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041c0:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <HAL_TIM_PWM_MspInit+0x34>)
 80041c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041c4:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <HAL_TIM_PWM_MspInit+0x34>)
 80041c6:	2101      	movs	r1, #1
 80041c8:	430a      	orrs	r2, r1
 80041ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80041cc:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <HAL_TIM_PWM_MspInit+0x34>)
 80041ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d0:	2201      	movs	r2, #1
 80041d2:	4013      	ands	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80041d8:	46c0      	nop			; (mov r8, r8)
 80041da:	46bd      	mov	sp, r7
 80041dc:	b004      	add	sp, #16
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40021000 	.word	0x40021000

080041e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80041e4:	b590      	push	{r4, r7, lr}
 80041e6:	b089      	sub	sp, #36	; 0x24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ec:	240c      	movs	r4, #12
 80041ee:	193b      	adds	r3, r7, r4
 80041f0:	0018      	movs	r0, r3
 80041f2:	2314      	movs	r3, #20
 80041f4:	001a      	movs	r2, r3
 80041f6:	2100      	movs	r1, #0
 80041f8:	f000 f883 	bl	8004302 <memset>
  if(htim->Instance==TIM2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	2380      	movs	r3, #128	; 0x80
 8004202:	05db      	lsls	r3, r3, #23
 8004204:	429a      	cmp	r2, r3
 8004206:	d122      	bne.n	800424e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004208:	4b13      	ldr	r3, [pc, #76]	; (8004258 <HAL_TIM_MspPostInit+0x74>)
 800420a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800420c:	4b12      	ldr	r3, [pc, #72]	; (8004258 <HAL_TIM_MspPostInit+0x74>)
 800420e:	2101      	movs	r1, #1
 8004210:	430a      	orrs	r2, r1
 8004212:	635a      	str	r2, [r3, #52]	; 0x34
 8004214:	4b10      	ldr	r3, [pc, #64]	; (8004258 <HAL_TIM_MspPostInit+0x74>)
 8004216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004218:	2201      	movs	r2, #1
 800421a:	4013      	ands	r3, r2
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = OUTPUT_Pin;
 8004220:	0021      	movs	r1, r4
 8004222:	187b      	adds	r3, r7, r1
 8004224:	2220      	movs	r2, #32
 8004226:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004228:	187b      	adds	r3, r7, r1
 800422a:	2202      	movs	r2, #2
 800422c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422e:	187b      	adds	r3, r7, r1
 8004230:	2200      	movs	r2, #0
 8004232:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004234:	187b      	adds	r3, r7, r1
 8004236:	2200      	movs	r2, #0
 8004238:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800423a:	187b      	adds	r3, r7, r1
 800423c:	2202      	movs	r2, #2
 800423e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8004240:	187a      	adds	r2, r7, r1
 8004242:	23a0      	movs	r3, #160	; 0xa0
 8004244:	05db      	lsls	r3, r3, #23
 8004246:	0011      	movs	r1, r2
 8004248:	0018      	movs	r0, r3
 800424a:	f7fe f89b 	bl	8002384 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	46bd      	mov	sp, r7
 8004252:	b009      	add	sp, #36	; 0x24
 8004254:	bd90      	pop	{r4, r7, pc}
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	40021000 	.word	0x40021000

0800425c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004260:	e7fe      	b.n	8004260 <NMI_Handler+0x4>

08004262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004266:	e7fe      	b.n	8004266 <HardFault_Handler+0x4>

08004268 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800426c:	46c0      	nop			; (mov r8, r8)
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004280:	f7fd f85c 	bl	800133c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004284:	46c0      	nop			; (mov r8, r8)
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
	...

0800428c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004290:	4b03      	ldr	r3, [pc, #12]	; (80042a0 <ADC1_COMP_IRQHandler+0x14>)
 8004292:	0018      	movs	r0, r3
 8004294:	f7fd fbf2 	bl	8001a7c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8004298:	46c0      	nop			; (mov r8, r8)
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	46c0      	nop			; (mov r8, r8)
 80042a0:	2000002c 	.word	0x2000002c

080042a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042a8:	46c0      	nop			; (mov r8, r8)
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80042b0:	480d      	ldr	r0, [pc, #52]	; (80042e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80042b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80042b4:	f7ff fff6 	bl	80042a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042b8:	480c      	ldr	r0, [pc, #48]	; (80042ec <LoopForever+0x6>)
  ldr r1, =_edata
 80042ba:	490d      	ldr	r1, [pc, #52]	; (80042f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80042bc:	4a0d      	ldr	r2, [pc, #52]	; (80042f4 <LoopForever+0xe>)
  movs r3, #0
 80042be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042c0:	e002      	b.n	80042c8 <LoopCopyDataInit>

080042c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042c6:	3304      	adds	r3, #4

080042c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042cc:	d3f9      	bcc.n	80042c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042ce:	4a0a      	ldr	r2, [pc, #40]	; (80042f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80042d0:	4c0a      	ldr	r4, [pc, #40]	; (80042fc <LoopForever+0x16>)
  movs r3, #0
 80042d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042d4:	e001      	b.n	80042da <LoopFillZerobss>

080042d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042d8:	3204      	adds	r2, #4

080042da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042dc:	d3fb      	bcc.n	80042d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80042de:	f000 f819 	bl	8004314 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80042e2:	f7ff fcf5 	bl	8003cd0 <main>

080042e6 <LoopForever>:

LoopForever:
  b LoopForever
 80042e6:	e7fe      	b.n	80042e6 <LoopForever>
  ldr   r0, =_estack
 80042e8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80042ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80042f4:	08004410 	.word	0x08004410
  ldr r2, =_sbss
 80042f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80042fc:	200000e4 	.word	0x200000e4

08004300 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004300:	e7fe      	b.n	8004300 <CEC_IRQHandler>

08004302 <memset>:
 8004302:	0003      	movs	r3, r0
 8004304:	1882      	adds	r2, r0, r2
 8004306:	4293      	cmp	r3, r2
 8004308:	d100      	bne.n	800430c <memset+0xa>
 800430a:	4770      	bx	lr
 800430c:	7019      	strb	r1, [r3, #0]
 800430e:	3301      	adds	r3, #1
 8004310:	e7f9      	b.n	8004306 <memset+0x4>
	...

08004314 <__libc_init_array>:
 8004314:	b570      	push	{r4, r5, r6, lr}
 8004316:	2600      	movs	r6, #0
 8004318:	4c0c      	ldr	r4, [pc, #48]	; (800434c <__libc_init_array+0x38>)
 800431a:	4d0d      	ldr	r5, [pc, #52]	; (8004350 <__libc_init_array+0x3c>)
 800431c:	1b64      	subs	r4, r4, r5
 800431e:	10a4      	asrs	r4, r4, #2
 8004320:	42a6      	cmp	r6, r4
 8004322:	d109      	bne.n	8004338 <__libc_init_array+0x24>
 8004324:	2600      	movs	r6, #0
 8004326:	f000 f819 	bl	800435c <_init>
 800432a:	4c0a      	ldr	r4, [pc, #40]	; (8004354 <__libc_init_array+0x40>)
 800432c:	4d0a      	ldr	r5, [pc, #40]	; (8004358 <__libc_init_array+0x44>)
 800432e:	1b64      	subs	r4, r4, r5
 8004330:	10a4      	asrs	r4, r4, #2
 8004332:	42a6      	cmp	r6, r4
 8004334:	d105      	bne.n	8004342 <__libc_init_array+0x2e>
 8004336:	bd70      	pop	{r4, r5, r6, pc}
 8004338:	00b3      	lsls	r3, r6, #2
 800433a:	58eb      	ldr	r3, [r5, r3]
 800433c:	4798      	blx	r3
 800433e:	3601      	adds	r6, #1
 8004340:	e7ee      	b.n	8004320 <__libc_init_array+0xc>
 8004342:	00b3      	lsls	r3, r6, #2
 8004344:	58eb      	ldr	r3, [r5, r3]
 8004346:	4798      	blx	r3
 8004348:	3601      	adds	r6, #1
 800434a:	e7f2      	b.n	8004332 <__libc_init_array+0x1e>
 800434c:	08004408 	.word	0x08004408
 8004350:	08004408 	.word	0x08004408
 8004354:	0800440c 	.word	0x0800440c
 8004358:	08004408 	.word	0x08004408

0800435c <_init>:
 800435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004362:	bc08      	pop	{r3}
 8004364:	469e      	mov	lr, r3
 8004366:	4770      	bx	lr

08004368 <_fini>:
 8004368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436e:	bc08      	pop	{r3}
 8004370:	469e      	mov	lr, r3
 8004372:	4770      	bx	lr
